%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: fs_fm.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yingchenzhen
%%CreationDate: 2019/3/12, 0:15:30
%%BoundingBox: 0 0 1135 347
%%HiResBoundingBox: 0 0 1134.9961 346.2801
%%CropBox: 0 0 1134.9961 346.2801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-03-12T00:02:36+08:00"
   xmp:CreatorTool="matplotlib 3.0.2, http://matplotlib.org"
   xmp:ModifyDate="2019-03-12T00:12:42+08:00"
   xmp:MetadataDate="2019-03-12T00:12:42+08:00"
   pdf:Producer="matplotlib pdf backend 3.0.2"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:98a7c930-7c30-4eaa-bcee-bb0f8d077cce"
   xmpMM:InstanceID="uuid:a0b71374-c0fe-407d-ac0e-7ecc23a7d035"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -346.28 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 346.28 li
1135 346.28 li
1135 0 li
cp
clp
gsave
-.503935 346.784 mo
1135.5 346.784 li
1135.5 -.216005 li
-.503935 -.216005 li
-.503935 346.784 li
clp
-8.50391 354.784 mo
1143.5 354.784 li
1143.5 -34.016 li
-8.50391 -34.016 li
-8.50391 354.784 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
31.5261 263.286 mo
330.52 263.286 li
330.52 59.5968 li
31.5261 59.5968 li
cp
f
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
44.2924 294.623 mo
52.6442 294.623 li
52.6442 81.3697 li
44.2924 81.3697 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
44.2924 294.623 mo
52.6442 294.623 li
52.6442 81.3697 li
44.2924 81.3697 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
92.0169 294.623 mo
100.369 294.623 li
100.369 91.0903 li
92.0169 91.0903 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
92.0169 294.623 mo
100.369 294.623 li
100.369 91.0903 li
92.0169 91.0903 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
139.741 294.623 mo
148.093 294.623 li
148.093 82.5636 li
139.741 82.5636 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
139.741 294.623 mo
148.093 294.623 li
148.093 82.5636 li
139.741 82.5636 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
187.466 294.623 mo
195.818 294.623 li
195.818 82.2565 li
187.466 82.2565 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
187.466 294.623 mo
195.818 294.623 li
195.818 82.2565 li
187.466 82.2565 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
235.19 294.623 mo
243.542 294.623 li
243.542 92.8954 li
235.19 92.8954 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
235.19 294.623 mo
243.542 294.623 li
243.542 92.8954 li
235.19 92.8954 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
282.915 294.623 mo
291.267 294.623 li
291.267 75.9358 li
282.915 75.9358 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
282.915 294.623 mo
291.267 294.623 li
291.267 75.9358 li
282.915 75.9358 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
52.6442 294.623 mo
60.996 294.623 li
60.996 81.6768 li
52.6442 81.6768 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
52.6442 294.623 mo
60.996 294.623 li
60.996 81.6768 li
52.6442 81.6768 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
100.369 294.623 mo
108.72 294.623 li
108.72 90.4354 li
100.369 90.4354 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
100.369 294.623 mo
108.72 294.623 li
108.72 90.4354 li
100.369 90.4354 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
148.093 294.623 mo
156.445 294.623 li
156.445 83.7168 li
148.093 83.7168 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
148.093 294.623 mo
156.445 294.623 li
156.445 83.7168 li
148.093 83.7168 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
195.818 294.623 mo
204.169 294.623 li
204.169 80.0222 li
195.818 80.0222 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
195.818 294.623 mo
204.169 294.623 li
204.169 80.0222 li
195.818 80.0222 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
243.542 294.623 mo
251.894 294.623 li
251.894 94.5875 li
243.542 94.5875 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
243.542 294.623 mo
251.894 294.623 li
251.894 94.5875 li
243.542 94.5875 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
31.5262 263.286 mo
330.52 263.286 li
330.52 59.5969 li
31.5262 59.5969 li
31.5262 263.286 li
clp
291.267 294.623 mo
299.618 294.623 li
299.618 75.9358 li
291.267 75.9358 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
291.267 294.623 mo
299.618 294.623 li
299.618 75.9358 li
291.267 75.9358 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
91.8976 263.286 mo
91.8976 266.786 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
91.8976 263.286 mo
91.8976 266.786 li
@
33.053 273.111 mo
32.6673 274.298 li
32.2698 273.923 31.8893 273.621 31.5174 273.377 cv
31.1292 273.142 30.7537 272.952 30.3827 272.831 cv
29.7151 272.614 29.1516 272.581 28.7127 272.712 cv
28.2698 272.855 27.9762 273.17 27.8236 273.64 cv
27.695 274.035 27.7059 274.381 27.8889 274.659 cv
28.0555 274.945 28.4607 275.255 29.0882 275.595 cv
29.7818 275.985 li
30.6281 276.451 31.1953 276.977 31.4874 277.55 cv
31.7756 278.136 31.8093 278.789 31.5723 279.519 cv
31.2871 280.397 30.7774 280.956 30.0517 281.212 cv
29.3136 281.464 28.3882 281.41 27.2631 281.044 cv
26.8304 280.903 26.389 280.705 25.9349 280.462 cv
25.4809 280.219 25.0305 279.922 24.5879 279.56 cv
24.9976 278.299 li
25.3998 278.744 25.8137 279.11 26.2393 279.399 cv
26.6609 279.7 27.1106 279.915 27.5805 280.067 cv
28.2728 280.292 28.8487 280.329 29.3203 280.181 cv
29.7796 280.03 30.102 279.711 30.2707 279.192 cv
30.4153 278.747 30.3918 278.356 30.2001 278.021 cv
30.0085 277.685 29.6236 277.355 29.0456 277.03 cv
28.352 276.641 li
27.4933 276.171 26.9305 275.673 26.651 275.145 cv
26.3675 274.629 26.3425 274.033 26.5674 273.341 cv
26.8245 272.55 27.3014 272.008 28.0188 271.735 cv
28.7238 271.458 29.579 271.476 30.5681 271.798 cv
30.9885 271.934 31.3968 272.108 31.8178 272.327 cv
32.2264 272.542 32.6313 272.81 33.053 273.111 cv
f
36.5398 274.285 mo
35.9171 276.201 li
38.2044 276.944 li
37.9232 277.81 li
35.6359 277.067 li
34.4428 280.739 li
34.262 281.295 34.2197 281.678 34.3198 281.874 cv
34.416 282.083 34.701 282.258 35.1708 282.41 cv
36.3083 282.78 li
36.007 283.707 li
34.8695 283.338 li
34.004 283.057 33.4628 282.703 33.2458 282.277 cv
33.0288 281.851 33.0569 281.218 33.33 280.377 cv
34.5232 276.705 li
33.7071 276.44 li
33.9884 275.574 li
34.8044 275.84 li
35.427 273.923 li
36.5398 274.285 li
f
41.6492 281.782 mo
40.7466 281.488 40.0923 281.399 39.6818 281.484 cv
39.2673 281.582 38.9818 281.872 38.8211 282.366 cv
38.6925 282.762 38.7117 283.124 38.899 283.43 cv
39.0824 283.75 39.4048 283.978 39.8498 284.122 cv
40.468 284.323 41.0309 284.274 41.5464 283.949 cv
42.0579 283.637 42.4322 283.116 42.6692 282.386 cv
42.7495 282.139 li
41.6492 281.782 li
44.0109 282.043 mo
42.7575 285.901 li
41.6448 285.539 li
41.9782 284.513 li
41.582 284.849 41.1642 285.041 40.733 285.106 cv
40.3018 285.171 39.7999 285.117 39.2558 284.941 cv
38.5635 284.716 38.0674 284.349 37.7839 283.834 cv
37.5004 283.318 37.4713 282.734 37.6842 282.079 cv
37.9293 281.325 38.3614 280.836 39.0092 280.609 cv
39.6406 280.391 40.4591 280.438 41.4729 280.768 cv
43.0308 281.274 li
43.0669 281.162 li
43.2316 280.656 43.1871 280.204 42.9457 279.811 cv
42.7002 279.43 42.2786 279.129 41.6728 278.932 cv
41.2771 278.804 40.8901 278.733 40.4871 278.711 cv
40.084 278.69 39.6937 278.713 39.3036 278.778 cv
39.637 277.752 li
40.0809 277.732 40.5167 277.737 40.9241 277.787 cv
41.3315 277.837 41.7184 277.908 42.0894 278.029 cv
43.0661 278.346 43.7112 278.843 44.0287 279.507 cv
44.3461 280.17 44.3444 281.017 44.0109 282.043 cv
f
48.9654 278.322 mo
48.3427 280.239 li
50.63 280.982 li
50.3488 281.847 li
48.0615 281.104 li
46.8684 284.776 li
46.6876 285.332 46.6453 285.715 46.7455 285.912 cv
46.8416 286.121 47.1266 286.295 47.5964 286.448 cv
48.7339 286.817 li
48.4326 287.745 li
47.2951 287.375 li
46.4297 287.094 45.8884 286.74 45.6714 286.314 cv
45.4544 285.889 45.4825 285.255 45.7557 284.414 cv
46.9488 280.742 li
46.1328 280.477 li
46.414 279.612 li
47.23 279.877 li
47.8526 277.961 li
48.9654 278.322 li
f
52.0889 281.456 mo
53.2016 281.817 li
51.0042 288.58 li
49.8915 288.219 li
52.0889 281.456 li
52.9446 278.822 mo
54.0573 279.184 li
53.5993 280.593 li
52.4866 280.232 li
52.9446 278.822 li
f
59.7767 284.172 mo
59.4352 285.223 li
59.162 284.97 58.8807 284.742 58.575 284.547 cv
58.2529 284.361 57.9228 284.199 57.5642 284.082 cv
57.0079 283.901 56.5594 283.851 56.2311 283.936 cv
55.9029 284.021 55.6866 284.224 55.5781 284.558 cv
55.4937 284.817 55.5284 285.047 55.678 285.26 cv
55.8276 285.473 56.175 285.75 56.7283 286.066 cv
57.0835 286.277 li
57.8185 286.707 58.2945 287.135 58.5319 287.541 cv
58.753 287.954 58.7855 288.443 58.6087 288.987 cv
58.4038 289.618 57.9959 290.032 57.3848 290.23 cv
56.7697 290.44 56.0211 290.388 55.1557 290.107 cv
54.7848 289.986 54.4259 289.829 54.0503 289.638 cv
53.6748 289.448 53.2989 289.216 52.9144 288.928 cv
53.288 287.778 li
53.6237 288.133 53.9795 288.426 54.343 288.654 cv
54.7025 288.893 55.082 289.071 55.4777 289.2 cv
55.9969 289.369 56.4331 289.415 56.7737 289.334 cv
57.1019 289.249 57.3346 289.038 57.4431 288.704 cv
57.5395 288.407 57.5046 288.136 57.359 287.911 cv
57.2134 287.686 56.8205 287.381 56.1764 287.008 cv
55.8212 286.796 li
55.177 286.423 54.7424 286.036 54.5421 285.643 cv
54.3294 285.246 54.3136 284.789 54.4864 284.258 cv
54.6913 283.627 55.0745 283.205 55.6321 283.003 cv
56.1897 282.802 56.8888 282.838 57.7295 283.111 cv
58.1375 283.243 58.5088 283.405 58.8596 283.587 cv
59.1981 283.766 59.5038 283.961 59.7767 284.172 cv
f
63.6905 283.107 mo
63.0678 285.023 li
65.3551 285.766 li
65.0739 286.632 li
62.7866 285.888 li
61.5935 289.56 li
61.4128 290.117 61.3704 290.5 61.4706 290.696 cv
61.5667 290.905 61.8517 291.08 62.3215 291.232 cv
63.459 291.602 li
63.1577 292.529 li
62.0203 292.16 li
61.1548 291.878 60.6136 291.525 60.3965 291.099 cv
60.1795 290.673 60.2076 290.04 60.4808 289.199 cv
61.6739 285.527 li
60.8579 285.262 li
61.1391 284.396 li
61.9551 284.661 li
62.5778 282.745 li
63.6905 283.107 li
f
66.814 286.24 mo
67.9268 286.602 li
65.7294 293.365 li
64.6166 293.003 li
66.814 286.24 li
67.6697 283.607 mo
68.7825 283.968 li
68.3245 285.378 li
67.2118 285.016 li
67.6697 283.607 li
f
75.0381 289.199 mo
74.7007 290.238 li
74.4354 289.96 74.1665 289.736 73.8732 289.545 cv
73.5798 289.354 73.2868 289.204 72.9654 289.1 cv
72.2483 288.867 71.6032 288.917 71.0589 289.246 cv
70.5147 289.575 70.1079 290.154 69.8428 290.97 cv
69.5737 291.798 69.5626 292.505 69.8096 293.091 cv
70.0566 293.677 70.553 294.085 71.2701 294.318 cv
71.5916 294.422 71.9127 294.485 72.2623 294.503 cv
72.6119 294.521 72.9651 294.486 73.3428 294.417 cv
73.0094 295.443 li
72.6397 295.487 72.2821 295.494 71.9406 295.451 cv
71.5867 295.405 71.2161 295.325 70.8452 295.205 cv
69.8313 294.875 69.1158 294.301 68.7312 293.465 cv
68.3303 292.638 68.3147 291.676 68.6683 290.588 cv
69.0258 289.488 69.6037 288.719 70.4144 288.285 cv
71.2251 287.851 72.1579 287.799 73.2212 288.144 cv
73.5674 288.257 73.8892 288.402 74.1865 288.581 cv
74.4839 288.76 74.7732 288.963 75.0381 289.199 cv
f
79.0371 293.93 mo
78.1346 293.636 77.4802 293.547 77.0698 293.632 cv
76.6553 293.73 76.3697 294.02 76.209 294.514 cv
76.0805 294.91 76.0997 295.272 76.287 295.579 cv
76.4703 295.898 76.7927 296.126 77.2378 296.27 cv
77.856 296.471 78.4188 296.422 78.9344 296.097 cv
79.4459 295.785 79.8201 295.264 80.0572 294.534 cv
80.1375 294.287 li
79.0371 293.93 li
81.3989 294.191 mo
80.1455 298.049 li
79.0328 297.687 li
79.3662 296.661 li
78.97 296.997 78.5521 297.189 78.1209 297.254 cv
77.6898 297.319 77.1878 297.265 76.6438 297.089 cv
75.9514 296.864 75.4553 296.498 75.1719 295.982 cv
74.8884 295.466 74.8593 294.882 75.0722 294.227 cv
75.3172 293.473 75.7493 292.984 76.3971 292.758 cv
77.0286 292.539 77.8471 292.586 78.8609 292.916 cv
80.4187 293.422 li
80.4549 293.31 li
80.6196 292.804 80.575 292.352 80.3336 291.959 cv
80.0882 291.578 79.6665 291.277 79.0607 291.081 cv
78.6651 290.952 78.2781 290.881 77.8751 290.859 cv
77.472 290.838 77.0816 290.861 76.6916 290.926 cv
77.025 289.9 li
77.4688 289.88 77.9047 289.885 78.312 289.935 cv
78.7194 289.985 79.1064 290.057 79.4773 290.177 cv
80.454 290.494 81.0991 290.991 81.4166 291.655 cv
81.7341 292.318 81.7323 293.165 81.3989 294.191 cv
f
85.486 289.396 mo
86.5987 289.757 li
83.5456 299.154 li
82.4329 298.792 li
85.486 289.396 li
f
89.2869 295.661 mo
88.8116 295.862 88.4435 296.111 88.1659 296.376 cv
87.8884 296.642 87.6894 296.96 87.5769 297.306 cv
87.3841 297.899 87.4376 298.45 87.7418 298.986 cv
88.0336 299.518 88.5173 299.88 89.1602 300.089 cv
89.5312 300.21 89.9098 300.265 90.2838 300.249 cv
90.6578 300.234 91.0435 300.141 91.4246 299.978 cv
89.2869 295.661 li
90.361 295.258 mo
92.4068 299.395 li
92.7542 299.125 93.0642 298.802 93.3328 298.438 cv
93.589 298.07 93.8161 297.665 93.9935 297.204 cv
95.1186 297.569 li
94.8964 298.085 94.5917 298.56 94.2128 299.011 cv
93.8339 299.462 93.3808 299.889 92.8452 300.275 cv
93.9682 302.54 li
92.4475 302.046 li
91.8713 300.875 li
91.3304 301.109 90.8009 301.224 90.2872 301.248 cv
89.7776 301.26 89.2549 301.186 88.7356 301.018 cv
87.7589 300.7 87.056 300.171 86.6146 299.426 cv
86.1731 298.681 86.1094 297.868 86.3906 297.002 cv
86.5593 296.483 86.8396 296.041 87.2563 295.684 cv
87.6729 295.328 88.2215 295.028 88.8981 294.796 cv
88.7806 294.485 88.7166 294.177 88.698 293.897 cv
88.6794 293.618 88.7103 293.355 88.7907 293.107 cv
88.9996 292.465 89.3949 292.005 89.9685 291.754 cv
90.5422 291.503 91.1999 291.498 91.9417 291.739 cv
92.2755 291.848 92.5973 291.993 92.907 292.176 cv
93.2044 292.355 93.5184 292.566 93.8164 292.827 cv
93.4589 293.927 li
93.1606 293.625 92.875 293.368 92.5856 293.165 cv
92.2963 292.962 92.028 292.82 91.756 292.731 cv
91.3357 292.595 90.9533 292.594 90.6214 292.732 cv
90.2771 292.866 90.057 293.123 89.9445 293.469 cv
89.8762 293.679 89.8574 293.905 89.9168 294.143 cv
89.9721 294.393 90.1106 294.767 90.361 295.258 cv
f
98.4917 294.045 mo
99.7157 294.443 li
96.7872 303.456 li
95.5631 303.058 li
98.4917 294.045 li
f
106.112 301.975 mo
104.786 306.055 li
103.674 305.694 li
104.987 301.651 li
105.196 301.008 105.213 300.494 105.07 300.092 cv
104.927 299.69 104.609 299.409 104.114 299.248 cv
103.508 299.051 102.974 299.097 102.503 299.367 cv
102.033 299.638 101.691 300.101 101.478 300.756 cv
100.237 304.577 li
99.1239 304.215 li
101.321 297.452 li
102.434 297.814 li
102.093 298.865 li
102.481 298.553 102.89 298.345 103.325 298.268 cv
103.748 298.186 104.205 298.212 104.675 298.364 cv
105.441 298.613 105.954 299.053 106.193 299.664 cv
106.432 300.275 106.413 301.048 106.112 301.975 cv
f
113.477 298.491 mo
113.176 299.418 li
112.113 299.072 li
111.717 298.944 111.405 298.938 111.204 299.05 cv
110.991 299.159 110.825 299.419 110.688 299.84 cv
110.495 300.433 li
112.325 301.028 li
112.044 301.893 li
110.214 301.299 li
108.298 307.196 li
107.185 306.834 li
109.101 300.937 li
108.038 300.591 li
108.319 299.726 li
109.382 300.072 li
109.535 299.602 li
109.776 298.86 110.13 298.36 110.589 298.126 cv
111.047 297.892 111.66 297.9 112.427 298.149 cv
113.477 298.491 li
f
115.917 303.056 mo
115.324 302.863 114.778 302.945 114.279 303.303 cv
113.78 303.66 113.402 304.234 113.141 305.038 cv
112.876 305.854 112.832 306.537 113.025 307.119 cv
113.219 307.701 113.616 308.077 114.222 308.273 cv
114.815 308.466 115.357 308.396 115.856 308.039 cv
116.355 307.682 116.733 307.107 116.998 306.291 cv
117.255 305.5 117.291 304.801 117.098 304.219 cv
116.904 303.636 116.511 303.249 115.917 303.056 cv
116.222 302.116 mo
117.187 302.43 117.837 302.996 118.192 303.795 cv
118.531 304.602 118.534 305.56 118.173 306.673 cv
117.811 307.786 117.246 308.559 116.501 309 cv
115.74 309.45 114.885 309.514 113.921 309.201 cv
112.944 308.883 112.278 308.325 111.939 307.518 cv
111.595 306.723 111.605 305.769 111.966 304.656 cv
112.328 303.544 112.881 302.767 113.63 302.313 cv
114.375 301.871 115.246 301.799 116.222 302.116 cv
f
122.839 302.325 mo
122.216 304.241 li
124.503 304.985 li
124.222 305.85 li
121.935 305.107 li
120.742 308.779 li
120.561 309.335 120.519 309.718 120.619 309.914 cv
120.715 310.123 121 310.298 121.47 310.451 cv
122.607 310.82 li
122.306 311.748 li
121.169 311.378 li
120.303 311.097 119.762 310.743 119.545 310.317 cv
119.328 309.891 119.356 309.258 119.629 308.417 cv
120.822 304.745 li
120.006 304.48 li
120.287 303.615 li
121.103 303.88 li
121.726 301.964 li
122.839 302.325 li
f
130.716 309.969 mo
129.39 314.049 li
128.278 313.688 li
129.591 309.645 li
129.8 309.002 129.817 308.488 129.674 308.086 cv
129.531 307.684 129.212 307.403 128.718 307.242 cv
128.112 307.046 127.578 307.091 127.107 307.362 cv
126.637 307.632 126.295 308.095 126.082 308.751 cv
124.841 312.571 li
123.728 312.21 li
126.781 302.813 li
127.894 303.175 li
126.696 306.859 li
127.085 306.548 127.494 306.339 127.929 306.262 cv
128.352 306.181 128.809 306.206 129.279 306.358 cv
130.045 306.608 130.558 307.048 130.797 307.658 cv
131.036 308.269 131.017 309.042 130.716 309.969 cv
f
138.579 312.989 mo
138.402 313.533 li
133.296 311.874 li
133.096 312.656 133.126 313.322 133.418 313.854 cv
133.697 314.383 134.202 314.765 134.944 315.006 cv
135.364 315.143 135.8 315.23 136.228 315.26 cv
136.656 315.289 137.116 315.261 137.584 315.167 cv
137.243 316.218 li
136.791 316.263 136.339 316.266 135.894 316.204 cv
135.45 316.141 135.001 316.05 134.58 315.913 cv
133.492 315.56 132.74 314.974 132.31 314.151 cv
131.88 313.328 131.848 312.374 132.198 311.298 cv
132.555 310.198 133.137 309.417 133.944 308.954 cv
134.746 308.504 135.671 308.435 136.684 308.765 cv
137.599 309.062 138.22 309.592 138.563 310.346 cv
138.889 311.108 138.904 311.987 138.579 312.989 cv
137.571 312.306 mo
137.755 311.696 137.739 311.158 137.538 310.682 cv
137.32 310.215 136.936 309.885 136.392 309.708 cv
135.773 309.508 135.219 309.532 134.735 309.758 cv
134.252 309.984 133.868 310.406 133.614 311.02 cv
137.571 312.306 li
f
143.773 312.107 mo
143.179 311.914 142.633 311.996 142.134 312.354 cv
141.635 312.711 141.257 313.285 140.996 314.089 cv
140.731 314.905 140.687 315.588 140.881 316.17 cv
141.074 316.752 141.472 317.127 142.077 317.324 cv
142.671 317.517 143.213 317.447 143.712 317.09 cv
144.211 316.732 144.589 316.158 144.854 315.342 cv
145.111 314.551 145.147 313.852 144.953 313.269 cv
144.76 312.687 144.366 312.3 143.773 312.107 cv
144.078 311.167 mo
145.042 311.48 145.692 312.047 146.048 312.846 cv
146.387 313.653 146.39 314.611 146.028 315.724 cv
145.667 316.837 145.101 317.61 144.356 318.051 cv
143.595 318.501 142.741 318.565 141.776 318.251 cv
140.799 317.934 140.133 317.376 139.794 316.569 cv
139.451 315.774 139.46 314.82 139.822 313.707 cv
140.183 312.594 140.737 311.817 141.485 311.364 cv
142.23 310.922 143.101 310.85 144.078 311.167 cv
f
152.553 315.247 mo
152.454 315.132 152.334 315.039 152.197 314.953 cv
152.057 314.88 151.904 314.804 151.731 314.747 cv
151.101 314.542 150.55 314.596 150.084 314.895 cv
149.605 315.191 149.256 315.72 149.006 316.486 cv
147.85 320.047 li
146.737 319.686 li
148.934 312.923 li
150.047 313.284 li
149.705 314.335 li
150.061 313.999 150.47 313.791 150.905 313.713 cv
151.34 313.636 151.83 313.686 152.374 313.863 cv
152.448 313.887 152.531 313.927 152.63 313.959 cv
152.712 314 152.807 314.044 152.923 314.109 cv
152.553 315.247 li
f
154.473 322.883 mo
153.895 323.57 153.413 324.001 153.036 324.152 cv
152.659 324.303 152.223 324.298 151.728 324.137 cv
150.838 323.848 li
151.14 322.921 li
151.795 323.133 li
152.092 323.23 152.351 323.232 152.572 323.14 cv
152.793 323.048 153.087 322.774 153.474 322.298 cv
153.833 321.868 li
153.261 314.329 li
154.436 314.71 li
154.831 320.689 li
158.664 316.084 li
159.839 316.466 li
154.473 322.883 li
f
139.622 263.286 mo
139.622 266.786 li
f
139.622 263.286 mo
139.622 266.786 li
@
93.2363 271.059 mo
95.0538 271.649 li
95.3609 278.529 li
99.6655 273.148 li
101.483 273.738 li
98.5544 282.751 li
97.3675 282.366 li
99.9385 274.453 li
95.6055 279.879 li
94.3815 279.482 li
94.0657 272.545 li
91.4947 280.457 li
90.3078 280.072 li
93.2363 271.059 li
f
105.494 278.39 mo
104.9 278.197 104.354 278.28 103.855 278.637 cv
103.356 278.994 102.978 279.569 102.717 280.372 cv
102.452 281.188 102.408 281.871 102.602 282.453 cv
102.795 283.036 103.193 283.411 103.798 283.608 cv
104.392 283.801 104.934 283.731 105.433 283.373 cv
105.932 283.016 106.31 282.442 106.575 281.626 cv
106.832 280.834 106.868 280.135 106.674 279.553 cv
106.481 278.971 106.087 278.583 105.494 278.39 cv
105.799 277.451 mo
106.763 277.764 107.413 278.33 107.769 279.129 cv
108.108 279.937 108.111 280.895 107.749 282.007 cv
107.388 283.12 106.822 283.893 106.077 284.334 cv
105.316 284.784 104.462 284.848 103.497 284.535 cv
102.52 284.218 101.854 283.659 101.515 282.852 cv
101.172 282.057 101.181 281.103 101.543 279.991 cv
101.904 278.878 102.458 278.101 103.206 277.647 cv
103.951 277.206 104.822 277.133 105.799 277.451 cv
f
114.81 281.691 mo
115.999 278.031 li
117.112 278.392 li
114.059 287.789 li
112.946 287.427 li
113.275 286.414 li
112.908 286.745 112.515 286.945 112.096 287.014 cv
111.677 287.083 111.225 287.046 110.73 286.885 cv
109.914 286.62 109.351 286.082 109.04 285.27 cv
108.73 284.458 108.764 283.512 109.109 282.449 cv
109.455 281.386 109.979 280.613 110.712 280.127 cv
111.44 279.652 112.216 279.535 113.032 279.801 cv
113.526 279.961 113.915 280.197 114.209 280.511 cv
114.503 280.825 114.703 281.219 114.81 281.691 cv
110.259 282.823 mo
109.994 283.639 109.946 284.334 110.127 284.912 cv
110.308 285.49 110.706 285.866 111.299 286.059 cv
111.88 286.247 112.41 286.173 112.909 285.816 cv
113.395 285.455 113.777 284.868 114.043 284.052 cv
114.308 283.236 114.339 282.549 114.158 281.971 cv
113.965 281.389 113.584 281.005 113.003 280.816 cv
112.409 280.623 111.863 280.706 111.376 281.067 cv
110.89 281.428 110.524 282.007 110.259 282.823 cv
f
123.321 286.752 mo
123.144 287.296 li
118.038 285.637 li
117.839 286.42 117.868 287.086 118.16 287.618 cv
118.44 288.146 118.944 288.529 119.686 288.77 cv
120.106 288.906 120.543 288.993 120.97 289.023 cv
121.398 289.053 121.858 289.025 122.326 288.931 cv
121.985 289.982 li
121.533 290.026 121.081 290.03 120.636 289.967 cv
120.192 289.905 119.743 289.814 119.323 289.677 cv
118.235 289.323 117.482 288.737 117.052 287.914 cv
116.623 287.091 116.591 286.138 116.94 285.062 cv
117.298 283.962 117.88 283.18 118.686 282.718 cv
119.488 282.268 120.413 282.199 121.427 282.528 cv
122.342 282.826 122.962 283.355 123.305 284.109 cv
123.632 284.871 123.647 285.751 123.321 286.752 cv
122.313 286.069 mo
122.497 285.46 122.481 284.921 122.28 284.446 cv
122.063 283.979 121.678 283.649 121.134 283.472 cv
120.516 283.271 119.961 283.296 119.477 283.522 cv
118.994 283.747 118.611 284.169 118.356 284.784 cv
122.313 286.069 li
f
127.003 281.606 mo
128.115 281.968 li
125.062 291.364 li
123.95 291.003 li
127.003 281.606 li
f
139.603 286.452 mo
139.217 287.639 li
138.82 287.264 138.439 286.962 138.067 286.719 cv
137.679 286.483 137.304 286.293 136.933 286.172 cv
136.265 285.955 135.701 285.923 135.263 286.053 cv
134.82 286.196 134.526 286.511 134.373 286.981 cv
134.245 287.377 134.256 287.722 134.439 288 cv
134.605 288.287 135.011 288.596 135.638 288.936 cv
136.332 289.326 li
137.178 289.792 137.745 290.318 138.037 290.892 cv
138.325 291.477 138.359 292.131 138.122 292.86 cv
137.837 293.738 137.327 294.297 136.602 294.553 cv
135.863 294.805 134.938 294.751 133.813 294.385 cv
133.38 294.245 132.939 294.046 132.485 293.803 cv
132.031 293.56 131.58 293.263 131.138 292.901 cv
131.547 291.64 li
131.95 292.085 132.364 292.452 132.789 292.74 cv
133.211 293.041 133.661 293.256 134.13 293.408 cv
134.823 293.633 135.399 293.67 135.87 293.523 cv
136.329 293.371 136.652 293.052 136.821 292.533 cv
136.965 292.088 136.942 291.697 136.75 291.362 cv
136.558 291.026 136.174 290.696 135.595 290.372 cv
134.902 289.982 li
134.043 289.512 133.48 289.014 133.201 288.486 cv
132.917 287.97 132.892 287.375 133.117 286.682 cv
133.374 285.891 133.851 285.349 134.569 285.076 cv
135.274 284.799 136.129 284.818 137.118 285.139 cv
137.538 285.275 137.947 285.449 138.368 285.668 cv
138.776 285.883 139.181 286.151 139.603 286.452 cv
f
143.09 287.626 mo
142.467 289.542 li
144.754 290.286 li
144.473 291.151 li
142.186 290.408 li
140.993 294.08 li
140.812 294.636 140.77 295.019 140.87 295.215 cv
140.966 295.424 141.251 295.599 141.721 295.752 cv
142.858 296.121 li
142.557 297.049 li
141.419 296.679 li
140.554 296.398 140.013 296.044 139.796 295.618 cv
139.579 295.192 139.607 294.559 139.88 293.718 cv
141.073 290.046 li
140.257 289.781 li
140.538 288.916 li
141.354 289.181 li
141.977 287.264 li
143.09 287.626 li
f
149.795 293.072 mo
149.695 292.957 149.576 292.864 149.439 292.778 cv
149.299 292.705 149.146 292.628 148.973 292.572 cv
148.343 292.367 147.792 292.421 147.326 292.72 cv
146.847 293.016 146.497 293.545 146.248 294.311 cv
145.091 297.872 li
143.979 297.51 li
146.176 290.748 li
147.289 291.109 li
146.947 292.16 li
147.302 291.824 147.712 291.616 148.147 291.538 cv
148.582 291.461 149.072 291.511 149.616 291.688 cv
149.69 291.712 149.773 291.752 149.872 291.784 cv
149.954 291.825 150.049 291.869 150.165 291.934 cv
149.795 293.072 li
f
149.854 296.467 mo
151.183 292.374 li
152.296 292.736 li
150.978 296.791 li
150.77 297.434 150.74 297.944 150.883 298.346 cv
151.026 298.748 151.345 299.029 151.852 299.194 cv
152.445 299.387 152.988 299.358 153.458 299.087 cv
153.929 298.816 154.271 298.353 154.488 297.686 cv
155.733 293.853 li
156.846 294.214 li
154.648 300.977 li
153.536 300.616 li
153.873 299.577 li
153.465 299.909 153.047 300.102 152.636 300.187 cv
152.217 300.256 151.777 300.222 151.308 300.069 cv
150.529 299.816 150.011 299.389 149.772 298.778 cv
149.517 298.176 149.548 297.407 149.854 296.467 cv
154.03 293.122 mo
154.03 293.122 li
f
163.92 296.8 mo
163.583 297.839 li
163.318 297.561 163.049 297.337 162.755 297.146 cv
162.462 296.955 162.169 296.805 161.847 296.701 cv
161.13 296.468 160.485 296.518 159.941 296.847 cv
159.397 297.176 158.99 297.754 158.725 298.57 cv
158.456 299.399 158.445 300.106 158.692 300.692 cv
158.939 301.278 159.435 301.685 160.152 301.918 cv
160.474 302.023 160.795 302.086 161.144 302.104 cv
161.494 302.122 161.847 302.086 162.225 302.017 cv
161.891 303.044 li
161.522 303.088 161.164 303.094 160.823 303.052 cv
160.469 303.005 160.098 302.926 159.727 302.805 cv
158.713 302.476 157.998 301.902 157.613 301.066 cv
157.212 300.238 157.197 299.277 157.55 298.189 cv
157.908 297.088 158.486 296.319 159.296 295.885 cv
160.107 295.452 161.04 295.399 162.103 295.745 cv
162.449 295.857 162.771 296.003 163.069 296.182 cv
163.366 296.36 163.655 296.564 163.92 296.8 cv
f
167.656 295.608 mo
167.034 297.525 li
169.321 298.268 li
169.04 299.133 li
166.752 298.39 li
165.559 302.062 li
165.379 302.618 165.336 303.001 165.436 303.198 cv
165.533 303.407 165.818 303.581 166.287 303.734 cv
167.425 304.103 li
167.124 305.031 li
165.986 304.661 li
165.121 304.38 164.579 304.026 164.362 303.6 cv
164.145 303.175 164.173 302.541 164.447 301.701 cv
165.64 298.029 li
164.824 297.763 li
165.105 296.898 li
165.921 297.163 li
166.544 295.247 li
167.656 295.608 li
f
169.339 302.798 mo
170.669 298.706 li
171.781 299.067 li
170.464 303.122 li
170.255 303.765 170.226 304.275 170.369 304.677 cv
170.511 305.079 170.83 305.36 171.337 305.525 cv
171.931 305.718 172.473 305.689 172.944 305.418 cv
173.414 305.147 173.756 304.684 173.973 304.017 cv
175.218 300.184 li
176.331 300.546 li
174.134 307.309 li
173.021 306.947 li
173.359 305.908 li
172.95 306.24 172.532 306.433 172.122 306.518 cv
171.703 306.587 171.263 306.553 170.793 306.401 cv
170.014 306.148 169.497 305.72 169.258 305.109 cv
169.002 304.507 169.034 303.738 169.339 302.798 cv
173.515 299.453 mo
173.515 299.453 li
f
182.2 303.601 mo
182.101 303.486 181.981 303.393 181.845 303.307 cv
181.704 303.234 181.552 303.158 181.378 303.101 cv
180.748 302.896 180.197 302.95 179.731 303.249 cv
179.252 303.545 178.903 304.074 178.654 304.84 cv
177.497 308.401 li
176.384 308.04 li
178.581 301.277 li
179.694 301.638 li
179.353 302.689 li
179.708 302.353 180.117 302.145 180.553 302.067 cv
180.988 301.99 181.477 302.04 182.021 302.217 cv
182.096 302.241 182.178 302.281 182.277 302.313 cv
182.359 302.354 182.454 302.398 182.57 302.463 cv
182.2 303.601 li
f
188.478 307.923 mo
188.301 308.467 li
183.195 306.808 li
182.995 307.591 183.025 308.256 183.317 308.789 cv
183.596 309.317 184.101 309.699 184.843 309.941 cv
185.263 310.077 185.699 310.164 186.127 310.194 cv
186.555 310.224 187.015 310.195 187.483 310.101 cv
187.142 311.152 li
186.69 311.197 186.238 311.2 185.793 311.138 cv
185.349 311.075 184.9 310.984 184.479 310.848 cv
183.391 310.494 182.639 309.908 182.209 309.085 cv
181.779 308.262 181.747 307.308 182.097 306.233 cv
182.455 305.132 183.036 304.351 183.843 303.888 cv
184.645 303.438 185.57 303.37 186.583 303.699 cv
187.498 303.996 188.119 304.526 188.462 305.28 cv
188.788 306.042 188.803 306.922 188.478 307.923 cv
187.47 307.24 mo
187.654 306.63 187.638 306.092 187.437 305.617 cv
187.219 305.15 186.835 304.819 186.291 304.643 cv
185.672 304.442 185.118 304.467 184.634 304.692 cv
184.151 304.918 183.768 305.34 183.513 305.955 cv
187.47 307.24 li
f
187.346 263.286 mo
187.346 266.786 li
f
187.346 263.286 mo
187.346 266.786 li
@
148.272 271.059 mo
149.496 271.456 li
146.901 279.443 li
151.29 280.869 li
150.957 281.896 li
145.343 280.072 li
148.272 271.059 li
f
156.364 279.894 mo
155.461 279.6 154.807 279.511 154.397 279.596 cv
153.982 279.694 153.697 279.984 153.536 280.478 cv
153.407 280.874 153.427 281.236 153.614 281.542 cv
153.797 281.862 154.12 282.09 154.565 282.234 cv
155.183 282.435 155.746 282.385 156.261 282.061 cv
156.773 281.749 157.147 281.228 157.384 280.498 cv
157.464 280.251 li
156.364 279.894 li
158.726 280.155 mo
157.472 284.013 li
156.36 283.651 li
156.693 282.625 li
156.297 282.961 155.879 283.153 155.448 283.218 cv
155.017 283.283 154.515 283.229 153.971 283.053 cv
153.278 282.828 152.782 282.461 152.499 281.946 cv
152.215 281.43 152.186 280.846 152.399 280.191 cv
152.644 279.437 153.076 278.948 153.724 278.721 cv
154.355 278.503 155.174 278.55 156.188 278.879 cv
157.746 279.386 li
157.782 279.274 li
157.946 278.767 157.902 278.316 157.661 277.923 cv
157.415 277.542 156.993 277.241 156.388 277.044 cv
155.992 276.916 155.605 276.845 155.202 276.823 cv
154.799 276.802 154.409 276.825 154.018 276.89 cv
154.352 275.864 li
154.796 275.844 155.232 275.849 155.639 275.899 cv
156.046 275.949 156.433 276.02 156.804 276.141 cv
157.781 276.458 158.426 276.955 158.744 277.619 cv
159.061 278.282 159.059 279.129 158.726 280.155 cv
f
166.711 282.504 mo
165.385 286.584 li
164.273 286.222 li
165.586 282.179 li
165.795 281.536 165.812 281.022 165.669 280.621 cv
165.526 280.219 165.207 279.938 164.713 279.777 cv
164.107 279.58 163.573 279.625 163.102 279.896 cv
162.631 280.167 162.29 280.63 162.077 281.285 cv
160.835 285.105 li
159.723 284.744 li
161.92 277.981 li
163.033 278.342 li
162.691 279.393 li
163.08 279.082 163.489 278.873 163.924 278.796 cv
164.347 278.715 164.804 278.74 165.273 278.893 cv
166.04 279.142 166.553 279.582 166.792 280.193 cv
167.031 280.803 167.012 281.576 166.711 282.504 cv
f
173.913 283.012 mo
175.102 279.353 li
176.215 279.714 li
173.162 289.111 li
172.049 288.749 li
172.379 287.735 li
172.011 288.067 171.618 288.267 171.199 288.336 cv
170.781 288.405 170.328 288.367 169.833 288.207 cv
169.017 287.942 168.454 287.403 168.144 286.592 cv
167.834 285.78 167.867 284.834 168.213 283.771 cv
168.558 282.708 169.083 281.935 169.815 281.448 cv
170.543 280.974 171.319 280.857 172.135 281.122 cv
172.63 281.283 173.018 281.518 173.312 281.833 cv
173.607 282.147 173.807 282.54 173.913 283.012 cv
169.363 284.144 mo
169.098 284.96 169.049 285.656 169.231 286.234 cv
169.412 286.812 169.809 287.187 170.403 287.38 cv
170.984 287.569 171.514 287.495 172.012 287.138 cv
172.499 286.776 172.881 286.19 173.146 285.374 cv
173.411 284.558 173.443 283.871 173.262 283.293 cv
173.068 282.71 172.687 282.327 172.106 282.138 cv
171.513 281.945 170.966 282.027 170.48 282.389 cv
169.994 282.75 169.628 283.328 169.363 284.144 cv
f
176.154 285.791 mo
179.406 286.847 li
179.085 287.836 li
175.833 286.78 li
176.154 285.791 li
f
182.891 282.307 mo
184.708 282.897 li
185.015 289.777 li
189.32 284.396 li
191.137 284.986 li
188.209 293.999 li
187.022 293.614 li
189.593 285.701 li
185.26 291.128 li
184.036 290.73 li
183.72 283.793 li
181.149 291.706 li
179.962 291.32 li
182.891 282.307 li
f
194.766 292.371 mo
193.863 292.078 193.209 291.988 192.798 292.074 cv
192.384 292.171 192.098 292.461 191.938 292.956 cv
191.809 293.351 191.828 293.713 192.016 294.02 cv
192.199 294.339 192.521 294.567 192.967 294.712 cv
193.585 294.912 194.148 294.863 194.663 294.538 cv
195.175 294.226 195.549 293.705 195.786 292.976 cv
195.866 292.729 li
194.766 292.371 li
197.128 292.633 mo
195.874 296.49 li
194.761 296.129 li
195.095 295.102 li
194.699 295.438 194.281 295.631 193.85 295.696 cv
193.418 295.761 192.917 295.707 192.372 295.53 cv
191.68 295.305 191.184 294.939 190.901 294.423 cv
190.617 293.907 190.588 293.324 190.801 292.668 cv
191.046 291.914 191.478 291.426 192.126 291.199 cv
192.757 290.98 193.576 291.028 194.59 291.357 cv
196.147 291.863 li
196.184 291.752 li
196.348 291.245 196.304 290.793 196.062 290.4 cv
195.817 290.02 195.395 289.719 194.789 289.522 cv
194.394 289.393 194.007 289.322 193.604 289.301 cv
193.201 289.279 192.81 289.303 192.42 289.367 cv
192.754 288.341 li
193.198 288.321 193.633 288.326 194.041 288.376 cv
194.448 288.427 194.835 288.498 195.206 288.618 cv
196.183 288.936 196.828 289.432 197.145 290.096 cv
197.463 290.76 197.461 291.607 197.128 292.633 cv
f
203.941 292.782 mo
203.841 292.668 203.721 292.574 203.585 292.489 cv
203.445 292.416 203.292 292.339 203.119 292.283 cv
202.488 292.078 201.938 292.132 201.472 292.431 cv
200.993 292.727 200.643 293.256 200.394 294.022 cv
199.237 297.583 li
198.124 297.221 li
200.322 290.458 li
201.435 290.82 li
201.093 291.871 li
201.448 291.535 201.858 291.326 202.293 291.249 cv
202.728 291.172 203.218 291.222 203.762 291.398 cv
203.836 291.422 203.919 291.463 204.017 291.495 cv
204.1 291.536 204.195 291.58 204.31 291.645 cv
203.941 292.782 li
f
206.259 289.476 mo
207.372 289.838 li
205.568 295.389 li
209.83 293.548 li
211.251 294.01 li
206.637 296.01 li
209.202 300.821 li
207.756 300.351 li
205.391 295.933 li
204.319 299.234 li
203.206 298.872 li
206.259 289.476 li
f
212.599 294.447 mo
213.712 294.809 li
211.514 301.572 li
210.402 301.21 li
212.599 294.447 li
213.455 291.814 mo
214.567 292.176 li
214.109 293.585 li
212.997 293.223 li
213.455 291.814 li
f
220.79 300.075 mo
219.464 304.155 li
218.351 303.793 li
219.665 299.751 li
219.874 299.108 219.891 298.594 219.748 298.192 cv
219.605 297.79 219.286 297.509 218.792 297.348 cv
218.186 297.151 217.652 297.196 217.181 297.467 cv
216.71 297.738 216.369 298.201 216.156 298.856 cv
214.914 302.677 li
213.802 302.315 li
215.999 295.552 li
217.112 295.914 li
216.77 296.965 li
217.158 296.653 217.568 296.445 218.003 296.367 cv
218.426 296.286 218.883 296.311 219.352 296.464 cv
220.119 296.713 220.632 297.153 220.871 297.764 cv
221.11 298.375 221.091 299.148 220.79 300.075 cv
f
227.253 302.858 mo
227.51 302.067 227.542 301.38 227.365 300.831 cv
227.176 300.277 226.778 299.902 226.185 299.709 cv
225.591 299.516 225.049 299.586 224.571 299.923 cv
224.092 300.26 223.727 300.838 223.47 301.629 cv
223.209 302.433 223.169 303.103 223.358 303.657 cv
223.547 304.21 223.944 304.586 224.538 304.778 cv
225.131 304.971 225.673 304.901 226.152 304.565 cv
226.618 304.224 226.992 303.662 227.253 302.858 cv
227.514 305.841 mo
227.145 306.979 226.608 307.747 225.916 308.151 cv
225.216 308.539 224.345 308.57 223.294 308.229 cv
222.898 308.1 222.552 307.947 222.222 307.785 cv
221.895 307.61 221.577 307.411 221.296 307.183 cv
221.646 306.108 li
221.911 306.385 222.192 306.613 222.485 306.804 cv
222.779 306.995 223.084 307.149 223.418 307.258 cv
224.135 307.491 224.743 307.47 225.235 307.219 cv
225.718 306.952 226.088 306.444 226.337 305.677 cv
226.514 305.133 li
226.15 305.453 225.757 305.653 225.334 305.734 cv
224.912 305.816 224.459 305.778 223.965 305.617 cv
223.124 305.344 222.557 304.818 222.255 304.023 cv
221.953 303.228 221.978 302.307 222.32 301.256 cv
222.657 300.217 223.178 299.457 223.89 298.991 cv
224.601 298.525 225.374 298.42 226.214 298.694 cv
226.709 298.854 227.097 299.09 227.391 299.404 cv
227.686 299.718 227.886 300.112 227.992 300.584 cv
228.326 299.557 li
229.438 299.919 li
227.514 305.841 li
f
235.071 263.286 mo
235.071 266.786 li
f
235.071 263.286 mo
235.071 266.786 li
@
186.255 272.458 mo
185.154 275.845 li
186.688 276.344 li
187.256 276.528 187.733 276.533 188.139 276.337 cv
188.544 276.14 188.842 275.772 189.018 275.228 cv
189.195 274.684 189.167 274.224 188.954 273.827 cv
188.742 273.43 188.357 273.141 187.788 272.956 cv
186.255 272.458 li
185.357 271.059 mo
188.114 271.954 li
189.115 272.28 189.805 272.764 190.176 273.39 cv
190.547 274.016 190.589 274.768 190.304 275.646 cv
190.015 276.536 189.534 277.132 188.87 277.408 cv
188.202 277.697 187.364 277.67 186.362 277.345 cv
184.829 276.847 li
183.652 280.469 li
182.428 280.072 li
185.357 271.059 li
f
195.613 278.027 mo
195.514 277.913 195.394 277.819 195.257 277.734 cv
195.117 277.661 194.964 277.584 194.791 277.528 cv
194.161 277.323 193.61 277.376 193.144 277.676 cv
192.665 277.971 192.316 278.5 192.066 279.267 cv
190.91 282.828 li
189.797 282.466 li
191.994 275.703 li
193.107 276.065 li
192.765 277.116 li
193.121 276.78 193.53 276.571 193.965 276.494 cv
194.4 276.417 194.89 276.466 195.434 276.643 cv
195.508 276.667 195.591 276.708 195.69 276.74 cv
195.772 276.78 195.867 276.825 195.983 276.89 cv
195.613 278.027 li
f
199.481 278.997 mo
198.887 278.804 198.341 278.886 197.842 279.244 cv
197.343 279.601 196.965 280.175 196.704 280.979 cv
196.439 281.795 196.395 282.478 196.589 283.06 cv
196.782 283.642 197.18 284.017 197.785 284.214 cv
198.379 284.407 198.921 284.337 199.42 283.98 cv
199.919 283.622 200.297 283.048 200.562 282.232 cv
200.819 281.441 200.855 280.742 200.661 280.159 cv
200.468 279.577 200.074 279.19 199.481 278.997 cv
199.786 278.057 mo
200.75 278.37 201.4 278.937 201.756 279.736 cv
202.095 280.543 202.098 281.501 201.736 282.614 cv
201.375 283.727 200.809 284.5 200.064 284.941 cv
199.303 285.391 198.449 285.455 197.484 285.142 cv
196.507 284.824 195.841 284.266 195.502 283.459 cv
195.159 282.664 195.168 281.71 195.53 280.597 cv
195.891 279.484 196.445 278.707 197.193 278.254 cv
197.938 277.812 198.809 277.74 199.786 278.057 cv
f
208.438 284.791 mo
208.703 283.975 208.734 283.288 208.553 282.71 cv
208.36 282.128 207.979 281.744 207.398 281.555 cv
206.804 281.363 206.27 281.449 205.784 281.81 cv
205.285 282.168 204.919 282.746 204.654 283.562 cv
204.389 284.378 204.341 285.073 204.534 285.655 cv
204.716 286.234 205.101 286.605 205.694 286.798 cv
206.275 286.986 206.805 286.913 207.304 286.555 cv
207.79 286.194 208.172 285.607 208.438 284.791 cv
205.422 281.2 mo
205.773 280.877 206.166 280.677 206.589 280.595 cv
207.011 280.514 207.476 280.556 207.971 280.716 cv
208.787 280.982 209.346 281.532 209.656 282.344 cv
209.95 283.164 209.933 284.101 209.587 285.165 cv
209.242 286.228 208.701 287.009 207.985 287.487 cv
207.257 287.962 206.485 288.066 205.669 287.801 cv
205.174 287.64 204.774 287.401 204.476 287.099 cv
204.177 286.797 203.977 286.404 203.887 285.923 cv
203.558 286.937 li
202.445 286.576 li
205.498 277.179 li
206.611 277.541 li
205.422 281.2 li
f
213.386 279.742 mo
214.499 280.104 li
211.446 289.5 li
210.333 289.139 li
213.386 279.742 li
f
220.745 288.476 mo
220.568 289.02 li
215.462 287.361 li
215.263 288.143 215.292 288.809 215.584 289.341 cv
215.864 289.869 216.368 290.252 217.11 290.493 cv
217.53 290.63 217.967 290.717 218.395 290.746 cv
218.822 290.776 219.283 290.748 219.75 290.654 cv
219.409 291.705 li
218.957 291.749 218.505 291.753 218.06 291.69 cv
217.616 291.628 217.167 291.537 216.747 291.4 cv
215.659 291.047 214.906 290.461 214.476 289.637 cv
214.047 288.814 214.015 287.861 214.364 286.785 cv
214.722 285.685 215.304 284.903 216.11 284.441 cv
216.913 283.991 217.837 283.922 218.851 284.252 cv
219.766 284.549 220.386 285.079 220.729 285.832 cv
221.056 286.595 221.071 287.474 220.745 288.476 cv
219.737 287.793 mo
219.921 287.183 219.905 286.644 219.704 286.169 cv
219.487 285.702 219.102 285.372 218.558 285.195 cv
217.94 284.994 217.385 285.019 216.902 285.245 cv
216.418 285.471 216.035 285.893 215.781 286.507 cv
219.737 287.793 li
f
228.416 288.973 mo
228.849 288.566 229.299 288.316 229.763 288.194 cv
230.222 288.083 230.72 288.108 231.252 288.281 cv
231.944 288.506 232.408 288.93 232.63 289.549 cv
232.853 290.168 232.822 290.937 232.529 291.84 cv
231.203 295.92 li
230.09 295.558 li
231.404 291.515 li
231.613 290.872 231.646 290.35 231.528 289.956 cv
231.393 289.571 231.099 289.298 230.629 289.145 cv
230.048 288.956 229.526 289.005 229.068 289.28 cv
228.61 289.555 228.28 290.022 228.067 290.677 cv
226.826 294.498 li
225.713 294.136 li
227.027 290.093 li
227.236 289.45 227.269 288.928 227.151 288.534 cv
227.016 288.149 226.71 287.871 226.24 287.719 cv
225.671 287.534 225.15 287.583 224.691 287.858 cv
224.233 288.133 223.904 288.6 223.691 289.255 cv
222.449 293.075 li
221.337 292.714 li
223.534 285.951 li
224.647 286.313 li
224.305 287.363 li
224.685 287.036 225.095 286.827 225.517 286.746 cv
225.928 286.66 226.38 286.698 226.875 286.859 cv
227.37 287.02 227.737 287.276 228.003 287.635 cv
228.269 287.995 228.396 288.446 228.416 288.973 cv
f
242.92 290.527 mo
242.502 291.813 li
242.202 291.306 241.862 290.881 241.456 290.53 cv
241.047 290.192 240.596 289.937 240.077 289.768 cv
239.039 289.43 238.143 289.495 237.394 289.949 cv
236.645 290.402 236.08 291.217 235.694 292.404 cv
235.309 293.59 235.283 294.594 235.622 295.401 cv
235.962 296.208 236.652 296.775 237.691 297.112 cv
238.21 297.281 238.721 297.351 239.255 297.306 cv
239.785 297.273 240.31 297.129 240.855 296.882 cv
240.441 298.156 li
239.912 298.312 239.386 298.374 238.872 298.357 cv
238.358 298.34 237.827 298.25 237.295 298.077 cv
235.935 297.635 234.992 296.878 234.47 295.792 cv
233.948 294.707 233.934 293.445 234.408 291.986 cv
234.878 290.539 235.631 289.526 236.696 288.943 cv
237.756 288.371 238.968 288.3 240.328 288.742 cv
240.872 288.919 241.355 289.158 241.781 289.447 cv
242.202 289.748 242.592 290.106 242.92 290.527 cv
f
246.611 294.31 mo
246.018 294.118 245.472 294.2 244.973 294.557 cv
244.474 294.914 244.096 295.489 243.835 296.292 cv
243.57 297.108 243.526 297.791 243.719 298.374 cv
243.913 298.956 244.31 299.331 244.916 299.528 cv
245.509 299.721 246.052 299.651 246.55 299.293 cv
247.049 298.936 247.427 298.362 247.692 297.546 cv
247.949 296.755 247.985 296.055 247.792 295.473 cv
247.598 294.891 247.205 294.503 246.611 294.31 cv
246.917 293.371 mo
247.881 293.684 248.531 294.251 248.886 295.049 cv
249.225 295.857 249.228 296.815 248.867 297.927 cv
248.505 299.04 247.94 299.813 247.195 300.255 cv
246.434 300.704 245.579 300.768 244.615 300.455 cv
243.638 300.138 242.972 299.58 242.633 298.772 cv
242.29 297.977 242.299 297.023 242.66 295.911 cv
243.022 294.798 243.575 294.021 244.324 293.567 cv
245.069 293.126 245.94 293.053 246.917 293.371 cv
f
256.655 298.148 mo
257.088 297.742 257.538 297.492 258.002 297.369 cv
258.461 297.258 258.959 297.284 259.49 297.456 cv
260.183 297.681 260.647 298.105 260.869 298.724 cv
261.092 299.343 261.061 300.112 260.767 301.015 cv
259.442 305.095 li
258.329 304.733 li
259.642 300.69 li
259.851 300.048 259.884 299.525 259.766 299.131 cv
259.632 298.746 259.338 298.473 258.868 298.32 cv
258.287 298.131 257.765 298.181 257.307 298.455 cv
256.849 298.73 256.519 299.197 256.306 299.853 cv
255.065 303.673 li
253.952 303.311 li
255.266 299.268 li
255.475 298.625 255.508 298.103 255.39 297.709 cv
255.255 297.324 254.949 297.047 254.479 296.894 cv
253.91 296.709 253.388 296.758 252.93 297.033 cv
252.472 297.308 252.142 297.775 251.929 298.43 cv
250.688 302.251 li
249.575 301.889 li
251.773 295.126 li
252.885 295.488 li
252.544 296.539 li
252.924 296.211 253.333 296.002 253.756 295.921 cv
254.167 295.836 254.619 295.873 255.114 296.034 cv
255.608 296.195 255.976 296.451 256.242 296.811 cv
256.508 297.171 256.635 297.622 256.655 298.148 cv
f
263.06 305.15 mo
261.899 308.723 li
260.786 308.361 li
263.815 299.039 li
264.928 299.401 li
264.594 300.427 li
264.945 300.103 265.339 299.903 265.761 299.822 cv
266.184 299.741 266.649 299.782 267.144 299.943 cv
267.96 300.208 268.519 300.759 268.829 301.57 cv
269.123 302.39 269.106 303.328 268.76 304.391 cv
268.415 305.454 267.874 306.236 267.158 306.714 cv
266.43 307.188 265.658 307.292 264.842 307.027 cv
264.347 306.867 263.947 306.627 263.648 306.325 cv
263.35 306.023 263.15 305.63 263.06 305.15 cv
267.61 304.018 mo
267.875 303.202 267.907 302.515 267.726 301.936 cv
267.533 301.354 267.151 300.971 266.57 300.782 cv
265.977 300.589 265.443 300.675 264.957 301.037 cv
264.458 301.394 264.092 301.972 263.827 302.788 cv
263.562 303.604 263.514 304.299 263.707 304.882 cv
263.888 305.46 264.274 305.831 264.867 306.024 cv
265.448 306.213 265.978 306.139 266.477 305.782 cv
266.963 305.42 267.345 304.834 267.61 304.018 cv
f
272.559 298.969 mo
273.671 299.33 li
270.618 308.727 li
269.506 308.365 li
272.559 298.969 li
f
279.918 307.702 mo
279.741 308.246 li
274.635 306.587 li
274.435 307.37 274.465 308.035 274.757 308.568 cv
275.036 309.096 275.541 309.478 276.283 309.72 cv
276.703 309.856 277.14 309.943 277.567 309.973 cv
277.995 310.003 278.455 309.974 278.923 309.88 cv
278.582 310.931 li
278.13 310.976 277.678 310.979 277.233 310.917 cv
276.789 310.854 276.34 310.763 275.92 310.627 cv
274.832 310.273 274.079 309.687 273.649 308.864 cv
273.22 308.041 273.188 307.087 273.537 306.012 cv
273.895 304.911 274.477 304.13 275.283 303.667 cv
276.085 303.217 277.01 303.149 278.024 303.478 cv
278.939 303.775 279.559 304.305 279.902 305.059 cv
280.229 305.821 280.243 306.701 279.918 307.702 cv
278.91 307.019 mo
279.094 306.409 279.078 305.871 278.877 305.396 cv
278.66 304.929 278.275 304.598 277.731 304.422 cv
277.113 304.221 276.558 304.246 276.074 304.471 cv
275.591 304.697 275.208 305.119 274.953 305.734 cv
278.91 307.019 li
f
288.369 307.017 mo
284.853 309.511 li
286.296 313.82 li
284.985 313.395 li
283.883 310.098 li
281.053 312.117 li
279.743 311.691 li
283.513 309.007 li
282.163 305.001 li
283.473 305.426 li
284.483 308.42 li
287.059 306.591 li
288.369 307.017 li
f
282.795 263.286 mo
282.795 266.786 li
f
282.795 263.286 mo
282.795 266.786 li
@
250.551 273.111 mo
250.165 274.298 li
249.768 273.923 249.387 273.621 249.015 273.377 cv
248.627 273.142 248.251 272.952 247.88 272.831 cv
247.213 272.614 246.649 272.581 246.21 272.712 cv
245.768 272.855 245.474 273.17 245.321 273.64 cv
245.193 274.035 245.204 274.381 245.387 274.659 cv
245.553 274.945 245.958 275.255 246.586 275.595 cv
247.28 275.985 li
248.126 276.451 248.693 276.977 248.985 277.55 cv
249.273 278.136 249.307 278.789 249.07 279.519 cv
248.785 280.397 248.275 280.956 247.549 281.212 cv
246.811 281.464 245.886 281.41 244.761 281.044 cv
244.328 280.903 243.887 280.705 243.433 280.462 cv
242.979 280.219 242.528 279.922 242.086 279.56 cv
242.495 278.299 li
242.898 278.744 243.311 279.11 243.737 279.399 cv
244.159 279.7 244.608 279.915 245.078 280.067 cv
245.771 280.292 246.346 280.329 246.818 280.181 cv
247.277 280.03 247.6 279.711 247.768 279.192 cv
247.913 278.747 247.89 278.356 247.698 278.021 cv
247.506 277.685 247.121 277.355 246.543 277.03 cv
245.85 276.641 li
244.991 276.171 244.428 275.673 244.149 275.145 cv
243.865 274.629 243.84 274.033 244.065 273.341 cv
244.322 272.55 244.799 272.008 245.517 271.735 cv
246.222 271.458 247.077 271.476 248.066 271.798 cv
248.486 271.934 248.895 272.108 249.316 272.327 cv
249.724 272.542 250.129 272.81 250.551 273.111 cv
f
254.038 274.285 mo
253.415 276.201 li
255.702 276.944 li
255.421 277.81 li
253.134 277.067 li
251.941 280.739 li
251.76 281.295 251.717 281.678 251.818 281.874 cv
251.914 282.083 252.199 282.258 252.669 282.41 cv
253.806 282.78 li
253.505 283.707 li
252.367 283.338 li
251.502 283.057 250.961 282.703 250.744 282.277 cv
250.527 281.851 250.555 281.218 250.828 280.377 cv
252.021 276.705 li
251.205 276.44 li
251.486 275.574 li
252.302 275.84 li
252.925 273.923 li
254.038 274.285 li
f
260.743 279.73 mo
260.643 279.616 260.523 279.522 260.387 279.437 cv
260.247 279.364 260.094 279.287 259.921 279.231 cv
259.29 279.026 258.74 279.08 258.274 279.379 cv
257.795 279.675 257.445 280.204 257.196 280.97 cv
256.039 284.531 li
254.927 284.169 li
257.124 277.406 li
258.237 277.768 li
257.895 278.819 li
258.25 278.483 258.66 278.274 259.095 278.197 cv
259.53 278.12 260.02 278.17 260.564 278.346 cv
260.638 278.37 260.721 278.411 260.819 278.443 cv
260.902 278.484 260.997 278.528 261.113 278.593 cv
260.743 279.73 li
f
260.802 283.126 mo
262.131 279.033 li
263.244 279.395 li
261.926 283.45 li
261.717 284.093 261.688 284.603 261.831 285.005 cv
261.974 285.407 262.293 285.688 262.8 285.853 cv
263.393 286.045 263.936 286.017 264.406 285.746 cv
264.877 285.475 265.219 285.012 265.436 284.344 cv
266.681 280.512 li
267.794 280.873 li
265.596 287.636 li
264.484 287.275 li
264.821 286.236 li
264.413 286.568 263.995 286.76 263.584 286.846 cv
263.165 286.915 262.725 286.881 262.255 286.728 cv
261.477 286.475 260.959 286.047 260.72 285.437 cv
260.465 284.834 260.496 284.065 260.802 283.126 cv
264.978 279.78 mo
264.978 279.78 li
f
274.868 283.459 mo
274.531 284.497 li
274.265 284.22 273.996 283.996 273.703 283.805 cv
273.41 283.614 273.117 283.464 272.795 283.359 cv
272.078 283.126 271.433 283.177 270.889 283.505 cv
270.345 283.834 269.938 284.413 269.673 285.229 cv
269.404 286.057 269.393 286.765 269.64 287.351 cv
269.887 287.937 270.383 288.344 271.1 288.577 cv
271.422 288.681 271.743 288.745 272.092 288.763 cv
272.442 288.78 272.795 288.745 273.173 288.676 cv
272.839 289.702 li
272.47 289.746 272.112 289.753 271.771 289.711 cv
271.417 289.664 271.046 289.585 270.675 289.464 cv
269.661 289.135 268.946 288.56 268.561 287.725 cv
268.16 286.897 268.145 285.935 268.498 284.847 cv
268.856 283.747 269.434 282.978 270.244 282.544 cv
271.055 282.111 271.988 282.058 273.051 282.404 cv
273.397 282.516 273.719 282.662 274.017 282.84 cv
274.314 283.019 274.603 283.222 274.868 283.459 cv
f
278.604 282.267 mo
277.982 284.183 li
280.269 284.927 li
279.988 285.792 li
277.7 285.049 li
276.507 288.721 li
276.327 289.277 276.284 289.66 276.384 289.856 cv
276.48 290.065 276.765 290.24 277.235 290.393 cv
278.373 290.762 li
278.071 291.69 li
276.934 291.32 li
276.069 291.039 275.527 290.685 275.31 290.259 cv
275.093 289.833 275.121 289.2 275.395 288.359 cv
276.588 284.687 li
275.772 284.422 li
276.053 283.557 li
276.869 283.822 li
277.492 281.905 li
278.604 282.267 li
f
280.287 289.457 mo
281.617 285.364 li
282.729 285.726 li
281.412 289.781 li
281.203 290.424 281.174 290.934 281.316 291.336 cv
281.459 291.738 281.778 292.019 282.285 292.184 cv
282.878 292.377 283.421 292.348 283.892 292.077 cv
284.362 291.806 284.704 291.343 284.921 290.676 cv
286.166 286.843 li
287.279 287.204 li
285.082 293.967 li
283.969 293.606 li
284.306 292.567 li
283.898 292.899 283.48 293.091 283.069 293.177 cv
282.651 293.246 282.211 293.212 281.741 293.059 cv
280.962 292.806 280.445 292.379 280.206 291.768 cv
279.95 291.165 279.982 290.396 280.287 289.457 cv
284.463 286.112 mo
284.463 286.112 li
f
293.148 290.26 mo
293.049 290.145 292.929 290.052 292.793 289.966 cv
292.652 289.893 292.499 289.816 292.326 289.76 cv
291.696 289.555 291.145 289.609 290.679 289.908 cv
290.2 290.204 289.851 290.733 289.602 291.499 cv
288.445 295.06 li
287.332 294.698 li
289.529 287.935 li
290.642 288.297 li
290.301 289.348 li
290.656 289.012 291.065 288.804 291.5 288.726 cv
291.936 288.649 292.425 288.699 292.969 288.875 cv
293.043 288.9 293.126 288.94 293.225 288.972 cv
293.307 289.013 293.402 289.057 293.518 289.122 cv
293.148 290.26 li
f
299.426 294.582 mo
299.249 295.126 li
294.143 293.467 li
293.943 294.249 293.973 294.915 294.265 295.447 cv
294.544 295.976 295.049 296.358 295.79 296.599 cv
296.211 296.736 296.647 296.823 297.075 296.853 cv
297.503 296.882 297.963 296.854 298.431 296.76 cv
298.09 297.811 li
297.638 297.856 297.185 297.859 296.741 297.797 cv
296.297 297.734 295.848 297.643 295.427 297.507 cv
294.339 297.153 293.587 296.567 293.157 295.744 cv
292.727 294.921 292.695 293.967 293.045 292.891 cv
293.402 291.791 293.984 291.01 294.791 290.547 cv
295.593 290.097 296.518 290.028 297.531 290.358 cv
298.446 290.655 299.067 291.185 299.41 291.939 cv
299.736 292.701 299.751 293.581 299.426 294.582 cv
298.418 293.899 mo
298.602 293.289 298.586 292.751 298.385 292.275 cv
298.167 291.808 297.782 291.478 297.238 291.301 cv
296.62 291.101 296.065 291.125 295.582 291.351 cv
295.099 291.577 294.715 291.999 294.461 292.613 cv
298.418 293.899 li
f
303.032 289.835 mo
304.256 290.233 li
301.328 299.246 li
300.104 298.848 li
303.032 289.835 li
f
310.653 297.765 mo
309.327 301.845 li
308.214 301.484 li
309.528 297.441 li
309.737 296.798 309.753 296.284 309.611 295.882 cv
309.468 295.48 309.149 295.199 308.655 295.038 cv
308.049 294.841 307.515 294.886 307.044 295.157 cv
306.573 295.428 306.231 295.891 306.018 296.546 cv
304.777 300.367 li
303.664 300.005 li
305.862 293.242 li
306.975 293.604 li
306.633 294.655 li
307.021 294.343 307.431 294.135 307.866 294.057 cv
308.289 293.976 308.745 294.001 309.215 294.154 cv
309.982 294.403 310.495 294.843 310.734 295.454 cv
310.973 296.065 310.954 296.838 310.653 297.765 cv
f
318.018 294.281 mo
317.717 295.208 li
316.653 294.862 li
316.258 294.734 315.945 294.728 315.745 294.84 cv
315.532 294.949 315.365 295.209 315.229 295.63 cv
315.036 296.223 li
316.866 296.818 li
316.584 297.683 li
314.755 297.088 li
312.838 302.986 li
311.726 302.624 li
313.642 296.727 li
312.579 296.381 li
312.86 295.516 li
313.923 295.861 li
314.076 295.392 li
314.317 294.65 314.671 294.15 315.129 293.916 cv
315.588 293.682 316.201 293.69 316.967 293.939 cv
318.018 294.281 li
f
320.458 298.846 mo
319.864 298.653 319.318 298.735 318.819 299.093 cv
318.32 299.45 317.942 300.024 317.681 300.828 cv
317.416 301.644 317.372 302.327 317.566 302.909 cv
317.759 303.491 318.157 303.867 318.762 304.063 cv
319.356 304.256 319.898 304.186 320.397 303.829 cv
320.896 303.472 321.274 302.897 321.539 302.081 cv
321.796 301.29 321.832 300.591 321.638 300.009 cv
321.445 299.426 321.051 299.039 320.458 298.846 cv
320.763 297.906 mo
321.727 298.22 322.377 298.786 322.733 299.585 cv
323.072 300.392 323.075 301.35 322.713 302.463 cv
322.352 303.576 321.786 304.349 321.041 304.79 cv
320.28 305.24 319.426 305.304 318.461 304.991 cv
317.484 304.673 316.818 304.115 316.479 303.308 cv
316.136 302.513 316.145 301.559 316.507 300.446 cv
316.868 299.334 317.422 298.556 318.17 298.103 cv
318.915 297.661 319.786 297.589 320.763 297.906 cv
f
330.52 263.286 mo
330.52 266.786 li
f
330.52 263.286 mo
330.52 266.786 li
@
300.772 273.944 mo
300.354 275.23 li
300.055 274.723 299.714 274.298 299.309 273.947 cv
298.899 273.609 298.449 273.354 297.93 273.185 cv
296.891 272.847 295.996 272.912 295.247 273.366 cv
294.498 273.819 293.933 274.634 293.547 275.82 cv
293.161 277.007 293.136 278.011 293.475 278.818 cv
293.814 279.625 294.505 280.191 295.544 280.529 cv
296.063 280.698 296.573 280.768 297.107 280.723 cv
297.637 280.69 298.163 280.546 298.707 280.299 cv
298.294 281.573 li
297.764 281.729 297.239 281.79 296.725 281.774 cv
296.211 281.757 295.68 281.667 295.148 281.494 cv
293.788 281.052 292.845 280.294 292.323 279.209 cv
291.801 278.124 291.787 276.862 292.261 275.403 cv
292.731 273.956 293.484 272.943 294.548 272.36 cv
295.609 271.788 296.821 271.717 298.181 272.159 cv
298.725 272.336 299.208 272.575 299.633 272.864 cv
300.055 273.165 300.444 273.523 300.772 273.944 cv
f
304.464 277.727 mo
303.87 277.534 303.324 277.617 302.825 277.974 cv
302.327 278.331 301.949 278.906 301.688 279.709 cv
301.422 280.525 301.378 281.208 301.572 281.79 cv
301.765 282.373 302.163 282.748 302.769 282.945 cv
303.362 283.138 303.904 283.068 304.403 282.71 cv
304.902 282.353 305.28 281.779 305.545 280.963 cv
305.802 280.171 305.838 279.472 305.644 278.89 cv
305.451 278.308 305.057 277.92 304.464 277.727 cv
304.769 276.788 mo
305.734 277.101 306.383 277.668 306.739 278.466 cv
307.078 279.274 307.081 280.232 306.72 281.344 cv
306.358 282.457 305.792 283.23 305.048 283.672 cv
304.286 284.121 303.432 284.185 302.467 283.872 cv
301.491 283.555 300.824 282.997 300.485 282.189 cv
300.142 281.394 300.151 280.44 300.513 279.328 cv
300.875 278.215 301.428 277.438 302.177 276.984 cv
302.921 276.543 303.792 276.47 304.769 276.788 cv
f
314.508 281.565 mo
314.94 281.159 315.391 280.909 315.854 280.786 cv
316.314 280.675 316.811 280.7 317.343 280.873 cv
318.036 281.098 318.499 281.522 318.722 282.141 cv
318.944 282.76 318.913 283.529 318.62 284.432 cv
317.294 288.512 li
316.182 288.15 li
317.495 284.107 li
317.704 283.465 317.737 282.942 317.619 282.548 cv
317.484 282.163 317.191 281.89 316.721 281.737 cv
316.14 281.548 315.618 281.597 315.16 281.872 cv
314.701 282.147 314.372 282.614 314.159 283.269 cv
312.917 287.09 li
311.805 286.728 li
313.118 282.685 li
313.327 282.042 313.36 281.52 313.242 281.126 cv
313.108 280.741 312.801 280.464 312.332 280.311 cv
311.763 280.126 311.241 280.175 310.783 280.45 cv
310.324 280.725 309.995 281.192 309.782 281.847 cv
308.541 285.668 li
307.428 285.306 li
309.625 278.543 li
310.738 278.905 li
310.397 279.956 li
310.777 279.628 311.186 279.419 311.609 279.338 cv
312.019 279.253 312.472 279.29 312.966 279.451 cv
313.461 279.612 313.829 279.868 314.095 280.228 cv
314.36 280.587 314.487 281.039 314.508 281.565 cv
f
325.463 287.434 mo
325.728 286.618 325.76 285.932 325.579 285.353 cv
325.385 284.771 325.004 284.388 324.423 284.199 cv
323.83 284.006 323.296 284.092 322.809 284.454 cv
322.31 284.811 321.945 285.389 321.68 286.205 cv
321.415 287.021 321.366 287.716 321.56 288.299 cv
321.741 288.877 322.126 289.248 322.72 289.441 cv
323.301 289.63 323.831 289.556 324.329 289.199 cv
324.816 288.837 325.198 288.25 325.463 287.434 cv
322.447 283.844 mo
322.798 283.52 323.191 283.32 323.614 283.239 cv
324.037 283.157 324.502 283.199 324.996 283.36 cv
325.812 283.625 326.371 284.176 326.682 284.987 cv
326.976 285.807 326.958 286.745 326.613 287.808 cv
326.267 288.871 325.727 289.652 325.011 290.131 cv
324.283 290.605 323.51 290.709 322.694 290.444 cv
322.2 290.284 321.799 290.044 321.501 289.742 cv
321.203 289.44 321.002 289.047 320.912 288.567 cv
320.583 289.581 li
319.47 289.219 li
322.523 279.823 li
323.636 280.184 li
322.447 283.844 li
f
329.556 285.019 mo
330.668 285.38 li
328.471 292.143 li
327.358 291.782 li
329.556 285.019 li
330.411 282.385 mo
331.524 282.747 li
331.066 284.156 li
329.953 283.795 li
330.411 282.385 li
f
337.747 290.647 mo
336.421 294.727 li
335.308 294.365 li
336.622 290.322 li
336.831 289.679 336.847 289.165 336.704 288.763 cv
336.562 288.362 336.243 288.08 335.748 287.92 cv
335.143 287.723 334.608 287.768 334.138 288.039 cv
333.667 288.31 333.325 288.773 333.112 289.428 cv
331.871 293.248 li
330.758 292.887 li
332.956 286.124 li
334.068 286.485 li
333.727 287.536 li
334.115 287.225 334.525 287.016 334.96 286.939 cv
335.383 286.858 335.839 286.883 336.309 287.036 cv
337.076 287.285 337.589 287.725 337.828 288.335 cv
338.067 288.946 338.048 289.719 337.747 290.647 cv
f
342.817 293.046 mo
341.915 292.753 341.26 292.663 340.85 292.748 cv
340.435 292.846 340.15 293.136 339.989 293.631 cv
339.861 294.026 339.88 294.388 340.067 294.695 cv
340.25 295.014 340.573 295.242 341.018 295.386 cv
341.636 295.587 342.199 295.538 342.715 295.213 cv
343.226 294.901 343.6 294.38 343.837 293.651 cv
343.918 293.403 li
342.817 293.046 li
345.179 293.308 mo
343.926 297.165 li
342.813 296.803 li
343.146 295.777 li
342.75 296.113 342.332 296.306 341.901 296.371 cv
341.47 296.435 340.968 296.382 340.424 296.205 cv
339.732 295.98 339.235 295.614 338.952 295.098 cv
338.669 294.582 338.639 293.999 338.852 293.343 cv
339.097 292.589 339.529 292.101 340.177 291.874 cv
340.809 291.655 341.627 291.702 342.641 292.032 cv
344.199 292.538 li
344.235 292.427 li
344.4 291.92 344.355 291.468 344.114 291.075 cv
343.868 290.695 343.447 290.394 342.841 290.197 cv
342.445 290.068 342.058 289.997 341.655 289.976 cv
341.252 289.954 340.862 289.977 340.472 290.042 cv
340.805 289.016 li
341.249 288.996 341.685 289.001 342.092 289.051 cv
342.5 289.102 342.887 289.173 343.257 289.293 cv
344.234 289.611 344.879 290.107 345.197 290.771 cv
345.514 291.434 345.512 292.281 345.179 293.308 cv
f
350.133 289.586 mo
349.511 291.503 li
351.798 292.246 li
351.517 293.111 li
349.23 292.368 li
348.036 296.04 li
347.856 296.597 347.813 296.979 347.914 297.176 cv
348.01 297.385 348.295 297.559 348.765 297.712 cv
349.902 298.082 li
349.601 299.009 li
348.463 298.639 li
347.598 298.358 347.057 298.005 346.84 297.579 cv
346.623 297.153 346.651 296.519 346.924 295.679 cv
348.117 292.007 li
347.301 291.742 li
347.582 290.876 li
348.398 291.141 li
349.021 289.225 li
350.133 289.586 li
f
353.257 292.72 mo
354.37 293.082 li
352.172 299.845 li
351.06 299.483 li
353.257 292.72 li
354.113 290.087 mo
355.225 290.448 li
354.767 291.858 li
353.655 291.496 li
354.113 290.087 li
f
359.062 295.467 mo
358.469 295.275 357.923 295.357 357.424 295.714 cv
356.925 296.071 356.547 296.646 356.286 297.449 cv
356.021 298.265 355.977 298.948 356.17 299.531 cv
356.364 300.113 356.761 300.488 357.367 300.685 cv
357.96 300.878 358.503 300.808 359.001 300.45 cv
359.5 300.093 359.878 299.519 360.143 298.703 cv
360.4 297.912 360.436 297.212 360.243 296.63 cv
360.049 296.048 359.656 295.66 359.062 295.467 cv
359.367 294.528 mo
360.332 294.841 360.982 295.408 361.337 296.207 cv
361.676 297.014 361.679 297.972 361.318 299.084 cv
360.956 300.197 360.391 300.97 359.646 301.412 cv
358.885 301.861 358.03 301.925 357.066 301.612 cv
356.089 301.295 355.423 300.737 355.084 299.929 cv
354.74 299.134 354.75 298.181 355.111 297.068 cv
355.473 295.955 356.026 295.178 356.775 294.724 cv
357.52 294.283 358.391 294.21 359.367 294.528 cv
f
369.014 300.806 mo
367.689 304.886 li
366.576 304.525 li
367.89 300.482 li
368.099 299.839 368.115 299.325 367.972 298.923 cv
367.83 298.521 367.511 298.24 367.016 298.079 cv
366.411 297.882 365.876 297.927 365.406 298.198 cv
364.935 298.469 364.593 298.932 364.38 299.587 cv
363.139 303.408 li
362.026 303.046 li
364.224 296.283 li
365.336 296.645 li
364.995 297.696 li
365.383 297.384 365.793 297.176 366.228 297.098 cv
366.651 297.017 367.107 297.042 367.577 297.195 cv
368.344 297.444 368.857 297.884 369.096 298.495 cv
369.335 299.106 369.316 299.879 369.014 300.806 cv
f
161.035 329.922 mo
160.419 330.986 159.971 332.022 159.677 333.044 cv
159.369 334.066 159.229 335.102 159.229 336.152 cv
159.229 337.216 159.369 338.252 159.677 339.274 cv
159.971 340.31 160.419 341.332 161.035 342.382 cv
159.943 342.382 li
159.257 341.304 158.739 340.268 158.403 339.232 cv
158.067 338.196 157.899 337.174 157.899 336.152 cv
157.899 335.144 158.067 334.122 158.403 333.086 cv
158.739 332.05 159.243 331 159.943 329.922 cv
161.035 329.922 li
f
166.957 336.698 mo
165.935 336.698 165.235 336.824 164.843 337.048 cv
164.451 337.286 164.255 337.678 164.255 338.238 cv
164.255 338.686 164.395 339.05 164.689 339.302 cv
164.983 339.568 165.389 339.694 165.893 339.694 cv
166.593 339.694 167.153 339.456 167.573 338.952 cv
167.993 338.462 168.203 337.804 168.203 336.978 cv
168.203 336.698 li
166.957 336.698 li
169.463 336.18 mo
169.463 340.548 li
168.203 340.548 li
168.203 339.386 li
167.909 339.862 167.545 340.198 167.125 340.408 cv
166.705 340.618 166.173 340.73 165.557 340.73 cv
164.773 340.73 164.143 340.52 163.681 340.086 cv
163.219 339.652 162.995 339.064 162.995 338.322 cv
162.995 337.468 163.275 336.824 163.863 336.376 cv
164.437 335.942 165.291 335.718 166.439 335.718 cv
168.203 335.718 li
168.203 335.592 li
168.203 335.018 168.007 334.57 167.629 334.248 cv
167.251 333.94 166.719 333.772 166.033 333.772 cv
165.585 333.772 165.165 333.828 164.745 333.94 cv
164.325 334.052 163.933 334.206 163.555 334.402 cv
163.555 333.24 li
164.003 333.072 164.451 332.932 164.885 332.848 cv
165.319 332.764 165.739 332.708 166.159 332.708 cv
167.265 332.708 168.091 333.002 168.637 333.576 cv
169.183 334.15 169.463 335.018 169.463 336.18 cv
f
171.857 329.922 mo
172.949 329.922 li
173.621 331 174.139 332.05 174.475 333.086 cv
174.811 334.122 174.993 335.144 174.993 336.152 cv
174.993 337.174 174.811 338.196 174.475 339.232 cv
174.139 340.268 173.621 341.304 172.949 342.382 cv
171.857 342.382 li
172.459 341.332 172.907 340.31 173.215 339.274 cv
173.509 338.252 173.663 337.216 173.663 336.152 cv
173.663 335.102 173.509 334.066 173.215 333.044 cv
172.907 332.022 172.459 330.986 171.857 329.922 cv
f
180.985 331.7 mo
179.109 336.782 li
182.861 336.782 li
180.985 331.7 li
180.201 330.342 mo
181.769 330.342 li
185.661 340.548 li
184.219 340.548 li
183.295 337.93 li
178.689 337.93 li
177.765 340.548 li
176.309 340.548 li
180.201 330.342 li
f
194.789 331.126 mo
194.789 332.582 li
194.313 332.162 193.823 331.84 193.291 331.616 cv
192.759 331.406 192.213 331.294 191.625 331.294 cv
190.449 331.294 189.553 331.658 188.937 332.372 cv
188.321 333.086 188.013 334.108 188.013 335.452 cv
188.013 336.796 188.321 337.832 188.937 338.546 cv
189.553 339.26 190.449 339.61 191.625 339.61 cv
192.213 339.61 192.759 339.512 193.291 339.288 cv
193.823 339.078 194.313 338.756 194.789 338.322 cv
194.789 339.764 li
194.299 340.1 193.781 340.338 193.249 340.492 cv
192.717 340.646 192.143 340.73 191.541 340.73 cv
190.001 340.73 188.783 340.268 187.887 339.33 cv
186.991 338.392 186.557 337.104 186.557 335.452 cv
186.557 333.814 186.991 332.526 187.887 331.574 cv
188.783 330.636 190.001 330.16 191.541 330.16 cv
192.157 330.16 192.731 330.244 193.263 330.398 cv
193.795 330.566 194.313 330.804 194.789 331.126 cv
f
204.561 331.126 mo
204.561 332.582 li
204.085 332.162 203.595 331.84 203.063 331.616 cv
202.531 331.406 201.985 331.294 201.397 331.294 cv
200.221 331.294 199.325 331.658 198.709 332.372 cv
198.093 333.086 197.785 334.108 197.785 335.452 cv
197.785 336.796 198.093 337.832 198.709 338.546 cv
199.325 339.26 200.221 339.61 201.397 339.61 cv
201.985 339.61 202.531 339.512 203.063 339.288 cv
203.595 339.078 204.085 338.756 204.561 338.322 cv
204.561 339.764 li
204.071 340.1 203.553 340.338 203.021 340.492 cv
202.489 340.646 201.915 340.73 201.313 340.73 cv
199.773 340.73 198.555 340.268 197.659 339.33 cv
196.763 338.392 196.329 337.104 196.329 335.452 cv
196.329 333.814 196.763 332.526 197.659 331.574 cv
198.555 330.636 199.773 330.16 201.313 330.16 cv
201.929 330.16 202.503 330.244 203.035 330.398 cv
203.567 330.566 204.085 330.804 204.561 331.126 cv
f
31.5261 263.286 mo
28.0261 263.286 li
f
31.5261 263.286 mo
28.0261 263.286 li
@
6.71247 259.311 mo
5.99847 259.311 5.46647 259.661 5.10247 260.361 cv
4.73847 261.061 4.57047 262.111 4.57047 263.511 cv
4.57047 264.911 4.73847 265.961 5.10247 266.661 cv
5.46647 267.361 5.99847 267.711 6.71247 267.711 cv
7.42647 267.711 7.95847 267.361 8.32247 266.661 cv
8.67247 265.961 8.85447 264.911 8.85447 263.511 cv
8.85447 262.111 8.67247 261.061 8.32247 260.361 cv
7.95847 259.661 7.42647 259.311 6.71247 259.311 cv
6.71247 258.219 mo
7.84647 258.219 8.71447 258.681 9.33047 259.577 cv
9.93247 260.487 10.2405 261.803 10.2405 263.511 cv
10.2405 265.233 9.93247 266.549 9.33047 267.445 cv
8.71447 268.341 7.84647 268.789 6.71247 268.789 cv
5.56447 268.789 4.68247 268.341 4.08047 267.445 cv
3.47847 266.549 3.18447 265.233 3.18447 263.511 cv
3.18447 261.803 3.47847 260.487 4.08047 259.577 cv
4.68247 258.681 5.56447 258.219 6.71247 258.219 cv
f
12.6625 266.871 mo
14.1045 266.871 li
14.1045 268.607 li
12.6625 268.607 li
12.6625 266.871 li
f
17.3524 267.445 mo
19.6064 267.445 li
19.6064 259.661 li
17.1564 260.151 li
17.1564 258.891 li
19.5924 258.401 li
20.9784 258.401 li
20.9784 267.445 li
23.2324 267.445 li
23.2324 268.607 li
17.3524 268.607 li
17.3524 267.445 li
f
31.5261 231.95 mo
28.0261 231.95 li
f
31.5261 231.95 mo
28.0261 231.95 li
@
6.71247 227.974 mo
5.99847 227.974 5.46647 228.324 5.10247 229.024 cv
4.73847 229.724 4.57047 230.774 4.57047 232.174 cv
4.57047 233.574 4.73847 234.624 5.10247 235.324 cv
5.46647 236.024 5.99847 236.374 6.71247 236.374 cv
7.42647 236.374 7.95847 236.024 8.32247 235.324 cv
8.67247 234.624 8.85447 233.574 8.85447 232.174 cv
8.85447 230.774 8.67247 229.724 8.32247 229.024 cv
7.95847 228.324 7.42647 227.974 6.71247 227.974 cv
6.71247 226.882 mo
7.84647 226.882 8.71447 227.344 9.33047 228.24 cv
9.93247 229.15 10.2405 230.466 10.2405 232.174 cv
10.2405 233.896 9.93247 235.212 9.33047 236.108 cv
8.71447 237.004 7.84647 237.452 6.71247 237.452 cv
5.56447 237.452 4.68247 237.004 4.08047 236.108 cv
3.47847 235.212 3.18447 233.896 3.18447 232.174 cv
3.18447 230.466 3.47847 229.15 4.08047 228.24 cv
4.68247 227.344 5.56447 226.882 6.71247 226.882 cv
f
12.6625 235.534 mo
14.1045 235.534 li
14.1045 237.27 li
12.6625 237.27 li
12.6625 235.534 li
f
18.3044 236.108 mo
23.1204 236.108 li
23.1204 237.27 li
16.6384 237.27 li
16.6384 236.108 li
17.1564 235.576 17.8704 234.848 18.7804 233.924 cv
19.6764 233.014 20.2504 232.426 20.4884 232.16 cv
20.9364 231.67 21.2444 231.25 21.4124 230.9 cv
21.5804 230.564 21.6784 230.214 21.6784 229.878 cv
21.6784 229.346 21.4824 228.898 21.1044 228.562 cv
20.7264 228.226 20.2364 228.044 19.6204 228.044 cv
19.1864 228.044 18.7244 228.128 18.2484 228.268 cv
17.7724 228.422 17.2544 228.646 16.7084 228.954 cv
16.7084 227.554 li
17.2684 227.33 17.7864 227.162 18.2624 227.05 cv
18.7384 226.938 19.1864 226.882 19.5924 226.882 cv
20.6424 226.882 21.4824 227.148 22.1124 227.68 cv
22.7424 228.212 23.0644 228.912 23.0644 229.794 cv
23.0644 230.214 22.9804 230.62 22.8264 230.984 cv
22.6724 231.362 22.3924 231.81 21.9724 232.314 cv
21.8604 232.454 21.4964 232.832 20.8804 233.462 cv
20.2644 234.092 19.4104 234.974 18.3044 236.108 cv
f
31.5261 200.613 mo
28.0261 200.613 li
f
31.5261 200.613 mo
28.0261 200.613 li
@
6.71247 196.637 mo
5.99847 196.637 5.46647 196.987 5.10247 197.687 cv
4.73847 198.387 4.57047 199.437 4.57047 200.837 cv
4.57047 202.237 4.73847 203.287 5.10247 203.987 cv
5.46647 204.687 5.99847 205.037 6.71247 205.037 cv
7.42647 205.037 7.95847 204.687 8.32247 203.987 cv
8.67247 203.287 8.85447 202.237 8.85447 200.837 cv
8.85447 199.437 8.67247 198.387 8.32247 197.687 cv
7.95847 196.987 7.42647 196.637 6.71247 196.637 cv
6.71247 195.545 mo
7.84647 195.545 8.71447 196.007 9.33047 196.903 cv
9.93247 197.813 10.2405 199.129 10.2405 200.837 cv
10.2405 202.559 9.93247 203.875 9.33047 204.771 cv
8.71447 205.667 7.84647 206.115 6.71247 206.115 cv
5.56447 206.115 4.68247 205.667 4.08047 204.771 cv
3.47847 203.875 3.18447 202.559 3.18447 200.837 cv
3.18447 199.129 3.47847 197.813 4.08047 196.903 cv
4.68247 196.007 5.56447 195.545 6.71247 195.545 cv
f
12.6625 204.197 mo
14.1045 204.197 li
14.1045 205.933 li
12.6625 205.933 li
12.6625 204.197 li
f
21.3004 200.431 mo
21.9584 200.571 22.4764 200.865 22.8404 201.313 cv
23.2044 201.761 23.4004 202.321 23.4004 202.965 cv
23.4004 203.973 23.0504 204.757 22.3644 205.303 cv
21.6644 205.849 20.6844 206.115 19.4104 206.115 cv
18.9764 206.115 18.5284 206.073 18.0804 205.989 cv
17.6324 205.919 17.1564 205.793 16.6804 205.625 cv
16.6804 204.295 li
17.0584 204.519 17.4784 204.687 17.9404 204.799 cv
18.3884 204.911 18.8644 204.967 19.3684 204.967 cv
20.2364 204.967 20.8944 204.799 21.3424 204.463 cv
21.7904 204.127 22.0284 203.623 22.0284 202.965 cv
22.0284 202.377 21.8184 201.901 21.3984 201.565 cv
20.9784 201.229 20.3904 201.047 19.6344 201.047 cv
18.4444 201.047 li
18.4444 199.913 li
19.6904 199.913 li
20.3624 199.913 20.8804 199.787 21.2444 199.507 cv
21.6084 199.241 21.7904 198.849 21.7904 198.331 cv
21.7904 197.813 21.5944 197.407 21.2304 197.127 cv
20.8524 196.847 20.3204 196.707 19.6344 196.707 cv
19.2564 196.707 18.8504 196.749 18.4164 196.833 cv
17.9824 196.917 17.5064 197.043 16.9884 197.211 cv
16.9884 195.979 li
17.5064 195.839 17.9964 195.727 18.4584 195.657 cv
18.9064 195.587 19.3404 195.545 19.7604 195.545 cv
20.7964 195.545 21.6224 195.783 22.2384 196.259 cv
22.8544 196.735 23.1624 197.379 23.1624 198.191 cv
23.1624 198.751 22.9944 199.227 22.6724 199.619 cv
22.3504 200.011 21.8884 200.291 21.3004 200.431 cv
f
31.5261 169.276 mo
28.0261 169.276 li
f
31.5261 169.276 mo
28.0261 169.276 li
@
6.71247 165.3 mo
5.99847 165.3 5.46647 165.65 5.10247 166.35 cv
4.73847 167.05 4.57047 168.1 4.57047 169.5 cv
4.57047 170.9 4.73847 171.95 5.10247 172.65 cv
5.46647 173.35 5.99847 173.7 6.71247 173.7 cv
7.42647 173.7 7.95847 173.35 8.32247 172.65 cv
8.67247 171.95 8.85447 170.9 8.85447 169.5 cv
8.85447 168.1 8.67247 167.05 8.32247 166.35 cv
7.95847 165.65 7.42647 165.3 6.71247 165.3 cv
6.71247 164.208 mo
7.84647 164.208 8.71447 164.67 9.33047 165.566 cv
9.93247 166.476 10.2405 167.792 10.2405 169.5 cv
10.2405 171.222 9.93247 172.538 9.33047 173.434 cv
8.71447 174.33 7.84647 174.778 6.71247 174.778 cv
5.56447 174.778 4.68247 174.33 4.08047 173.434 cv
3.47847 172.538 3.18447 171.222 3.18447 169.5 cv
3.18447 167.792 3.47847 166.476 4.08047 165.566 cv
4.68247 164.67 5.56447 164.208 6.71247 164.208 cv
f
12.6625 172.86 mo
14.1045 172.86 li
14.1045 174.596 li
12.6625 174.596 li
12.6625 172.86 li
f
20.9084 165.594 mo
17.4224 171.04 li
20.9084 171.04 li
20.9084 165.594 li
20.5444 164.39 mo
22.2804 164.39 li
22.2804 171.04 li
23.7364 171.04 li
23.7364 172.188 li
22.2804 172.188 li
22.2804 174.596 li
20.9084 174.596 li
20.9084 172.188 li
16.3024 172.188 li
16.3024 170.858 li
20.5444 164.39 li
f
31.5261 137.939 mo
28.0261 137.939 li
f
31.5261 137.939 mo
28.0261 137.939 li
@
6.71247 133.963 mo
5.99847 133.963 5.46647 134.313 5.10247 135.013 cv
4.73847 135.713 4.57047 136.763 4.57047 138.163 cv
4.57047 139.563 4.73847 140.613 5.10247 141.313 cv
5.46647 142.013 5.99847 142.363 6.71247 142.363 cv
7.42647 142.363 7.95847 142.013 8.32247 141.313 cv
8.67247 140.613 8.85447 139.563 8.85447 138.163 cv
8.85447 136.763 8.67247 135.713 8.32247 135.013 cv
7.95847 134.313 7.42647 133.963 6.71247 133.963 cv
6.71247 132.871 mo
7.84647 132.871 8.71447 133.333 9.33047 134.229 cv
9.93247 135.139 10.2405 136.455 10.2405 138.163 cv
10.2405 139.885 9.93247 141.201 9.33047 142.097 cv
8.71447 142.993 7.84647 143.441 6.71247 143.441 cv
5.56447 143.441 4.68247 142.993 4.08047 142.097 cv
3.47847 141.201 3.18447 139.885 3.18447 138.163 cv
3.18447 136.455 3.47847 135.139 4.08047 134.229 cv
4.68247 133.333 5.56447 132.871 6.71247 132.871 cv
f
12.6625 141.523 mo
14.1045 141.523 li
14.1045 143.259 li
12.6625 143.259 li
12.6625 141.523 li
f
17.1284 133.053 mo
22.5464 133.053 li
22.5464 134.215 li
18.3884 134.215 li
18.3884 136.721 li
18.5844 136.651 18.7944 136.595 18.9904 136.567 cv
19.1864 136.539 19.3964 136.511 19.5924 136.511 cv
20.7264 136.511 21.6224 136.833 22.2944 137.449 cv
22.9664 138.079 23.3024 138.919 23.3024 139.983 cv
23.3024 141.089 22.9524 141.943 22.2664 142.545 cv
21.5804 143.147 20.6144 143.441 19.3824 143.441 cv
18.9484 143.441 18.5144 143.399 18.0664 143.343 cv
17.6184 143.273 17.1704 143.175 16.6944 143.021 cv
16.6944 141.635 li
17.1004 141.859 17.5204 142.027 17.9684 142.139 cv
18.4024 142.251 18.8644 142.293 19.3544 142.293 cv
20.1384 142.293 20.7684 142.097 21.2304 141.677 cv
21.6784 141.257 21.9164 140.697 21.9164 139.983 cv
21.9164 139.283 21.6784 138.723 21.2304 138.303 cv
20.7684 137.883 20.1384 137.673 19.3544 137.673 cv
18.9904 137.673 18.6124 137.715 18.2484 137.799 cv
17.8844 137.883 17.5064 138.009 17.1284 138.177 cv
17.1284 133.053 li
f
31.5261 106.602 mo
28.0261 106.602 li
f
31.5261 106.602 mo
28.0261 106.602 li
@
6.71247 102.626 mo
5.99847 102.626 5.46647 102.976 5.10247 103.676 cv
4.73847 104.376 4.57047 105.426 4.57047 106.826 cv
4.57047 108.226 4.73847 109.276 5.10247 109.976 cv
5.46647 110.676 5.99847 111.026 6.71247 111.026 cv
7.42647 111.026 7.95847 110.676 8.32247 109.976 cv
8.67247 109.276 8.85447 108.226 8.85447 106.826 cv
8.85447 105.426 8.67247 104.376 8.32247 103.676 cv
7.95847 102.976 7.42647 102.626 6.71247 102.626 cv
6.71247 101.534 mo
7.84647 101.534 8.71447 101.996 9.33047 102.892 cv
9.93247 103.802 10.2405 105.118 10.2405 106.826 cv
10.2405 108.548 9.93247 109.864 9.33047 110.76 cv
8.71447 111.656 7.84647 112.104 6.71247 112.104 cv
5.56447 112.104 4.68247 111.656 4.08047 110.76 cv
3.47847 109.864 3.18447 108.548 3.18447 106.826 cv
3.18447 105.118 3.47847 103.802 4.08047 102.892 cv
4.68247 101.996 5.56447 101.534 6.71247 101.534 cv
f
12.6625 110.186 mo
14.1045 110.186 li
14.1045 111.922 li
12.6625 111.922 li
12.6625 110.186 li
f
20.2364 106.266 mo
19.6204 106.266 19.1304 106.49 18.7664 106.91 cv
18.4024 107.33 18.2204 107.918 18.2204 108.646 cv
18.2204 109.388 18.4024 109.976 18.7664 110.396 cv
19.1304 110.816 19.6204 111.026 20.2364 111.026 cv
20.8524 111.026 21.3424 110.816 21.7064 110.396 cv
22.0704 109.976 22.2524 109.388 22.2524 108.646 cv
22.2524 107.918 22.0704 107.33 21.7064 106.91 cv
21.3424 106.49 20.8524 106.266 20.2364 106.266 cv
22.9804 101.94 mo
22.9804 103.2 li
22.6304 103.032 22.2804 102.906 21.9304 102.822 cv
21.5664 102.738 21.2164 102.696 20.8804 102.696 cv
19.9564 102.696 19.2564 103.004 18.7804 103.62 cv
18.3044 104.236 18.0244 105.174 17.9684 106.406 cv
18.2344 106.014 18.5704 105.706 18.9764 105.496 cv
19.3824 105.286 19.8304 105.174 20.3204 105.174 cv
21.3424 105.174 22.1544 105.496 22.7424 106.112 cv
23.3304 106.728 23.6384 107.582 23.6384 108.646 cv
23.6384 109.696 23.3164 110.536 22.7004 111.166 cv
22.0844 111.796 21.2584 112.104 20.2364 112.104 cv
19.0604 112.104 18.1504 111.656 17.5344 110.76 cv
16.9044 109.864 16.5964 108.548 16.5964 106.826 cv
16.5964 105.216 16.9744 103.928 17.7444 102.976 cv
18.5004 102.024 19.5364 101.534 20.8244 101.534 cv
21.1604 101.534 21.5104 101.576 21.8744 101.632 cv
22.2244 101.702 22.5884 101.8 22.9804 101.94 cv
f
31.5261 75.2652 mo
28.0261 75.2652 li
f
31.5261 75.2652 mo
28.0261 75.2652 li
@
6.71247 71.2895 mo
5.99847 71.2895 5.46647 71.6395 5.10247 72.3395 cv
4.73847 73.0395 4.57047 74.0895 4.57047 75.4895 cv
4.57047 76.8895 4.73847 77.9395 5.10247 78.6395 cv
5.46647 79.3395 5.99847 79.6895 6.71247 79.6895 cv
7.42647 79.6895 7.95847 79.3395 8.32247 78.6395 cv
8.67247 77.9395 8.85447 76.8895 8.85447 75.4895 cv
8.85447 74.0895 8.67247 73.0395 8.32247 72.3395 cv
7.95847 71.6395 7.42647 71.2895 6.71247 71.2895 cv
6.71247 70.1975 mo
7.84647 70.1975 8.71447 70.6595 9.33047 71.5555 cv
9.93247 72.4655 10.2405 73.7815 10.2405 75.4895 cv
10.2405 77.2115 9.93247 78.5275 9.33047 79.4235 cv
8.71447 80.3195 7.84647 80.7675 6.71247 80.7675 cv
5.56447 80.7675 4.68247 80.3195 4.08047 79.4235 cv
3.47847 78.5275 3.18447 77.2115 3.18447 75.4895 cv
3.18447 73.7815 3.47847 72.4655 4.08047 71.5555 cv
4.68247 70.6595 5.56447 70.1975 6.71247 70.1975 cv
f
12.6625 78.8495 mo
14.1045 78.8495 li
14.1045 80.5855 li
12.6625 80.5855 li
12.6625 78.8495 li
f
16.7644 70.3795 mo
23.3304 70.3795 li
23.3304 70.9675 li
19.6204 80.5855 li
18.1784 80.5855 li
21.6644 71.5415 li
16.7644 71.5415 li
16.7644 70.3795 li
f
2 lc
0 lj
31.5261 263.286 mo
31.5261 59.5968 li
@
330.52 263.286 mo
330.52 59.5968 li
@
31.5261 263.286 mo
330.52 263.286 li
@
31.5261 59.5968 mo
330.52 59.5968 li
@
411.926 263.286 mo
710.92 263.286 li
710.92 59.5968 li
411.926 59.5968 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
424.692 294.623 mo
433.044 294.623 li
433.044 121.164 li
424.692 121.164 li
cp
f
1 lw
0 lc
424.692 294.623 mo
433.044 294.623 li
433.044 121.164 li
424.692 121.164 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
472.417 294.623 mo
480.769 294.623 li
480.769 145.156 li
472.417 145.156 li
cp
f
1 lw
0 lc
472.417 294.623 mo
480.769 294.623 li
480.769 145.156 li
472.417 145.156 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
520.141 294.623 mo
528.493 294.623 li
528.493 136.457 li
520.141 136.457 li
cp
f
1 lw
0 lc
520.141 294.623 mo
528.493 294.623 li
528.493 136.457 li
520.141 136.457 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
567.866 294.623 mo
576.218 294.623 li
576.218 136.798 li
567.866 136.798 li
cp
f
1 lw
0 lc
567.866 294.623 mo
576.218 294.623 li
576.218 136.798 li
567.866 136.798 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
615.59 294.623 mo
623.942 294.623 li
623.942 158.64 li
615.59 158.64 li
cp
f
1 lw
0 lc
615.59 294.623 mo
623.942 294.623 li
623.942 158.64 li
615.59 158.64 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
663.315 294.623 mo
671.667 294.623 li
671.667 118.968 li
663.315 118.968 li
cp
f
1 lw
0 lc
663.315 294.623 mo
671.667 294.623 li
671.667 118.968 li
663.315 118.968 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
433.044 294.623 mo
441.396 294.623 li
441.396 121.321 li
433.044 121.321 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
433.044 294.623 mo
441.396 294.623 li
441.396 121.321 li
433.044 121.321 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
480.769 294.623 mo
489.12 294.623 li
489.12 145.209 li
480.769 145.209 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
480.769 294.623 mo
489.12 294.623 li
489.12 145.209 li
480.769 145.209 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
528.493 294.623 mo
536.845 294.623 li
536.845 132.527 li
528.493 132.527 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
528.493 294.623 mo
536.845 294.623 li
536.845 132.527 li
528.493 132.527 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
576.218 294.623 mo
584.569 294.623 li
584.569 134.899 li
576.218 134.899 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
576.218 294.623 mo
584.569 294.623 li
584.569 134.899 li
576.218 134.899 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
623.942 294.623 mo
632.294 294.623 li
632.294 156.879 li
623.942 156.879 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
623.942 294.623 mo
632.294 294.623 li
632.294 156.879 li
623.942 156.879 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
411.926 263.286 mo
710.92 263.286 li
710.92 59.5969 li
411.926 59.5969 li
411.926 263.286 li
clp
671.667 294.623 mo
680.018 294.623 li
680.018 117.131 li
671.667 117.131 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1 lw
0 lc
671.667 294.623 mo
680.018 294.623 li
680.018 117.131 li
671.667 117.131 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
472.298 263.286 mo
472.298 266.786 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
472.298 263.286 mo
472.298 266.786 li
@
413.453 273.111 mo
413.067 274.298 li
412.67 273.923 412.289 273.621 411.917 273.377 cv
411.529 273.142 411.154 272.952 410.783 272.831 cv
410.115 272.614 409.552 272.581 409.113 272.712 cv
408.67 272.855 408.376 273.17 408.224 273.64 cv
408.095 274.035 408.106 274.381 408.289 274.659 cv
408.455 274.945 408.861 275.255 409.488 275.595 cv
410.182 275.985 li
411.028 276.451 411.595 276.977 411.887 277.55 cv
412.176 278.136 412.209 278.789 411.972 279.519 cv
411.687 280.397 411.177 280.956 410.452 281.212 cv
409.714 281.464 408.788 281.41 407.663 281.044 cv
407.23 280.903 406.789 280.705 406.335 280.462 cv
405.881 280.219 405.431 279.922 404.988 279.56 cv
405.398 278.299 li
405.8 278.744 406.214 279.11 406.639 279.399 cv
407.061 279.7 407.511 279.915 407.98 280.067 cv
408.673 280.292 409.249 280.329 409.72 280.181 cv
410.18 280.03 410.502 279.711 410.671 279.192 cv
410.815 278.747 410.792 278.356 410.6 278.021 cv
410.408 277.685 410.024 277.355 409.446 277.03 cv
408.752 276.641 li
407.893 276.171 407.33 275.673 407.051 275.145 cv
406.768 274.629 406.742 274.033 406.967 273.341 cv
407.225 272.55 407.701 272.008 408.419 271.735 cv
409.124 271.458 409.979 271.476 410.968 271.798 cv
411.388 271.934 411.797 272.108 412.218 272.327 cv
412.626 272.542 413.031 272.81 413.453 273.111 cv
f
416.94 274.285 mo
416.317 276.201 li
418.604 276.944 li
418.323 277.81 li
416.036 277.067 li
414.843 280.739 li
414.662 281.295 414.62 281.678 414.72 281.874 cv
414.816 282.083 415.101 282.258 415.571 282.41 cv
416.708 282.78 li
416.407 283.707 li
415.27 283.338 li
414.404 283.057 413.863 282.703 413.646 282.277 cv
413.429 281.851 413.457 281.218 413.73 280.377 cv
414.923 276.705 li
414.107 276.44 li
414.388 275.574 li
415.204 275.84 li
415.827 273.923 li
416.94 274.285 li
f
422.049 281.782 mo
421.147 281.488 420.492 281.399 420.082 281.484 cv
419.667 281.582 419.382 281.872 419.221 282.366 cv
419.093 282.762 419.112 283.124 419.299 283.43 cv
419.482 283.75 419.805 283.978 420.25 284.122 cv
420.868 284.323 421.431 284.274 421.946 283.949 cv
422.458 283.637 422.832 283.116 423.069 282.386 cv
423.15 282.139 li
422.049 281.782 li
424.411 282.043 mo
423.158 285.901 li
422.045 285.539 li
422.378 284.513 li
421.982 284.849 421.564 285.041 421.133 285.106 cv
420.702 285.171 420.2 285.117 419.656 284.941 cv
418.964 284.716 418.467 284.349 418.184 283.834 cv
417.9 283.318 417.871 282.734 418.084 282.079 cv
418.329 281.325 418.761 280.836 419.409 280.609 cv
420.041 280.391 420.859 280.438 421.873 280.768 cv
423.431 281.274 li
423.467 281.162 li
423.632 280.656 423.587 280.204 423.346 279.811 cv
423.1 279.43 422.679 279.129 422.073 278.932 cv
421.677 278.804 421.29 278.733 420.887 278.711 cv
420.484 278.69 420.094 278.713 419.704 278.778 cv
420.037 277.752 li
420.481 277.732 420.917 277.737 421.324 277.787 cv
421.731 277.837 422.118 277.908 422.489 278.029 cv
423.466 278.346 424.111 278.843 424.429 279.507 cv
424.746 280.17 424.744 281.017 424.411 282.043 cv
f
429.365 278.322 mo
428.743 280.239 li
431.03 280.982 li
430.749 281.847 li
428.462 281.104 li
427.268 284.776 li
427.088 285.332 427.045 285.715 427.145 285.912 cv
427.242 286.121 427.527 286.295 427.996 286.448 cv
429.134 286.817 li
428.833 287.745 li
427.695 287.375 li
426.83 287.094 426.288 286.74 426.071 286.314 cv
425.854 285.889 425.883 285.255 426.156 284.414 cv
427.349 280.742 li
426.533 280.477 li
426.814 279.612 li
427.63 279.877 li
428.253 277.961 li
429.365 278.322 li
f
432.489 281.456 mo
433.602 281.817 li
431.404 288.58 li
430.292 288.219 li
432.489 281.456 li
433.345 278.822 mo
434.457 279.184 li
433.999 280.593 li
432.887 280.232 li
433.345 278.822 li
f
440.177 284.172 mo
439.835 285.223 li
439.562 284.97 439.281 284.742 438.975 284.547 cv
438.653 284.361 438.323 284.199 437.964 284.082 cv
437.408 283.901 436.959 283.851 436.631 283.936 cv
436.303 284.021 436.087 284.224 435.978 284.558 cv
435.894 284.817 435.928 285.047 436.078 285.26 cv
436.228 285.473 436.575 285.75 437.128 286.066 cv
437.483 286.277 li
438.219 286.707 438.695 287.135 438.932 287.541 cv
439.153 287.954 439.185 288.443 439.009 288.987 cv
438.804 289.618 438.396 290.032 437.785 290.23 cv
437.17 290.44 436.421 290.388 435.556 290.107 cv
435.185 289.986 434.826 289.829 434.45 289.638 cv
434.075 289.448 433.699 289.216 433.314 288.928 cv
433.688 287.778 li
434.024 288.133 434.379 288.426 434.743 288.654 cv
435.102 288.893 435.482 289.071 435.878 289.2 cv
436.397 289.369 436.833 289.415 437.174 289.334 cv
437.502 289.249 437.735 289.038 437.843 288.704 cv
437.94 288.407 437.905 288.136 437.759 287.911 cv
437.613 287.686 437.221 287.381 436.576 287.008 cv
436.221 286.796 li
435.577 286.423 435.142 286.036 434.942 285.643 cv
434.729 285.246 434.714 284.789 434.886 284.258 cv
435.091 283.627 435.475 283.205 436.032 283.003 cv
436.59 282.802 437.289 282.838 438.13 283.111 cv
438.538 283.243 438.909 283.405 439.26 283.587 cv
439.598 283.766 439.904 283.961 440.177 284.172 cv
f
444.091 283.107 mo
443.468 285.023 li
445.755 285.766 li
445.474 286.632 li
443.187 285.888 li
441.994 289.56 li
441.813 290.117 441.77 290.5 441.871 290.696 cv
441.967 290.905 442.252 291.08 442.722 291.232 cv
443.859 291.602 li
443.558 292.529 li
442.42 292.16 li
441.555 291.878 441.014 291.525 440.797 291.099 cv
440.58 290.673 440.608 290.04 440.881 289.199 cv
442.074 285.527 li
441.258 285.262 li
441.539 284.396 li
442.355 284.661 li
442.978 282.745 li
444.091 283.107 li
f
447.214 286.24 mo
448.327 286.602 li
446.129 293.365 li
445.017 293.003 li
447.214 286.24 li
448.07 283.607 mo
449.182 283.968 li
448.724 285.378 li
447.612 285.016 li
448.07 283.607 li
f
455.438 289.199 mo
455.101 290.238 li
454.835 289.96 454.567 289.736 454.273 289.545 cv
453.98 289.354 453.687 289.204 453.365 289.1 cv
452.648 288.867 452.003 288.917 451.459 289.246 cv
450.915 289.575 450.508 290.154 450.243 290.97 cv
449.974 291.798 449.963 292.505 450.21 293.091 cv
450.457 293.677 450.953 294.085 451.67 294.318 cv
451.992 294.422 452.313 294.485 452.662 294.503 cv
453.012 294.521 453.365 294.486 453.743 294.417 cv
453.409 295.443 li
453.04 295.487 452.682 295.494 452.341 295.451 cv
451.987 295.405 451.616 295.325 451.245 295.205 cv
450.231 294.875 449.516 294.301 449.131 293.465 cv
448.73 292.638 448.715 291.676 449.068 290.588 cv
449.426 289.488 450.004 288.719 450.814 288.285 cv
451.625 287.851 452.558 287.799 453.621 288.144 cv
453.967 288.257 454.289 288.402 454.587 288.581 cv
454.884 288.76 455.173 288.963 455.438 289.199 cv
f
459.437 293.93 mo
458.535 293.636 457.88 293.547 457.47 293.632 cv
457.055 293.73 456.77 294.02 456.609 294.514 cv
456.48 294.91 456.5 295.272 456.687 295.579 cv
456.87 295.898 457.193 296.126 457.638 296.27 cv
458.256 296.471 458.819 296.422 459.334 296.097 cv
459.846 295.785 460.22 295.264 460.457 294.534 cv
460.538 294.287 li
459.437 293.93 li
461.799 294.191 mo
460.546 298.049 li
459.433 297.687 li
459.766 296.661 li
459.37 296.997 458.952 297.189 458.521 297.254 cv
458.09 297.319 457.588 297.265 457.044 297.089 cv
456.351 296.864 455.855 296.498 455.572 295.982 cv
455.288 295.466 455.259 294.882 455.472 294.227 cv
455.717 293.473 456.149 292.984 456.797 292.758 cv
457.429 292.539 458.247 292.586 459.261 292.916 cv
460.819 293.422 li
460.855 293.31 li
461.02 292.804 460.975 292.352 460.734 291.959 cv
460.488 291.578 460.067 291.277 459.461 291.081 cv
459.065 290.952 458.678 290.881 458.275 290.859 cv
457.872 290.838 457.482 290.861 457.092 290.926 cv
457.425 289.9 li
457.869 289.88 458.305 289.885 458.712 289.935 cv
459.119 289.985 459.506 290.057 459.877 290.177 cv
460.854 290.494 461.499 290.991 461.817 291.655 cv
462.134 292.318 462.132 293.165 461.799 294.191 cv
f
465.886 289.396 mo
466.999 289.757 li
463.946 299.154 li
462.833 298.792 li
465.886 289.396 li
f
469.687 295.661 mo
469.212 295.862 468.844 296.111 468.566 296.376 cv
468.288 296.642 468.089 296.96 467.977 297.306 cv
467.784 297.899 467.838 298.45 468.142 298.986 cv
468.434 299.518 468.917 299.88 469.56 300.089 cv
469.931 300.21 470.31 300.265 470.684 300.249 cv
471.058 300.234 471.444 300.141 471.825 299.978 cv
469.687 295.661 li
470.761 295.258 mo
472.807 299.395 li
473.154 299.125 473.464 298.802 473.733 298.438 cv
473.989 298.07 474.216 297.665 474.394 297.204 cv
475.519 297.569 li
475.296 298.085 474.992 298.56 474.613 299.011 cv
474.234 299.462 473.781 299.889 473.245 300.275 cv
474.368 302.54 li
472.848 302.046 li
472.271 300.875 li
471.73 301.109 471.201 301.224 470.687 301.248 cv
470.178 301.26 469.655 301.186 469.136 301.018 cv
468.159 300.7 467.456 300.171 467.015 299.426 cv
466.573 298.681 466.509 297.868 466.791 297.002 cv
466.959 296.483 467.24 296.041 467.656 295.684 cv
468.073 295.328 468.621 295.028 469.298 294.796 cv
469.181 294.485 469.117 294.177 469.098 293.897 cv
469.079 293.618 469.11 293.355 469.191 293.107 cv
469.4 292.465 469.795 292.005 470.369 291.754 cv
470.942 291.503 471.6 291.498 472.342 291.739 cv
472.676 291.848 472.997 291.993 473.307 292.176 cv
473.604 292.355 473.918 292.566 474.216 292.827 cv
473.859 293.927 li
473.561 293.625 473.275 293.368 472.986 293.165 cv
472.696 292.962 472.428 292.82 472.156 292.731 cv
471.736 292.595 471.353 292.594 471.021 292.732 cv
470.677 292.866 470.457 293.123 470.345 293.469 cv
470.276 293.679 470.257 293.905 470.317 294.143 cv
470.372 294.393 470.511 294.767 470.761 295.258 cv
f
478.892 294.045 mo
480.116 294.443 li
477.187 303.456 li
475.963 303.058 li
478.892 294.045 li
f
486.512 301.975 mo
485.186 306.055 li
484.074 305.694 li
485.387 301.651 li
485.596 301.008 485.613 300.494 485.47 300.092 cv
485.327 299.69 485.009 299.409 484.514 299.248 cv
483.908 299.051 483.374 299.097 482.903 299.367 cv
482.433 299.638 482.091 300.101 481.878 300.756 cv
480.637 304.577 li
479.524 304.215 li
481.721 297.452 li
482.834 297.814 li
482.493 298.865 li
482.881 298.553 483.29 298.345 483.725 298.268 cv
484.148 298.186 484.605 298.212 485.075 298.364 cv
485.841 298.613 486.354 299.053 486.593 299.664 cv
486.832 300.275 486.813 301.048 486.512 301.975 cv
f
493.877 298.491 mo
493.576 299.418 li
492.513 299.072 li
492.117 298.944 491.805 298.938 491.604 299.05 cv
491.391 299.159 491.225 299.419 491.088 299.84 cv
490.895 300.433 li
492.725 301.028 li
492.444 301.893 li
490.614 301.299 li
488.698 307.196 li
487.585 306.834 li
489.501 300.937 li
488.438 300.591 li
488.719 299.726 li
489.783 300.072 li
489.935 299.602 li
490.176 298.86 490.53 298.36 490.989 298.126 cv
491.447 297.892 492.06 297.9 492.827 298.149 cv
493.877 298.491 li
f
496.317 303.056 mo
495.724 302.863 495.178 302.945 494.679 303.303 cv
494.18 303.66 493.802 304.234 493.541 305.038 cv
493.276 305.854 493.232 306.537 493.425 307.119 cv
493.619 307.701 494.016 308.077 494.622 308.273 cv
495.215 308.466 495.758 308.396 496.256 308.039 cv
496.755 307.682 497.133 307.107 497.398 306.291 cv
497.655 305.5 497.691 304.801 497.498 304.219 cv
497.304 303.636 496.911 303.249 496.317 303.056 cv
496.622 302.116 mo
497.587 302.43 498.237 302.996 498.592 303.795 cv
498.931 304.602 498.934 305.56 498.573 306.673 cv
498.211 307.786 497.646 308.559 496.901 309 cv
496.14 309.45 495.285 309.514 494.321 309.201 cv
493.344 308.883 492.678 308.325 492.339 307.518 cv
491.995 306.723 492.005 305.769 492.366 304.656 cv
492.728 303.544 493.281 302.767 494.03 302.313 cv
494.775 301.871 495.646 301.799 496.622 302.116 cv
f
503.239 302.325 mo
502.616 304.241 li
504.903 304.985 li
504.622 305.85 li
502.335 305.107 li
501.142 308.779 li
500.961 309.335 500.919 309.718 501.019 309.914 cv
501.115 310.123 501.4 310.298 501.87 310.451 cv
503.007 310.82 li
502.706 311.748 li
501.569 311.378 li
500.703 311.097 500.162 310.743 499.945 310.317 cv
499.728 309.891 499.756 309.258 500.029 308.417 cv
501.222 304.745 li
500.406 304.48 li
500.687 303.615 li
501.503 303.88 li
502.126 301.964 li
503.239 302.325 li
f
511.116 309.969 mo
509.79 314.049 li
508.678 313.688 li
509.991 309.645 li
510.2 309.002 510.217 308.488 510.074 308.086 cv
509.931 307.684 509.612 307.403 509.118 307.242 cv
508.512 307.046 507.978 307.091 507.507 307.362 cv
507.037 307.632 506.695 308.095 506.482 308.751 cv
505.241 312.571 li
504.128 312.21 li
507.181 302.813 li
508.294 303.175 li
507.096 306.859 li
507.485 306.548 507.894 306.339 508.329 306.262 cv
508.752 306.181 509.209 306.206 509.679 306.358 cv
510.445 306.608 510.958 307.048 511.197 307.658 cv
511.436 308.269 511.417 309.042 511.116 309.969 cv
f
518.979 312.989 mo
518.802 313.533 li
513.696 311.874 li
513.496 312.656 513.526 313.322 513.818 313.854 cv
514.097 314.383 514.602 314.765 515.344 315.006 cv
515.764 315.143 516.2 315.23 516.628 315.26 cv
517.056 315.289 517.516 315.261 517.984 315.167 cv
517.643 316.218 li
517.191 316.263 516.739 316.266 516.294 316.204 cv
515.85 316.141 515.401 316.05 514.98 315.913 cv
513.892 315.56 513.14 314.974 512.71 314.151 cv
512.28 313.328 512.248 312.374 512.598 311.298 cv
512.955 310.198 513.537 309.417 514.344 308.954 cv
515.146 308.504 516.071 308.435 517.084 308.765 cv
517.999 309.062 518.62 309.592 518.963 310.346 cv
519.289 311.108 519.304 311.987 518.979 312.989 cv
517.971 312.306 mo
518.155 311.696 518.139 311.158 517.938 310.682 cv
517.72 310.215 517.336 309.885 516.792 309.708 cv
516.173 309.508 515.619 309.532 515.135 309.758 cv
514.652 309.984 514.268 310.406 514.014 311.02 cv
517.971 312.306 li
f
524.173 312.107 mo
523.579 311.914 523.033 311.996 522.534 312.354 cv
522.035 312.711 521.658 313.285 521.396 314.089 cv
521.131 314.905 521.087 315.588 521.281 316.17 cv
521.474 316.752 521.872 317.127 522.477 317.324 cv
523.071 317.517 523.613 317.447 524.112 317.09 cv
524.611 316.732 524.989 316.158 525.254 315.342 cv
525.511 314.551 525.547 313.852 525.353 313.269 cv
525.16 312.687 524.766 312.3 524.173 312.107 cv
524.478 311.167 mo
525.442 311.48 526.092 312.047 526.448 312.846 cv
526.787 313.653 526.79 314.611 526.428 315.724 cv
526.067 316.837 525.501 317.61 524.756 318.051 cv
523.995 318.501 523.141 318.565 522.176 318.251 cv
521.199 317.934 520.533 317.376 520.194 316.569 cv
519.851 315.774 519.86 314.82 520.222 313.707 cv
520.583 312.594 521.137 311.817 521.885 311.364 cv
522.63 310.922 523.501 310.85 524.478 311.167 cv
f
532.953 315.247 mo
532.854 315.132 532.734 315.039 532.597 314.953 cv
532.457 314.88 532.304 314.804 532.131 314.747 cv
531.501 314.542 530.95 314.596 530.484 314.895 cv
530.005 315.191 529.656 315.72 529.406 316.486 cv
528.25 320.047 li
527.137 319.686 li
529.334 312.923 li
530.447 313.284 li
530.106 314.335 li
530.461 313.999 530.87 313.791 531.305 313.713 cv
531.741 313.636 532.23 313.686 532.774 313.863 cv
532.848 313.887 532.931 313.927 533.03 313.959 cv
533.112 314 533.207 314.044 533.323 314.109 cv
532.953 315.247 li
f
534.873 322.883 mo
534.295 323.57 533.813 324.001 533.436 324.152 cv
533.059 324.303 532.623 324.298 532.128 324.137 cv
531.238 323.848 li
531.54 322.921 li
532.195 323.133 li
532.492 323.23 532.751 323.232 532.972 323.14 cv
533.193 323.048 533.487 322.774 533.874 322.298 cv
534.233 321.868 li
533.661 314.329 li
534.836 314.71 li
535.231 320.689 li
539.064 316.084 li
540.239 316.466 li
534.873 322.883 li
f
520.022 263.286 mo
520.022 266.786 li
f
520.022 263.286 mo
520.022 266.786 li
@
473.636 271.059 mo
475.454 271.649 li
475.761 278.529 li
480.065 273.148 li
481.883 273.738 li
478.954 282.751 li
477.767 282.366 li
480.339 274.453 li
476.005 279.879 li
474.781 279.482 li
474.466 272.545 li
471.895 280.457 li
470.708 280.072 li
473.636 271.059 li
f
485.894 278.39 mo
485.3 278.197 484.754 278.28 484.255 278.637 cv
483.756 278.994 483.378 279.569 483.117 280.372 cv
482.852 281.188 482.808 281.871 483.002 282.453 cv
483.195 283.036 483.593 283.411 484.198 283.608 cv
484.792 283.801 485.334 283.731 485.833 283.373 cv
486.332 283.016 486.71 282.442 486.975 281.626 cv
487.232 280.834 487.268 280.135 487.074 279.553 cv
486.881 278.971 486.487 278.583 485.894 278.39 cv
486.199 277.451 mo
487.163 277.764 487.813 278.33 488.169 279.129 cv
488.508 279.937 488.511 280.895 488.149 282.007 cv
487.788 283.12 487.222 283.893 486.477 284.334 cv
485.716 284.784 484.862 284.848 483.897 284.535 cv
482.92 284.218 482.254 283.659 481.915 282.852 cv
481.572 282.057 481.581 281.103 481.943 279.991 cv
482.304 278.878 482.858 278.101 483.606 277.647 cv
484.351 277.206 485.222 277.133 486.199 277.451 cv
f
495.21 281.691 mo
496.399 278.031 li
497.512 278.392 li
494.459 287.789 li
493.346 287.427 li
493.675 286.414 li
493.308 286.745 492.915 286.945 492.496 287.014 cv
492.077 287.083 491.625 287.046 491.13 286.885 cv
490.314 286.62 489.751 286.082 489.44 285.27 cv
489.13 284.458 489.164 283.512 489.509 282.449 cv
489.855 281.386 490.379 280.613 491.112 280.127 cv
491.84 279.652 492.616 279.535 493.432 279.801 cv
493.926 279.961 494.315 280.197 494.609 280.511 cv
494.903 280.825 495.103 281.219 495.21 281.691 cv
490.659 282.823 mo
490.394 283.639 490.346 284.334 490.527 284.912 cv
490.708 285.49 491.106 285.866 491.699 286.059 cv
492.28 286.247 492.81 286.173 493.309 285.816 cv
493.795 285.455 494.177 284.868 494.443 284.052 cv
494.708 283.236 494.739 282.549 494.558 281.971 cv
494.365 281.389 493.984 281.005 493.403 280.816 cv
492.809 280.623 492.263 280.706 491.776 281.067 cv
491.29 281.428 490.924 282.007 490.659 282.823 cv
f
503.721 286.752 mo
503.544 287.296 li
498.438 285.637 li
498.239 286.42 498.268 287.086 498.56 287.618 cv
498.84 288.146 499.344 288.529 500.086 288.77 cv
500.506 288.906 500.943 288.993 501.37 289.023 cv
501.798 289.053 502.258 289.025 502.726 288.931 cv
502.385 289.982 li
501.933 290.026 501.481 290.03 501.036 289.967 cv
500.592 289.905 500.143 289.814 499.723 289.677 cv
498.635 289.323 497.882 288.737 497.452 287.914 cv
497.023 287.091 496.991 286.138 497.34 285.062 cv
497.698 283.962 498.28 283.18 499.086 282.718 cv
499.888 282.268 500.813 282.199 501.827 282.528 cv
502.742 282.826 503.362 283.355 503.705 284.109 cv
504.032 284.871 504.047 285.751 503.721 286.752 cv
502.713 286.069 mo
502.897 285.46 502.881 284.921 502.68 284.446 cv
502.463 283.979 502.078 283.649 501.534 283.472 cv
500.916 283.271 500.361 283.296 499.877 283.522 cv
499.394 283.747 499.011 284.169 498.756 284.784 cv
502.713 286.069 li
f
507.403 281.606 mo
508.515 281.968 li
505.462 291.364 li
504.35 291.003 li
507.403 281.606 li
f
520.003 286.452 mo
519.617 287.639 li
519.22 287.264 518.839 286.962 518.467 286.719 cv
518.079 286.483 517.704 286.293 517.333 286.172 cv
516.665 285.955 516.102 285.923 515.663 286.053 cv
515.22 286.196 514.926 286.511 514.773 286.981 cv
514.645 287.377 514.656 287.722 514.839 288 cv
515.005 288.287 515.411 288.596 516.038 288.936 cv
516.732 289.326 li
517.578 289.792 518.145 290.318 518.437 290.892 cv
518.725 291.477 518.759 292.131 518.522 292.86 cv
518.237 293.738 517.727 294.297 517.002 294.553 cv
516.263 294.805 515.338 294.751 514.213 294.385 cv
513.78 294.245 513.339 294.046 512.885 293.803 cv
512.431 293.56 511.98 293.263 511.538 292.901 cv
511.948 291.64 li
512.35 292.085 512.764 292.452 513.189 292.74 cv
513.611 293.041 514.061 293.256 514.53 293.408 cv
515.223 293.633 515.799 293.67 516.27 293.523 cv
516.729 293.371 517.052 293.052 517.221 292.533 cv
517.365 292.088 517.342 291.697 517.15 291.362 cv
516.958 291.026 516.574 290.696 515.995 290.372 cv
515.302 289.982 li
514.443 289.512 513.88 289.014 513.601 288.486 cv
513.317 287.97 513.292 287.375 513.517 286.682 cv
513.774 285.891 514.251 285.349 514.969 285.076 cv
515.674 284.799 516.529 284.818 517.518 285.139 cv
517.938 285.275 518.347 285.449 518.768 285.668 cv
519.176 285.883 519.581 286.151 520.003 286.452 cv
f
523.49 287.626 mo
522.867 289.542 li
525.154 290.286 li
524.873 291.151 li
522.586 290.408 li
521.393 294.08 li
521.212 294.636 521.17 295.019 521.27 295.215 cv
521.366 295.424 521.651 295.599 522.121 295.752 cv
523.258 296.121 li
522.957 297.049 li
521.819 296.679 li
520.954 296.398 520.413 296.044 520.196 295.618 cv
519.979 295.192 520.007 294.559 520.28 293.718 cv
521.473 290.046 li
520.657 289.781 li
520.938 288.916 li
521.754 289.181 li
522.377 287.264 li
523.49 287.626 li
f
530.195 293.072 mo
530.095 292.957 529.976 292.864 529.839 292.778 cv
529.699 292.705 529.546 292.628 529.373 292.572 cv
528.743 292.367 528.192 292.421 527.726 292.72 cv
527.247 293.016 526.897 293.545 526.648 294.311 cv
525.491 297.872 li
524.379 297.51 li
526.576 290.748 li
527.689 291.109 li
527.347 292.16 li
527.702 291.824 528.112 291.616 528.547 291.538 cv
528.982 291.461 529.472 291.511 530.016 291.688 cv
530.09 291.712 530.173 291.752 530.272 291.784 cv
530.354 291.825 530.449 291.869 530.565 291.934 cv
530.195 293.072 li
f
530.254 296.467 mo
531.583 292.374 li
532.696 292.736 li
531.378 296.791 li
531.169 297.434 531.141 297.944 531.283 298.346 cv
531.426 298.748 531.745 299.029 532.252 299.194 cv
532.845 299.387 533.388 299.358 533.858 299.087 cv
534.329 298.816 534.671 298.353 534.888 297.686 cv
536.133 293.853 li
537.246 294.214 li
535.048 300.977 li
533.936 300.616 li
534.273 299.577 li
533.865 299.909 533.447 300.102 533.036 300.187 cv
532.617 300.256 532.177 300.222 531.708 300.069 cv
530.929 299.816 530.411 299.389 530.172 298.778 cv
529.917 298.176 529.948 297.407 530.254 296.467 cv
534.43 293.122 mo
534.43 293.122 li
f
544.32 296.8 mo
543.983 297.839 li
543.718 297.561 543.449 297.337 543.155 297.146 cv
542.862 296.955 542.569 296.805 542.247 296.701 cv
541.53 296.468 540.885 296.518 540.341 296.847 cv
539.797 297.176 539.39 297.754 539.125 298.57 cv
538.856 299.399 538.845 300.106 539.092 300.692 cv
539.339 301.278 539.835 301.685 540.552 301.918 cv
540.874 302.023 541.195 302.086 541.544 302.104 cv
541.894 302.122 542.247 302.086 542.625 302.017 cv
542.292 303.044 li
541.922 303.088 541.564 303.094 541.223 303.052 cv
540.869 303.005 540.498 302.926 540.127 302.805 cv
539.113 302.476 538.398 301.902 538.013 301.066 cv
537.612 300.238 537.597 299.277 537.95 298.189 cv
538.308 297.088 538.886 296.319 539.697 295.885 cv
540.507 295.452 541.44 295.399 542.503 295.745 cv
542.849 295.857 543.171 296.003 543.469 296.182 cv
543.766 296.36 544.055 296.564 544.32 296.8 cv
f
548.056 295.608 mo
547.434 297.525 li
549.721 298.268 li
549.44 299.133 li
547.152 298.39 li
545.959 302.062 li
545.779 302.618 545.736 303.001 545.836 303.198 cv
545.933 303.407 546.218 303.581 546.687 303.734 cv
547.825 304.103 li
547.524 305.031 li
546.386 304.661 li
545.521 304.38 544.979 304.026 544.762 303.6 cv
544.545 303.175 544.573 302.541 544.847 301.701 cv
546.04 298.029 li
545.224 297.763 li
545.505 296.898 li
546.321 297.163 li
546.944 295.247 li
548.056 295.608 li
f
549.739 302.798 mo
551.069 298.706 li
552.181 299.067 li
550.864 303.122 li
550.655 303.765 550.626 304.275 550.769 304.677 cv
550.911 305.079 551.23 305.36 551.737 305.525 cv
552.331 305.718 552.873 305.689 553.344 305.418 cv
553.814 305.147 554.156 304.684 554.373 304.017 cv
555.619 300.184 li
556.731 300.546 li
554.534 307.309 li
553.421 306.947 li
553.759 305.908 li
553.35 306.24 552.932 306.433 552.522 306.518 cv
552.103 306.587 551.663 306.553 551.193 306.401 cv
550.414 306.148 549.897 305.72 549.658 305.109 cv
549.402 304.507 549.434 303.738 549.739 302.798 cv
553.915 299.453 mo
553.915 299.453 li
f
562.6 303.601 mo
562.501 303.486 562.381 303.393 562.245 303.307 cv
562.104 303.234 561.952 303.158 561.779 303.101 cv
561.148 302.896 560.597 302.95 560.131 303.249 cv
559.652 303.545 559.303 304.074 559.054 304.84 cv
557.897 308.401 li
556.784 308.04 li
558.981 301.277 li
560.094 301.638 li
559.753 302.689 li
560.108 302.353 560.517 302.145 560.953 302.067 cv
561.388 301.99 561.877 302.04 562.421 302.217 cv
562.496 302.241 562.578 302.281 562.677 302.313 cv
562.76 302.354 562.854 302.398 562.97 302.463 cv
562.6 303.601 li
f
568.878 307.923 mo
568.701 308.467 li
563.595 306.808 li
563.395 307.591 563.425 308.256 563.717 308.789 cv
563.996 309.317 564.501 309.699 565.243 309.941 cv
565.663 310.077 566.099 310.164 566.527 310.194 cv
566.955 310.224 567.415 310.195 567.883 310.101 cv
567.542 311.152 li
567.09 311.197 566.638 311.2 566.193 311.138 cv
565.749 311.075 565.3 310.984 564.879 310.848 cv
563.791 310.494 563.039 309.908 562.609 309.085 cv
562.179 308.262 562.147 307.308 562.497 306.233 cv
562.854 305.132 563.436 304.351 564.243 303.888 cv
565.045 303.438 565.97 303.37 566.983 303.699 cv
567.898 303.996 568.519 304.526 568.862 305.28 cv
569.188 306.042 569.203 306.922 568.878 307.923 cv
567.87 307.24 mo
568.054 306.63 568.038 306.092 567.837 305.617 cv
567.619 305.15 567.235 304.819 566.691 304.643 cv
566.072 304.442 565.518 304.467 565.034 304.692 cv
564.551 304.918 564.168 305.34 563.913 305.955 cv
567.87 307.24 li
f
567.747 263.286 mo
567.747 266.786 li
f
567.747 263.286 mo
567.747 266.786 li
@
528.672 271.059 mo
529.896 271.456 li
527.301 279.443 li
531.69 280.869 li
531.357 281.896 li
525.744 280.072 li
528.672 271.059 li
f
536.764 279.894 mo
535.861 279.6 535.207 279.511 534.797 279.596 cv
534.382 279.694 534.097 279.984 533.936 280.478 cv
533.807 280.874 533.827 281.236 534.014 281.542 cv
534.197 281.862 534.52 282.09 534.965 282.234 cv
535.583 282.435 536.146 282.385 536.661 282.061 cv
537.173 281.749 537.547 281.228 537.784 280.498 cv
537.864 280.251 li
536.764 279.894 li
539.126 280.155 mo
537.872 284.013 li
536.76 283.651 li
537.093 282.625 li
536.697 282.961 536.279 283.153 535.848 283.218 cv
535.417 283.283 534.915 283.229 534.371 283.053 cv
533.678 282.828 533.182 282.461 532.899 281.946 cv
532.615 281.43 532.586 280.846 532.799 280.191 cv
533.044 279.437 533.476 278.948 534.124 278.721 cv
534.755 278.503 535.574 278.55 536.588 278.879 cv
538.146 279.386 li
538.182 279.274 li
538.346 278.767 538.302 278.316 538.06 277.923 cv
537.815 277.542 537.393 277.241 536.788 277.044 cv
536.392 276.916 536.005 276.845 535.602 276.823 cv
535.199 276.802 534.809 276.825 534.418 276.89 cv
534.752 275.864 li
535.196 275.844 535.632 275.849 536.039 275.899 cv
536.446 275.949 536.833 276.02 537.204 276.141 cv
538.181 276.458 538.826 276.955 539.143 277.619 cv
539.461 278.282 539.459 279.129 539.126 280.155 cv
f
547.111 282.504 mo
545.785 286.584 li
544.673 286.222 li
545.986 282.179 li
546.195 281.536 546.212 281.022 546.069 280.621 cv
545.926 280.219 545.607 279.938 545.113 279.777 cv
544.507 279.58 543.973 279.625 543.502 279.896 cv
543.031 280.167 542.69 280.63 542.477 281.285 cv
541.235 285.105 li
540.123 284.744 li
542.32 277.981 li
543.433 278.342 li
543.091 279.393 li
543.48 279.082 543.889 278.873 544.324 278.796 cv
544.747 278.715 545.204 278.74 545.673 278.893 cv
546.44 279.142 546.953 279.582 547.192 280.193 cv
547.431 280.803 547.412 281.576 547.111 282.504 cv
f
554.313 283.012 mo
555.502 279.353 li
556.615 279.714 li
553.562 289.111 li
552.449 288.749 li
552.779 287.735 li
552.411 288.067 552.018 288.267 551.599 288.336 cv
551.181 288.405 550.728 288.367 550.234 288.207 cv
549.417 287.942 548.854 287.403 548.544 286.592 cv
548.234 285.78 548.267 284.834 548.613 283.771 cv
548.958 282.708 549.483 281.935 550.215 281.448 cv
550.943 280.974 551.719 280.857 552.535 281.122 cv
553.03 281.283 553.418 281.518 553.712 281.833 cv
554.007 282.147 554.207 282.54 554.313 283.012 cv
549.763 284.144 mo
549.498 284.96 549.449 285.656 549.631 286.234 cv
549.812 286.812 550.209 287.187 550.803 287.38 cv
551.384 287.569 551.914 287.495 552.412 287.138 cv
552.899 286.776 553.281 286.19 553.546 285.374 cv
553.811 284.558 553.843 283.871 553.662 283.293 cv
553.468 282.71 553.087 282.327 552.506 282.138 cv
551.913 281.945 551.366 282.027 550.88 282.389 cv
550.393 282.75 550.028 283.328 549.763 284.144 cv
f
556.554 285.791 mo
559.806 286.847 li
559.485 287.836 li
556.233 286.78 li
556.554 285.791 li
f
563.291 282.307 mo
565.108 282.897 li
565.415 289.777 li
569.72 284.396 li
571.537 284.986 li
568.609 293.999 li
567.422 293.614 li
569.993 285.701 li
565.66 291.128 li
564.436 290.73 li
564.12 283.793 li
561.549 291.706 li
560.362 291.32 li
563.291 282.307 li
f
575.166 292.371 mo
574.263 292.078 573.609 291.988 573.198 292.074 cv
572.784 292.171 572.498 292.461 572.338 292.956 cv
572.209 293.351 572.228 293.713 572.416 294.02 cv
572.599 294.339 572.921 294.567 573.366 294.712 cv
573.985 294.912 574.547 294.863 575.063 294.538 cv
575.575 294.226 575.949 293.705 576.186 292.976 cv
576.266 292.729 li
575.166 292.371 li
577.528 292.633 mo
576.274 296.49 li
575.161 296.129 li
575.495 295.102 li
575.099 295.438 574.681 295.631 574.25 295.696 cv
573.818 295.761 573.316 295.707 572.772 295.53 cv
572.08 295.305 571.584 294.939 571.301 294.423 cv
571.017 293.907 570.988 293.324 571.201 292.668 cv
571.446 291.914 571.878 291.426 572.526 291.199 cv
573.157 290.98 573.976 291.028 574.99 291.357 cv
576.547 291.863 li
576.584 291.752 li
576.748 291.245 576.704 290.793 576.462 290.4 cv
576.217 290.02 575.795 289.719 575.189 289.522 cv
574.794 289.393 574.407 289.322 574.004 289.301 cv
573.601 289.279 573.21 289.303 572.82 289.367 cv
573.154 288.341 li
573.598 288.321 574.033 288.326 574.441 288.376 cv
574.848 288.427 575.235 288.498 575.606 288.618 cv
576.583 288.936 577.228 289.432 577.545 290.096 cv
577.863 290.76 577.861 291.607 577.528 292.633 cv
f
584.341 292.782 mo
584.241 292.668 584.121 292.574 583.985 292.489 cv
583.845 292.416 583.692 292.339 583.519 292.283 cv
582.888 292.078 582.338 292.132 581.872 292.431 cv
581.393 292.727 581.043 293.256 580.794 294.022 cv
579.637 297.583 li
578.525 297.221 li
580.722 290.458 li
581.835 290.82 li
581.493 291.871 li
581.848 291.535 582.258 291.326 582.693 291.249 cv
583.128 291.172 583.618 291.222 584.162 291.398 cv
584.236 291.422 584.319 291.463 584.417 291.495 cv
584.5 291.536 584.595 291.58 584.71 291.645 cv
584.341 292.782 li
f
586.659 289.476 mo
587.772 289.838 li
585.968 295.389 li
590.23 293.548 li
591.651 294.01 li
587.038 296.01 li
589.602 300.821 li
588.156 300.351 li
585.791 295.933 li
584.719 299.234 li
583.606 298.872 li
586.659 289.476 li
f
592.999 294.447 mo
594.112 294.809 li
591.914 301.572 li
590.802 301.21 li
592.999 294.447 li
593.855 291.814 mo
594.967 292.176 li
594.509 293.585 li
593.397 293.223 li
593.855 291.814 li
f
601.19 300.075 mo
599.864 304.155 li
598.751 303.793 li
600.065 299.751 li
600.274 299.108 600.291 298.594 600.148 298.192 cv
600.005 297.79 599.686 297.509 599.192 297.348 cv
598.586 297.151 598.052 297.196 597.581 297.467 cv
597.11 297.738 596.769 298.201 596.556 298.856 cv
595.314 302.677 li
594.202 302.315 li
596.399 295.552 li
597.512 295.914 li
597.17 296.965 li
597.558 296.653 597.968 296.445 598.403 296.367 cv
598.826 296.286 599.283 296.311 599.752 296.464 cv
600.519 296.713 601.032 297.153 601.271 297.764 cv
601.51 298.375 601.491 299.148 601.19 300.075 cv
f
607.653 302.858 mo
607.91 302.067 607.942 301.38 607.765 300.831 cv
607.576 300.277 607.178 299.902 606.585 299.709 cv
605.992 299.516 605.449 299.586 604.971 299.923 cv
604.493 300.26 604.127 300.838 603.87 301.629 cv
603.609 302.433 603.569 303.103 603.758 303.657 cv
603.947 304.21 604.344 304.586 604.938 304.778 cv
605.531 304.971 606.074 304.901 606.552 304.565 cv
607.018 304.224 607.392 303.662 607.653 302.858 cv
607.914 305.841 mo
607.545 306.979 607.008 307.747 606.316 308.151 cv
605.616 308.539 604.745 308.57 603.694 308.229 cv
603.298 308.1 602.952 307.947 602.622 307.785 cv
602.295 307.61 601.977 307.411 601.696 307.183 cv
602.046 306.108 li
602.311 306.385 602.592 306.613 602.885 306.804 cv
603.179 306.995 603.484 307.149 603.818 307.258 cv
604.535 307.491 605.143 307.47 605.635 307.219 cv
606.118 306.952 606.488 306.444 606.737 305.677 cv
606.914 305.133 li
606.55 305.453 606.157 305.653 605.734 305.734 cv
605.312 305.816 604.859 305.778 604.365 305.617 cv
603.524 305.344 602.957 304.818 602.655 304.023 cv
602.353 303.228 602.379 302.307 602.72 301.256 cv
603.057 300.217 603.578 299.457 604.29 298.991 cv
605.001 298.525 605.774 298.42 606.614 298.694 cv
607.109 298.854 607.497 299.09 607.791 299.404 cv
608.086 299.718 608.286 300.112 608.392 300.584 cv
608.726 299.557 li
609.838 299.919 li
607.914 305.841 li
f
615.471 263.286 mo
615.471 266.786 li
f
615.471 263.286 mo
615.471 266.786 li
@
566.655 272.458 mo
565.555 275.845 li
567.088 276.344 li
567.656 276.528 568.133 276.533 568.539 276.337 cv
568.944 276.14 569.242 275.772 569.418 275.228 cv
569.595 274.684 569.567 274.224 569.354 273.827 cv
569.142 273.43 568.757 273.141 568.188 272.956 cv
566.655 272.458 li
565.757 271.059 mo
568.514 271.954 li
569.515 272.28 570.205 272.764 570.576 273.39 cv
570.947 274.016 570.989 274.768 570.704 275.646 cv
570.415 276.536 569.934 277.132 569.27 277.408 cv
568.603 277.697 567.764 277.67 566.762 277.345 cv
565.229 276.847 li
564.052 280.469 li
562.828 280.072 li
565.757 271.059 li
f
576.013 278.027 mo
575.914 277.913 575.794 277.819 575.657 277.734 cv
575.517 277.661 575.364 277.584 575.191 277.528 cv
574.561 277.323 574.01 277.376 573.544 277.676 cv
573.065 277.971 572.716 278.5 572.466 279.267 cv
571.31 282.828 li
570.197 282.466 li
572.394 275.703 li
573.507 276.065 li
573.166 277.116 li
573.521 276.78 573.93 276.571 574.365 276.494 cv
574.801 276.417 575.29 276.466 575.834 276.643 cv
575.908 276.667 575.991 276.708 576.09 276.74 cv
576.172 276.78 576.267 276.825 576.383 276.89 cv
576.013 278.027 li
f
579.881 278.997 mo
579.287 278.804 578.741 278.886 578.242 279.244 cv
577.743 279.601 577.366 280.175 577.104 280.979 cv
576.839 281.795 576.795 282.478 576.989 283.06 cv
577.182 283.642 577.58 284.017 578.185 284.214 cv
578.779 284.407 579.321 284.337 579.82 283.98 cv
580.319 283.622 580.697 283.048 580.962 282.232 cv
581.219 281.441 581.255 280.742 581.061 280.159 cv
580.868 279.577 580.474 279.19 579.881 278.997 cv
580.186 278.057 mo
581.15 278.37 581.8 278.937 582.156 279.736 cv
582.495 280.543 582.498 281.501 582.136 282.614 cv
581.775 283.727 581.209 284.5 580.464 284.941 cv
579.703 285.391 578.849 285.455 577.884 285.142 cv
576.907 284.824 576.241 284.266 575.902 283.459 cv
575.559 282.664 575.568 281.71 575.93 280.597 cv
576.291 279.484 576.845 278.707 577.594 278.254 cv
578.338 277.812 579.209 277.74 580.186 278.057 cv
f
588.838 284.791 mo
589.103 283.975 589.134 283.288 588.953 282.71 cv
588.76 282.128 588.379 281.744 587.798 281.555 cv
587.204 281.363 586.67 281.449 586.184 281.81 cv
585.685 282.168 585.319 282.746 585.054 283.562 cv
584.789 284.378 584.741 285.073 584.935 285.655 cv
585.116 286.234 585.501 286.605 586.094 286.798 cv
586.675 286.986 587.205 286.913 587.704 286.555 cv
588.19 286.194 588.572 285.607 588.838 284.791 cv
585.822 281.2 mo
586.173 280.877 586.566 280.677 586.989 280.595 cv
587.411 280.514 587.876 280.556 588.371 280.716 cv
589.187 280.982 589.746 281.532 590.056 282.344 cv
590.35 283.164 590.333 284.101 589.987 285.165 cv
589.642 286.228 589.101 287.009 588.385 287.487 cv
587.657 287.962 586.885 288.066 586.069 287.801 cv
585.574 287.64 585.174 287.401 584.876 287.099 cv
584.577 286.797 584.377 286.404 584.287 285.923 cv
583.958 286.937 li
582.845 286.576 li
585.898 277.179 li
587.011 277.541 li
585.822 281.2 li
f
593.786 279.742 mo
594.899 280.104 li
591.846 289.5 li
590.733 289.139 li
593.786 279.742 li
f
601.145 288.476 mo
600.969 289.02 li
595.862 287.361 li
595.663 288.143 595.692 288.809 595.984 289.341 cv
596.264 289.869 596.768 290.252 597.51 290.493 cv
597.93 290.63 598.367 290.717 598.794 290.746 cv
599.222 290.776 599.683 290.748 600.15 290.654 cv
599.809 291.705 li
599.357 291.749 598.905 291.753 598.46 291.69 cv
598.016 291.628 597.567 291.537 597.147 291.4 cv
596.059 291.047 595.306 290.461 594.876 289.637 cv
594.447 288.814 594.415 287.861 594.764 286.785 cv
595.122 285.685 595.704 284.903 596.51 284.441 cv
597.313 283.991 598.237 283.922 599.251 284.252 cv
600.166 284.549 600.786 285.079 601.129 285.832 cv
601.456 286.595 601.471 287.474 601.145 288.476 cv
600.137 287.793 mo
600.321 287.183 600.305 286.644 600.104 286.169 cv
599.887 285.702 599.502 285.372 598.958 285.195 cv
598.34 284.994 597.785 285.019 597.302 285.245 cv
596.818 285.471 596.435 285.893 596.181 286.507 cv
600.137 287.793 li
f
608.816 288.973 mo
609.249 288.566 609.699 288.316 610.163 288.194 cv
610.622 288.083 611.12 288.108 611.652 288.281 cv
612.344 288.506 612.808 288.93 613.03 289.549 cv
613.253 290.168 613.222 290.937 612.929 291.84 cv
611.603 295.92 li
610.49 295.558 li
611.804 291.515 li
612.013 290.872 612.046 290.35 611.928 289.956 cv
611.793 289.571 611.499 289.298 611.029 289.145 cv
610.448 288.956 609.927 289.005 609.468 289.28 cv
609.01 289.555 608.68 290.022 608.467 290.677 cv
607.226 294.498 li
606.113 294.136 li
607.427 290.093 li
607.636 289.45 607.669 288.928 607.551 288.534 cv
607.416 288.149 607.11 287.871 606.64 287.719 cv
606.071 287.534 605.55 287.583 605.091 287.858 cv
604.633 288.133 604.304 288.6 604.091 289.255 cv
602.849 293.075 li
601.737 292.714 li
603.934 285.951 li
605.047 286.313 li
604.705 287.363 li
605.085 287.036 605.495 286.827 605.917 286.746 cv
606.328 286.66 606.78 286.698 607.275 286.859 cv
607.77 287.02 608.137 287.276 608.403 287.635 cv
608.669 287.995 608.796 288.446 608.816 288.973 cv
f
623.32 290.527 mo
622.902 291.813 li
622.602 291.306 622.262 290.881 621.856 290.53 cv
621.447 290.192 620.997 289.937 620.477 289.768 cv
619.439 289.43 618.543 289.495 617.794 289.949 cv
617.045 290.402 616.48 291.217 616.094 292.404 cv
615.709 293.59 615.683 294.594 616.022 295.401 cv
616.362 296.208 617.052 296.775 618.091 297.112 cv
618.61 297.281 619.121 297.351 619.655 297.306 cv
620.185 297.273 620.71 297.129 621.255 296.882 cv
620.841 298.156 li
620.312 298.312 619.786 298.374 619.272 298.357 cv
618.758 298.34 618.227 298.25 617.695 298.077 cv
616.335 297.635 615.392 296.878 614.87 295.792 cv
614.348 294.707 614.334 293.445 614.808 291.986 cv
615.278 290.539 616.031 289.526 617.096 288.943 cv
618.156 288.371 619.368 288.3 620.728 288.742 cv
621.272 288.919 621.755 289.158 622.181 289.447 cv
622.603 289.748 622.992 290.106 623.32 290.527 cv
f
627.011 294.31 mo
626.418 294.118 625.872 294.2 625.373 294.557 cv
624.874 294.914 624.496 295.489 624.235 296.292 cv
623.97 297.108 623.926 297.791 624.119 298.374 cv
624.313 298.956 624.71 299.331 625.316 299.528 cv
625.909 299.721 626.452 299.651 626.95 299.293 cv
627.449 298.936 627.827 298.362 628.092 297.546 cv
628.349 296.755 628.385 296.055 628.192 295.473 cv
627.998 294.891 627.605 294.503 627.011 294.31 cv
627.317 293.371 mo
628.281 293.684 628.931 294.251 629.286 295.049 cv
629.625 295.857 629.628 296.815 629.267 297.927 cv
628.905 299.04 628.34 299.813 627.595 300.255 cv
626.834 300.704 625.979 300.768 625.015 300.455 cv
624.038 300.138 623.372 299.58 623.033 298.772 cv
622.69 297.977 622.699 297.023 623.06 295.911 cv
623.422 294.798 623.975 294.021 624.724 293.567 cv
625.469 293.126 626.34 293.053 627.317 293.371 cv
f
637.055 298.148 mo
637.488 297.742 637.938 297.492 638.402 297.369 cv
638.861 297.258 639.359 297.284 639.891 297.456 cv
640.583 297.681 641.047 298.105 641.269 298.724 cv
641.492 299.343 641.461 300.112 641.167 301.015 cv
639.842 305.095 li
638.729 304.733 li
640.042 300.69 li
640.251 300.048 640.284 299.525 640.166 299.131 cv
640.032 298.746 639.738 298.473 639.268 298.32 cv
638.687 298.131 638.165 298.181 637.707 298.455 cv
637.249 298.73 636.919 299.197 636.706 299.853 cv
635.465 303.673 li
634.352 303.311 li
635.666 299.268 li
635.875 298.625 635.908 298.103 635.79 297.709 cv
635.655 297.324 635.349 297.047 634.879 296.894 cv
634.31 296.709 633.788 296.758 633.33 297.033 cv
632.872 297.308 632.542 297.775 632.329 298.43 cv
631.088 302.251 li
629.975 301.889 li
632.173 295.126 li
633.285 295.488 li
632.944 296.539 li
633.324 296.211 633.733 296.002 634.156 295.921 cv
634.567 295.836 635.019 295.873 635.514 296.034 cv
636.008 296.195 636.376 296.451 636.642 296.811 cv
636.908 297.171 637.035 297.622 637.055 298.148 cv
f
643.46 305.15 mo
642.299 308.723 li
641.186 308.361 li
644.215 299.039 li
645.328 299.401 li
644.994 300.427 li
645.345 300.103 645.739 299.903 646.161 299.822 cv
646.584 299.741 647.049 299.782 647.544 299.943 cv
648.36 300.208 648.919 300.759 649.229 301.57 cv
649.523 302.39 649.506 303.328 649.16 304.391 cv
648.815 305.454 648.274 306.236 647.558 306.714 cv
646.83 307.188 646.058 307.292 645.242 307.027 cv
644.747 306.867 644.347 306.627 644.048 306.325 cv
643.75 306.023 643.55 305.63 643.46 305.15 cv
648.01 304.018 mo
648.276 303.202 648.307 302.515 648.126 301.936 cv
647.933 301.354 647.551 300.971 646.97 300.782 cv
646.377 300.589 645.843 300.675 645.357 301.037 cv
644.858 301.394 644.492 301.972 644.227 302.788 cv
643.962 303.604 643.914 304.299 644.107 304.882 cv
644.288 305.46 644.674 305.831 645.267 306.024 cv
645.848 306.213 646.378 306.139 646.877 305.782 cv
647.363 305.42 647.745 304.834 648.01 304.018 cv
f
652.959 298.969 mo
654.071 299.33 li
651.018 308.727 li
649.906 308.365 li
652.959 298.969 li
f
660.318 307.702 mo
660.141 308.246 li
655.035 306.587 li
654.835 307.37 654.865 308.035 655.157 308.568 cv
655.436 309.096 655.941 309.478 656.683 309.72 cv
657.103 309.856 657.54 309.943 657.967 309.973 cv
658.395 310.003 658.855 309.974 659.323 309.88 cv
658.982 310.931 li
658.53 310.976 658.078 310.979 657.633 310.917 cv
657.189 310.854 656.74 310.763 656.32 310.627 cv
655.232 310.273 654.479 309.687 654.049 308.864 cv
653.62 308.041 653.588 307.087 653.937 306.012 cv
654.295 304.911 654.877 304.13 655.683 303.667 cv
656.485 303.217 657.41 303.149 658.424 303.478 cv
659.339 303.775 659.959 304.305 660.302 305.059 cv
660.629 305.821 660.643 306.701 660.318 307.702 cv
659.31 307.019 mo
659.494 306.409 659.478 305.871 659.277 305.396 cv
659.06 304.929 658.675 304.598 658.131 304.422 cv
657.513 304.221 656.958 304.246 656.474 304.471 cv
655.991 304.697 655.608 305.119 655.353 305.734 cv
659.31 307.019 li
f
668.769 307.017 mo
665.253 309.511 li
666.696 313.82 li
665.385 313.395 li
664.283 310.098 li
661.453 312.117 li
660.143 311.691 li
663.913 309.007 li
662.563 305.001 li
663.873 305.426 li
664.883 308.42 li
667.459 306.591 li
668.769 307.017 li
f
663.195 263.286 mo
663.195 266.786 li
f
663.195 263.286 mo
663.195 266.786 li
@
630.951 273.111 mo
630.565 274.298 li
630.168 273.923 629.787 273.621 629.415 273.377 cv
629.027 273.142 628.651 272.952 628.281 272.831 cv
627.613 272.614 627.049 272.581 626.61 272.712 cv
626.168 272.855 625.874 273.17 625.721 273.64 cv
625.593 274.035 625.604 274.381 625.787 274.659 cv
625.953 274.945 626.358 275.255 626.986 275.595 cv
627.68 275.985 li
628.526 276.451 629.093 276.977 629.385 277.55 cv
629.673 278.136 629.707 278.789 629.47 279.519 cv
629.185 280.397 628.675 280.956 627.949 281.212 cv
627.211 281.464 626.286 281.41 625.161 281.044 cv
624.728 280.903 624.287 280.705 623.833 280.462 cv
623.379 280.219 622.928 279.922 622.486 279.56 cv
622.895 278.299 li
623.298 278.744 623.711 279.11 624.137 279.399 cv
624.559 279.7 625.008 279.915 625.478 280.067 cv
626.171 280.292 626.746 280.329 627.218 280.181 cv
627.677 280.03 628 279.711 628.168 279.192 cv
628.313 278.747 628.29 278.356 628.098 278.021 cv
627.906 277.685 627.521 277.355 626.943 277.03 cv
626.25 276.641 li
625.391 276.171 624.828 275.673 624.549 275.145 cv
624.265 274.629 624.24 274.033 624.465 273.341 cv
624.722 272.55 625.199 272.008 625.917 271.735 cv
626.622 271.458 627.477 271.476 628.466 271.798 cv
628.886 271.934 629.295 272.108 629.716 272.327 cv
630.124 272.542 630.529 272.81 630.951 273.111 cv
f
634.438 274.285 mo
633.815 276.201 li
636.102 276.944 li
635.821 277.81 li
633.534 277.067 li
632.341 280.739 li
632.16 281.295 632.117 281.678 632.218 281.874 cv
632.314 282.083 632.599 282.258 633.069 282.41 cv
634.206 282.78 li
633.905 283.707 li
632.767 283.338 li
631.902 283.057 631.361 282.703 631.144 282.277 cv
630.927 281.851 630.955 281.218 631.228 280.377 cv
632.421 276.705 li
631.605 276.44 li
631.886 275.574 li
632.702 275.84 li
633.325 273.923 li
634.438 274.285 li
f
641.143 279.73 mo
641.043 279.616 640.923 279.522 640.787 279.437 cv
640.647 279.364 640.494 279.287 640.321 279.231 cv
639.69 279.026 639.14 279.08 638.674 279.379 cv
638.195 279.675 637.845 280.204 637.596 280.97 cv
636.439 284.531 li
635.327 284.169 li
637.524 277.406 li
638.637 277.768 li
638.295 278.819 li
638.65 278.483 639.06 278.274 639.495 278.197 cv
639.93 278.12 640.42 278.17 640.964 278.346 cv
641.038 278.37 641.121 278.411 641.219 278.443 cv
641.302 278.484 641.397 278.528 641.512 278.593 cv
641.143 279.73 li
f
641.202 283.126 mo
642.531 279.033 li
643.644 279.395 li
642.326 283.45 li
642.117 284.093 642.088 284.603 642.231 285.005 cv
642.374 285.407 642.693 285.688 643.2 285.853 cv
643.793 286.045 644.336 286.017 644.806 285.746 cv
645.277 285.475 645.619 285.012 645.836 284.344 cv
647.081 280.512 li
648.194 280.873 li
645.996 287.636 li
644.884 287.275 li
645.221 286.236 li
644.813 286.568 644.395 286.76 643.984 286.846 cv
643.565 286.915 643.125 286.881 642.655 286.728 cv
641.877 286.475 641.359 286.047 641.12 285.437 cv
640.865 284.834 640.896 284.065 641.202 283.126 cv
645.378 279.78 mo
645.378 279.78 li
f
655.268 283.459 mo
654.931 284.497 li
654.665 284.22 654.396 283.996 654.103 283.805 cv
653.81 283.614 653.517 283.464 653.195 283.359 cv
652.478 283.126 651.833 283.177 651.289 283.505 cv
650.745 283.834 650.338 284.413 650.073 285.229 cv
649.804 286.057 649.793 286.765 650.04 287.351 cv
650.287 287.937 650.783 288.344 651.5 288.577 cv
651.822 288.681 652.143 288.745 652.492 288.763 cv
652.842 288.78 653.195 288.745 653.573 288.676 cv
653.239 289.702 li
652.87 289.746 652.512 289.753 652.171 289.711 cv
651.817 289.664 651.446 289.585 651.075 289.464 cv
650.061 289.135 649.346 288.56 648.961 287.725 cv
648.56 286.897 648.545 285.935 648.898 284.847 cv
649.256 283.747 649.834 282.978 650.644 282.544 cv
651.455 282.111 652.388 282.058 653.451 282.404 cv
653.797 282.516 654.119 282.662 654.417 282.84 cv
654.714 283.019 655.003 283.222 655.268 283.459 cv
f
659.004 282.267 mo
658.382 284.183 li
660.669 284.927 li
660.388 285.792 li
658.1 285.049 li
656.907 288.721 li
656.727 289.277 656.684 289.66 656.784 289.856 cv
656.88 290.065 657.165 290.24 657.635 290.393 cv
658.773 290.762 li
658.471 291.69 li
657.334 291.32 li
656.469 291.039 655.927 290.685 655.71 290.259 cv
655.493 289.833 655.521 289.2 655.795 288.359 cv
656.988 284.687 li
656.172 284.422 li
656.453 283.557 li
657.269 283.822 li
657.892 281.905 li
659.004 282.267 li
f
660.687 289.457 mo
662.017 285.364 li
663.129 285.726 li
661.812 289.781 li
661.603 290.424 661.574 290.934 661.717 291.336 cv
661.859 291.738 662.178 292.019 662.685 292.184 cv
663.278 292.377 663.821 292.348 664.292 292.077 cv
664.762 291.806 665.104 291.343 665.321 290.676 cv
666.566 286.843 li
667.679 287.204 li
665.482 293.967 li
664.369 293.606 li
664.706 292.567 li
664.298 292.899 663.88 293.091 663.469 293.177 cv
663.051 293.246 662.611 293.212 662.141 293.059 cv
661.362 292.806 660.845 292.379 660.606 291.768 cv
660.35 291.165 660.382 290.396 660.687 289.457 cv
664.863 286.112 mo
664.863 286.112 li
f
673.548 290.26 mo
673.449 290.145 673.329 290.052 673.193 289.966 cv
673.052 289.893 672.899 289.816 672.726 289.76 cv
672.096 289.555 671.545 289.609 671.079 289.908 cv
670.6 290.204 670.251 290.733 670.002 291.499 cv
668.845 295.06 li
667.732 294.698 li
669.929 287.935 li
671.042 288.297 li
670.701 289.348 li
671.056 289.012 671.465 288.804 671.9 288.726 cv
672.336 288.649 672.825 288.699 673.369 288.875 cv
673.443 288.9 673.526 288.94 673.625 288.972 cv
673.707 289.013 673.802 289.057 673.918 289.122 cv
673.548 290.26 li
f
679.826 294.582 mo
679.649 295.126 li
674.543 293.467 li
674.343 294.249 674.373 294.915 674.665 295.447 cv
674.944 295.976 675.449 296.358 676.19 296.599 cv
676.611 296.736 677.047 296.823 677.475 296.853 cv
677.903 296.882 678.363 296.854 678.831 296.76 cv
678.49 297.811 li
678.038 297.856 677.585 297.859 677.141 297.797 cv
676.696 297.734 676.248 297.643 675.827 297.507 cv
674.739 297.153 673.987 296.567 673.557 295.744 cv
673.127 294.921 673.095 293.967 673.445 292.891 cv
673.802 291.791 674.384 291.01 675.191 290.547 cv
675.993 290.097 676.918 290.028 677.931 290.358 cv
678.846 290.655 679.467 291.185 679.81 291.939 cv
680.136 292.701 680.151 293.581 679.826 294.582 cv
678.817 293.899 mo
679.002 293.289 678.986 292.751 678.785 292.275 cv
678.567 291.808 678.182 291.478 677.638 291.301 cv
677.02 291.101 676.465 291.125 675.982 291.351 cv
675.499 291.577 675.115 291.999 674.861 292.613 cv
678.817 293.899 li
f
683.432 289.835 mo
684.656 290.233 li
681.728 299.246 li
680.504 298.848 li
683.432 289.835 li
f
691.053 297.765 mo
689.727 301.845 li
688.614 301.484 li
689.928 297.441 li
690.137 296.798 690.153 296.284 690.011 295.882 cv
689.868 295.48 689.549 295.199 689.055 295.038 cv
688.449 294.841 687.915 294.886 687.444 295.157 cv
686.973 295.428 686.631 295.891 686.418 296.546 cv
685.177 300.367 li
684.064 300.005 li
686.262 293.242 li
687.375 293.604 li
687.033 294.655 li
687.421 294.343 687.831 294.135 688.266 294.057 cv
688.689 293.976 689.145 294.001 689.615 294.154 cv
690.382 294.403 690.895 294.843 691.134 295.454 cv
691.373 296.065 691.354 296.838 691.053 297.765 cv
f
698.418 294.281 mo
698.117 295.208 li
697.053 294.862 li
696.658 294.734 696.345 294.728 696.145 294.84 cv
695.932 294.949 695.765 295.209 695.629 295.63 cv
695.436 296.223 li
697.266 296.818 li
696.984 297.683 li
695.155 297.088 li
693.238 302.986 li
692.126 302.624 li
694.042 296.727 li
692.979 296.381 li
693.26 295.516 li
694.323 295.861 li
694.476 295.392 li
694.717 294.65 695.071 294.15 695.529 293.916 cv
695.988 293.682 696.601 293.69 697.367 293.939 cv
698.418 294.281 li
f
700.858 298.846 mo
700.264 298.653 699.718 298.735 699.219 299.093 cv
698.72 299.45 698.342 300.024 698.081 300.828 cv
697.816 301.644 697.772 302.327 697.966 302.909 cv
698.159 303.491 698.557 303.867 699.162 304.063 cv
699.756 304.256 700.298 304.186 700.797 303.829 cv
701.296 303.472 701.674 302.897 701.939 302.081 cv
702.196 301.29 702.232 300.591 702.038 300.009 cv
701.845 299.426 701.451 299.039 700.858 298.846 cv
701.163 297.906 mo
702.127 298.22 702.777 298.786 703.133 299.585 cv
703.472 300.392 703.475 301.35 703.113 302.463 cv
702.752 303.576 702.186 304.349 701.441 304.79 cv
700.68 305.24 699.825 305.304 698.861 304.991 cv
697.884 304.673 697.218 304.115 696.879 303.308 cv
696.536 302.513 696.545 301.559 696.907 300.446 cv
697.268 299.334 697.821 298.556 698.57 298.103 cv
699.315 297.661 700.186 297.589 701.163 297.906 cv
f
710.92 263.286 mo
710.92 266.786 li
f
710.92 263.286 mo
710.92 266.786 li
@
681.172 273.944 mo
680.754 275.23 li
680.455 274.723 680.114 274.298 679.709 273.947 cv
679.299 273.609 678.849 273.354 678.33 273.185 cv
677.291 272.847 676.396 272.912 675.647 273.366 cv
674.898 273.819 674.333 274.634 673.947 275.82 cv
673.561 277.007 673.536 278.011 673.875 278.818 cv
674.214 279.625 674.905 280.191 675.944 280.529 cv
676.463 280.698 676.973 280.768 677.507 280.723 cv
678.037 280.69 678.563 280.546 679.107 280.299 cv
678.694 281.573 li
678.164 281.729 677.639 281.79 677.125 281.774 cv
676.611 281.757 676.08 281.667 675.548 281.494 cv
674.188 281.052 673.245 280.294 672.723 279.209 cv
672.201 278.124 672.187 276.862 672.661 275.403 cv
673.131 273.956 673.884 272.943 674.948 272.36 cv
676.009 271.788 677.221 271.717 678.581 272.159 cv
679.125 272.336 679.608 272.575 680.034 272.864 cv
680.455 273.165 680.844 273.523 681.172 273.944 cv
f
684.864 277.727 mo
684.27 277.534 683.724 277.617 683.225 277.974 cv
682.727 278.331 682.349 278.906 682.088 279.709 cv
681.822 280.525 681.778 281.208 681.972 281.79 cv
682.165 282.373 682.563 282.748 683.169 282.945 cv
683.762 283.138 684.304 283.068 684.803 282.71 cv
685.302 282.353 685.68 281.779 685.945 280.963 cv
686.202 280.171 686.238 279.472 686.044 278.89 cv
685.851 278.308 685.457 277.92 684.864 277.727 cv
685.169 276.788 mo
686.134 277.101 686.783 277.668 687.139 278.466 cv
687.478 279.274 687.481 280.232 687.12 281.344 cv
686.758 282.457 686.192 283.23 685.448 283.672 cv
684.686 284.121 683.832 284.185 682.867 283.872 cv
681.891 283.555 681.224 282.997 680.885 282.189 cv
680.542 281.394 680.551 280.44 680.913 279.328 cv
681.275 278.215 681.828 277.438 682.577 276.984 cv
683.322 276.543 684.193 276.47 685.169 276.788 cv
f
694.908 281.565 mo
695.34 281.159 695.791 280.909 696.254 280.786 cv
696.714 280.675 697.211 280.7 697.743 280.873 cv
698.435 281.098 698.899 281.522 699.122 282.141 cv
699.344 282.76 699.313 283.529 699.02 284.432 cv
697.694 288.512 li
696.581 288.15 li
697.895 284.107 li
698.104 283.465 698.137 282.942 698.019 282.548 cv
697.884 282.163 697.591 281.89 697.121 281.737 cv
696.54 281.548 696.018 281.597 695.56 281.872 cv
695.101 282.147 694.772 282.614 694.559 283.269 cv
693.318 287.09 li
692.205 286.728 li
693.518 282.685 li
693.727 282.042 693.76 281.52 693.642 281.126 cv
693.508 280.741 693.201 280.464 692.732 280.311 cv
692.163 280.126 691.641 280.175 691.183 280.45 cv
690.724 280.725 690.395 281.192 690.182 281.847 cv
688.941 285.668 li
687.828 285.306 li
690.025 278.543 li
691.138 278.905 li
690.797 279.956 li
691.177 279.628 691.586 279.419 692.009 279.338 cv
692.419 279.253 692.872 279.29 693.366 279.451 cv
693.861 279.612 694.229 279.868 694.495 280.228 cv
694.76 280.587 694.887 281.039 694.908 281.565 cv
f
705.863 287.434 mo
706.128 286.618 706.16 285.932 705.979 285.353 cv
705.785 284.771 705.404 284.388 704.823 284.199 cv
704.229 284.006 703.696 284.092 703.209 284.454 cv
702.71 284.811 702.345 285.389 702.08 286.205 cv
701.815 287.021 701.766 287.716 701.96 288.299 cv
702.141 288.877 702.526 289.248 703.12 289.441 cv
703.701 289.63 704.231 289.556 704.729 289.199 cv
705.216 288.837 705.598 288.25 705.863 287.434 cv
702.847 283.844 mo
703.198 283.52 703.591 283.32 704.014 283.239 cv
704.437 283.157 704.902 283.199 705.396 283.36 cv
706.212 283.625 706.771 284.176 707.082 284.987 cv
707.376 285.807 707.358 286.745 707.013 287.808 cv
706.667 288.871 706.126 289.652 705.411 290.131 cv
704.682 290.605 703.91 290.709 703.094 290.444 cv
702.6 290.284 702.199 290.044 701.901 289.742 cv
701.603 289.44 701.402 289.047 701.312 288.567 cv
700.983 289.581 li
699.87 289.219 li
702.923 279.823 li
704.036 280.184 li
702.847 283.844 li
f
709.956 285.019 mo
711.068 285.38 li
708.871 292.143 li
707.758 291.782 li
709.956 285.019 li
710.811 282.385 mo
711.924 282.747 li
711.466 284.156 li
710.353 283.795 li
710.811 282.385 li
f
718.147 290.647 mo
716.821 294.727 li
715.708 294.365 li
717.022 290.322 li
717.231 289.679 717.247 289.165 717.104 288.763 cv
716.962 288.362 716.643 288.08 716.148 287.92 cv
715.543 287.723 715.008 287.768 714.538 288.039 cv
714.067 288.31 713.725 288.773 713.512 289.428 cv
712.271 293.248 li
711.158 292.887 li
713.356 286.124 li
714.468 286.485 li
714.127 287.536 li
714.515 287.225 714.925 287.016 715.36 286.939 cv
715.783 286.858 716.239 286.883 716.709 287.036 cv
717.476 287.285 717.989 287.725 718.228 288.335 cv
718.467 288.946 718.448 289.719 718.147 290.647 cv
f
723.217 293.046 mo
722.315 292.753 721.66 292.663 721.25 292.748 cv
720.836 292.846 720.55 293.136 720.389 293.631 cv
720.261 294.026 720.28 294.388 720.467 294.695 cv
720.651 295.014 720.973 295.242 721.418 295.386 cv
722.036 295.587 722.599 295.538 723.115 295.213 cv
723.626 294.901 724 294.38 724.237 293.651 cv
724.318 293.403 li
723.217 293.046 li
725.579 293.308 mo
724.326 297.165 li
723.213 296.803 li
723.546 295.777 li
723.15 296.113 722.732 296.306 722.301 296.371 cv
721.87 296.435 721.368 296.382 720.824 296.205 cv
720.132 295.98 719.635 295.614 719.352 295.098 cv
719.069 294.582 719.039 293.999 719.252 293.343 cv
719.497 292.589 719.93 292.101 720.577 291.874 cv
721.209 291.655 722.027 291.702 723.041 292.032 cv
724.599 292.538 li
724.635 292.427 li
724.8 291.92 724.755 291.468 724.514 291.075 cv
724.268 290.695 723.847 290.394 723.241 290.197 cv
722.845 290.068 722.458 289.997 722.055 289.976 cv
721.652 289.954 721.262 289.977 720.872 290.042 cv
721.205 289.016 li
721.649 288.996 722.085 289.001 722.492 289.051 cv
722.9 289.102 723.287 289.173 723.657 289.293 cv
724.634 289.611 725.279 290.107 725.597 290.771 cv
725.914 291.434 725.912 292.281 725.579 293.308 cv
f
730.534 289.586 mo
729.911 291.503 li
732.198 292.246 li
731.917 293.111 li
729.63 292.368 li
728.437 296.04 li
728.256 296.597 728.213 296.979 728.314 297.176 cv
728.41 297.385 728.695 297.559 729.165 297.712 cv
730.302 298.082 li
730.001 299.009 li
728.863 298.639 li
727.998 298.358 727.457 298.005 727.24 297.579 cv
727.023 297.153 727.051 296.519 727.324 295.679 cv
728.517 292.007 li
727.701 291.742 li
727.982 290.876 li
728.798 291.141 li
729.421 289.225 li
730.534 289.586 li
f
733.657 292.72 mo
734.77 293.082 li
732.572 299.845 li
731.46 299.483 li
733.657 292.72 li
734.513 290.087 mo
735.625 290.448 li
735.167 291.858 li
734.055 291.496 li
734.513 290.087 li
f
739.462 295.467 mo
738.869 295.275 738.323 295.357 737.824 295.714 cv
737.325 296.071 736.947 296.646 736.686 297.449 cv
736.421 298.265 736.377 298.948 736.57 299.531 cv
736.764 300.113 737.161 300.488 737.767 300.685 cv
738.36 300.878 738.903 300.808 739.401 300.45 cv
739.9 300.093 740.278 299.519 740.543 298.703 cv
740.8 297.912 740.836 297.212 740.643 296.63 cv
740.449 296.048 740.056 295.66 739.462 295.467 cv
739.768 294.528 mo
740.732 294.841 741.382 295.408 741.737 296.207 cv
742.076 297.014 742.079 297.972 741.718 299.084 cv
741.356 300.197 740.791 300.97 740.046 301.412 cv
739.285 301.861 738.43 301.925 737.466 301.612 cv
736.489 301.295 735.823 300.737 735.484 299.929 cv
735.141 299.134 735.15 298.181 735.511 297.068 cv
735.873 295.955 736.426 295.178 737.175 294.724 cv
737.92 294.283 738.791 294.21 739.768 294.528 cv
f
749.415 300.806 mo
748.089 304.886 li
746.976 304.525 li
748.29 300.482 li
748.499 299.839 748.515 299.325 748.372 298.923 cv
748.23 298.521 747.911 298.24 747.416 298.079 cv
746.811 297.882 746.276 297.927 745.806 298.198 cv
745.335 298.469 744.993 298.932 744.78 299.587 cv
743.539 303.408 li
742.426 303.046 li
744.624 296.283 li
745.736 296.645 li
745.395 297.696 li
745.783 297.384 746.193 297.176 746.628 297.098 cv
747.051 297.017 747.507 297.042 747.977 297.195 cv
748.744 297.444 749.257 297.884 749.496 298.495 cv
749.735 299.106 749.716 299.879 749.415 300.806 cv
f
525.74 329.922 mo
525.124 330.986 524.676 332.022 524.382 333.044 cv
524.074 334.066 523.934 335.102 523.934 336.152 cv
523.934 337.216 524.074 338.252 524.382 339.274 cv
524.676 340.31 525.124 341.332 525.74 342.382 cv
524.648 342.382 li
523.962 341.304 523.444 340.268 523.108 339.232 cv
522.772 338.196 522.604 337.174 522.604 336.152 cv
522.604 335.144 522.772 334.122 523.108 333.086 cv
523.444 332.05 523.948 331 524.648 329.922 cv
525.74 329.922 li
f
533.678 336.726 mo
533.678 335.802 533.482 335.088 533.104 334.556 cv
532.712 334.024 532.194 333.758 531.536 333.758 cv
530.864 333.758 530.346 334.024 529.968 334.556 cv
529.576 335.088 529.394 335.802 529.394 336.726 cv
529.394 337.65 529.576 338.378 529.968 338.91 cv
530.346 339.442 530.864 339.694 531.536 339.694 cv
532.194 339.694 532.712 339.442 533.104 338.91 cv
533.482 338.378 533.678 337.65 533.678 336.726 cv
529.394 334.052 mo
529.646 333.604 529.982 333.268 530.388 333.044 cv
530.794 332.82 531.284 332.708 531.844 332.708 cv
532.768 332.708 533.524 333.086 534.112 333.814 cv
534.686 334.556 534.98 335.522 534.98 336.726 cv
534.98 337.93 534.686 338.91 534.112 339.638 cv
533.524 340.366 532.768 340.73 531.844 340.73 cv
531.284 340.73 530.794 340.618 530.388 340.408 cv
529.982 340.198 529.646 339.862 529.394 339.4 cv
529.394 340.548 li
528.134 340.548 li
528.134 329.908 li
529.394 329.908 li
529.394 334.052 li
f
536.87 329.922 mo
537.961 329.922 li
538.633 331 539.151 332.05 539.487 333.086 cv
539.823 334.122 540.005 335.144 540.005 336.152 cv
540.005 337.174 539.823 338.196 539.487 339.232 cv
539.151 340.268 538.633 341.304 537.961 342.382 cv
536.87 342.382 li
537.471 341.332 537.919 340.31 538.228 339.274 cv
538.521 338.252 538.676 337.216 538.676 336.152 cv
538.676 335.102 538.521 334.066 538.228 333.044 cv
537.919 332.022 537.471 330.986 536.87 329.922 cv
f
545.997 331.7 mo
544.121 336.782 li
547.873 336.782 li
545.997 331.7 li
545.214 330.342 mo
546.781 330.342 li
550.673 340.548 li
549.231 340.548 li
548.307 337.93 li
543.701 337.93 li
542.777 340.548 li
541.321 340.548 li
545.214 330.342 li
f
557.002 335.76 mo
557.296 335.872 557.59 336.082 557.87 336.404 cv
558.15 336.74 558.43 337.188 558.71 337.762 cv
560.11 340.548 li
558.626 340.548 li
557.324 337.93 li
556.988 337.258 556.652 336.796 556.344 336.572 cv
556.022 336.348 555.588 336.236 555.042 336.236 cv
553.544 336.236 li
553.544 340.548 li
552.158 340.548 li
552.158 330.342 li
555.28 330.342 li
556.442 330.342 557.31 330.594 557.884 331.07 cv
558.458 331.56 558.752 332.302 558.752 333.282 cv
558.752 333.926 558.598 334.472 558.304 334.892 cv
557.996 335.312 557.562 335.606 557.002 335.76 cv
553.544 331.476 mo
553.544 335.102 li
555.28 335.102 li
555.938 335.102 556.442 334.948 556.778 334.64 cv
557.114 334.332 557.296 333.884 557.296 333.282 cv
557.296 332.694 557.114 332.246 556.778 331.938 cv
556.442 331.63 555.938 331.476 555.28 331.476 cv
553.544 331.476 li
f
566.732 335.76 mo
567.026 335.872 567.32 336.082 567.6 336.404 cv
567.88 336.74 568.16 337.188 568.44 337.762 cv
569.84 340.548 li
568.356 340.548 li
567.054 337.93 li
566.718 337.258 566.382 336.796 566.074 336.572 cv
565.752 336.348 565.318 336.236 564.772 336.236 cv
563.274 336.236 li
563.274 340.548 li
561.888 340.548 li
561.888 330.342 li
565.01 330.342 li
566.172 330.342 567.04 330.594 567.614 331.07 cv
568.188 331.56 568.482 332.302 568.482 333.282 cv
568.482 333.926 568.328 334.472 568.034 334.892 cv
567.726 335.312 567.292 335.606 566.732 335.76 cv
563.274 331.476 mo
563.274 335.102 li
565.01 335.102 li
565.668 335.102 566.172 334.948 566.508 334.64 cv
566.844 334.332 567.026 333.884 567.026 333.282 cv
567.026 332.694 566.844 332.246 566.508 331.938 cv
566.172 331.63 565.668 331.476 565.01 331.476 cv
563.274 331.476 li
f
574.698 331.252 mo
573.984 331.252 573.452 331.602 573.088 332.302 cv
572.724 333.002 572.556 334.052 572.556 335.452 cv
572.556 336.852 572.724 337.902 573.088 338.602 cv
573.452 339.302 573.984 339.652 574.698 339.652 cv
575.412 339.652 575.944 339.302 576.308 338.602 cv
576.658 337.902 576.84 336.852 576.84 335.452 cv
576.84 334.052 576.658 333.002 576.308 332.302 cv
575.944 331.602 575.412 331.252 574.698 331.252 cv
574.698 330.16 mo
575.832 330.16 576.7 330.622 577.316 331.518 cv
577.918 332.428 578.226 333.744 578.226 335.452 cv
578.226 337.174 577.918 338.49 577.316 339.386 cv
576.7 340.282 575.832 340.73 574.698 340.73 cv
573.55 340.73 572.668 340.282 572.066 339.386 cv
571.464 338.49 571.17 337.174 571.17 335.452 cv
571.17 333.744 571.464 332.428 572.066 331.518 cv
572.668 330.622 573.55 330.16 574.698 330.16 cv
f
580.648 338.812 mo
582.09 338.812 li
582.09 340.548 li
580.648 340.548 li
580.648 338.812 li
f
588.054 331.252 mo
587.34 331.252 586.808 331.602 586.444 332.302 cv
586.08 333.002 585.912 334.052 585.912 335.452 cv
585.912 336.852 586.08 337.902 586.444 338.602 cv
586.808 339.302 587.34 339.652 588.054 339.652 cv
588.768 339.652 589.3 339.302 589.664 338.602 cv
590.014 337.902 590.196 336.852 590.196 335.452 cv
590.196 334.052 590.014 333.002 589.664 332.302 cv
589.3 331.602 588.768 331.252 588.054 331.252 cv
588.054 330.16 mo
589.188 330.16 590.056 330.622 590.672 331.518 cv
591.274 332.428 591.582 333.744 591.582 335.452 cv
591.582 337.174 591.274 338.49 590.672 339.386 cv
590.056 340.282 589.188 340.73 588.054 340.73 cv
586.906 340.73 586.024 340.282 585.422 339.386 cv
584.82 338.49 584.526 337.174 584.526 335.452 cv
584.526 333.744 584.82 332.428 585.422 331.518 cv
586.024 330.622 586.906 330.16 588.054 330.16 cv
f
594.018 330.342 mo
599.436 330.342 li
599.436 331.504 li
595.278 331.504 li
595.278 334.01 li
595.474 333.94 595.684 333.884 595.88 333.856 cv
596.076 333.828 596.286 333.8 596.482 333.8 cv
597.616 333.8 598.512 334.122 599.184 334.738 cv
599.856 335.368 600.192 336.208 600.192 337.272 cv
600.192 338.378 599.842 339.232 599.156 339.834 cv
598.47 340.436 597.504 340.73 596.272 340.73 cv
595.838 340.73 595.404 340.688 594.956 340.632 cv
594.508 340.562 594.06 340.464 593.584 340.31 cv
593.584 338.924 li
593.99 339.148 594.41 339.316 594.858 339.428 cv
595.292 339.54 595.754 339.582 596.244 339.582 cv
597.028 339.582 597.658 339.386 598.12 338.966 cv
598.568 338.546 598.806 337.986 598.806 337.272 cv
598.806 336.572 598.568 336.012 598.12 335.592 cv
597.658 335.172 597.028 334.962 596.244 334.962 cv
595.88 334.962 595.502 335.004 595.138 335.088 cv
594.774 335.172 594.396 335.298 594.018 335.466 cv
594.018 330.342 li
f
411.926 263.286 mo
408.426 263.286 li
f
411.926 263.286 mo
408.426 263.286 li
@
387.112 259.311 mo
386.398 259.311 385.866 259.661 385.502 260.361 cv
385.138 261.061 384.97 262.111 384.97 263.511 cv
384.97 264.911 385.138 265.961 385.502 266.661 cv
385.866 267.361 386.398 267.711 387.112 267.711 cv
387.826 267.711 388.358 267.361 388.722 266.661 cv
389.072 265.961 389.254 264.911 389.254 263.511 cv
389.254 262.111 389.072 261.061 388.722 260.361 cv
388.358 259.661 387.826 259.311 387.112 259.311 cv
387.112 258.219 mo
388.246 258.219 389.114 258.681 389.73 259.577 cv
390.332 260.487 390.64 261.803 390.64 263.511 cv
390.64 265.233 390.332 266.549 389.73 267.445 cv
389.114 268.341 388.246 268.789 387.112 268.789 cv
385.964 268.789 385.082 268.341 384.48 267.445 cv
383.878 266.549 383.584 265.233 383.584 263.511 cv
383.584 261.803 383.878 260.487 384.48 259.577 cv
385.082 258.681 385.964 258.219 387.112 258.219 cv
f
393.062 266.871 mo
394.504 266.871 li
394.504 268.607 li
393.062 268.607 li
393.062 266.871 li
f
397.752 267.445 mo
400.006 267.445 li
400.006 259.661 li
397.556 260.151 li
397.556 258.891 li
399.992 258.401 li
401.378 258.401 li
401.378 267.445 li
403.632 267.445 li
403.632 268.607 li
397.752 268.607 li
397.752 267.445 li
f
411.926 231.95 mo
408.426 231.95 li
f
411.926 231.95 mo
408.426 231.95 li
@
387.112 227.974 mo
386.398 227.974 385.866 228.324 385.502 229.024 cv
385.138 229.724 384.97 230.774 384.97 232.174 cv
384.97 233.574 385.138 234.624 385.502 235.324 cv
385.866 236.024 386.398 236.374 387.112 236.374 cv
387.826 236.374 388.358 236.024 388.722 235.324 cv
389.072 234.624 389.254 233.574 389.254 232.174 cv
389.254 230.774 389.072 229.724 388.722 229.024 cv
388.358 228.324 387.826 227.974 387.112 227.974 cv
387.112 226.882 mo
388.246 226.882 389.114 227.344 389.73 228.24 cv
390.332 229.15 390.64 230.466 390.64 232.174 cv
390.64 233.896 390.332 235.212 389.73 236.108 cv
389.114 237.004 388.246 237.452 387.112 237.452 cv
385.964 237.452 385.082 237.004 384.48 236.108 cv
383.878 235.212 383.584 233.896 383.584 232.174 cv
383.584 230.466 383.878 229.15 384.48 228.24 cv
385.082 227.344 385.964 226.882 387.112 226.882 cv
f
393.062 235.534 mo
394.504 235.534 li
394.504 237.27 li
393.062 237.27 li
393.062 235.534 li
f
398.704 236.108 mo
403.52 236.108 li
403.52 237.27 li
397.038 237.27 li
397.038 236.108 li
397.556 235.576 398.27 234.848 399.18 233.924 cv
400.076 233.014 400.65 232.426 400.888 232.16 cv
401.336 231.67 401.644 231.25 401.812 230.9 cv
401.98 230.564 402.078 230.214 402.078 229.878 cv
402.078 229.346 401.882 228.898 401.504 228.562 cv
401.126 228.226 400.636 228.044 400.02 228.044 cv
399.586 228.044 399.124 228.128 398.648 228.268 cv
398.172 228.422 397.654 228.646 397.108 228.954 cv
397.108 227.554 li
397.668 227.33 398.186 227.162 398.662 227.05 cv
399.138 226.938 399.586 226.882 399.992 226.882 cv
401.042 226.882 401.882 227.148 402.512 227.68 cv
403.142 228.212 403.464 228.912 403.464 229.794 cv
403.464 230.214 403.38 230.62 403.226 230.984 cv
403.072 231.362 402.792 231.81 402.372 232.314 cv
402.26 232.454 401.896 232.832 401.28 233.462 cv
400.664 234.092 399.81 234.974 398.704 236.108 cv
f
411.926 200.613 mo
408.426 200.613 li
f
411.926 200.613 mo
408.426 200.613 li
@
387.112 196.637 mo
386.398 196.637 385.866 196.987 385.502 197.687 cv
385.138 198.387 384.97 199.437 384.97 200.837 cv
384.97 202.237 385.138 203.287 385.502 203.987 cv
385.866 204.687 386.398 205.037 387.112 205.037 cv
387.826 205.037 388.358 204.687 388.722 203.987 cv
389.072 203.287 389.254 202.237 389.254 200.837 cv
389.254 199.437 389.072 198.387 388.722 197.687 cv
388.358 196.987 387.826 196.637 387.112 196.637 cv
387.112 195.545 mo
388.246 195.545 389.114 196.007 389.73 196.903 cv
390.332 197.813 390.64 199.129 390.64 200.837 cv
390.64 202.559 390.332 203.875 389.73 204.771 cv
389.114 205.667 388.246 206.115 387.112 206.115 cv
385.964 206.115 385.082 205.667 384.48 204.771 cv
383.878 203.875 383.584 202.559 383.584 200.837 cv
383.584 199.129 383.878 197.813 384.48 196.903 cv
385.082 196.007 385.964 195.545 387.112 195.545 cv
f
393.062 204.197 mo
394.504 204.197 li
394.504 205.933 li
393.062 205.933 li
393.062 204.197 li
f
401.7 200.431 mo
402.358 200.571 402.876 200.865 403.24 201.313 cv
403.604 201.761 403.8 202.321 403.8 202.965 cv
403.8 203.973 403.45 204.757 402.764 205.303 cv
402.064 205.849 401.084 206.115 399.81 206.115 cv
399.376 206.115 398.928 206.073 398.48 205.989 cv
398.032 205.919 397.556 205.793 397.08 205.625 cv
397.08 204.295 li
397.458 204.519 397.878 204.687 398.34 204.799 cv
398.788 204.911 399.264 204.967 399.768 204.967 cv
400.636 204.967 401.294 204.799 401.742 204.463 cv
402.19 204.127 402.428 203.623 402.428 202.965 cv
402.428 202.377 402.218 201.901 401.798 201.565 cv
401.378 201.229 400.79 201.047 400.034 201.047 cv
398.844 201.047 li
398.844 199.913 li
400.09 199.913 li
400.762 199.913 401.28 199.787 401.644 199.507 cv
402.008 199.241 402.19 198.849 402.19 198.331 cv
402.19 197.813 401.994 197.407 401.63 197.127 cv
401.252 196.847 400.72 196.707 400.034 196.707 cv
399.656 196.707 399.25 196.749 398.816 196.833 cv
398.382 196.917 397.906 197.043 397.388 197.211 cv
397.388 195.979 li
397.906 195.839 398.396 195.727 398.858 195.657 cv
399.306 195.587 399.74 195.545 400.16 195.545 cv
401.196 195.545 402.022 195.783 402.638 196.259 cv
403.254 196.735 403.562 197.379 403.562 198.191 cv
403.562 198.751 403.394 199.227 403.072 199.619 cv
402.75 200.011 402.288 200.291 401.7 200.431 cv
f
411.926 169.276 mo
408.426 169.276 li
f
411.926 169.276 mo
408.426 169.276 li
@
387.112 165.3 mo
386.398 165.3 385.866 165.65 385.502 166.35 cv
385.138 167.05 384.97 168.1 384.97 169.5 cv
384.97 170.9 385.138 171.95 385.502 172.65 cv
385.866 173.35 386.398 173.7 387.112 173.7 cv
387.826 173.7 388.358 173.35 388.722 172.65 cv
389.072 171.95 389.254 170.9 389.254 169.5 cv
389.254 168.1 389.072 167.05 388.722 166.35 cv
388.358 165.65 387.826 165.3 387.112 165.3 cv
387.112 164.208 mo
388.246 164.208 389.114 164.67 389.73 165.566 cv
390.332 166.476 390.64 167.792 390.64 169.5 cv
390.64 171.222 390.332 172.538 389.73 173.434 cv
389.114 174.33 388.246 174.778 387.112 174.778 cv
385.964 174.778 385.082 174.33 384.48 173.434 cv
383.878 172.538 383.584 171.222 383.584 169.5 cv
383.584 167.792 383.878 166.476 384.48 165.566 cv
385.082 164.67 385.964 164.208 387.112 164.208 cv
f
393.062 172.86 mo
394.504 172.86 li
394.504 174.596 li
393.062 174.596 li
393.062 172.86 li
f
401.308 165.594 mo
397.822 171.04 li
401.308 171.04 li
401.308 165.594 li
400.944 164.39 mo
402.68 164.39 li
402.68 171.04 li
404.136 171.04 li
404.136 172.188 li
402.68 172.188 li
402.68 174.596 li
401.308 174.596 li
401.308 172.188 li
396.702 172.188 li
396.702 170.858 li
400.944 164.39 li
f
411.926 137.939 mo
408.426 137.939 li
f
411.926 137.939 mo
408.426 137.939 li
@
387.112 133.963 mo
386.398 133.963 385.866 134.313 385.502 135.013 cv
385.138 135.713 384.97 136.763 384.97 138.163 cv
384.97 139.563 385.138 140.613 385.502 141.313 cv
385.866 142.013 386.398 142.363 387.112 142.363 cv
387.826 142.363 388.358 142.013 388.722 141.313 cv
389.072 140.613 389.254 139.563 389.254 138.163 cv
389.254 136.763 389.072 135.713 388.722 135.013 cv
388.358 134.313 387.826 133.963 387.112 133.963 cv
387.112 132.871 mo
388.246 132.871 389.114 133.333 389.73 134.229 cv
390.332 135.139 390.64 136.455 390.64 138.163 cv
390.64 139.885 390.332 141.201 389.73 142.097 cv
389.114 142.993 388.246 143.441 387.112 143.441 cv
385.964 143.441 385.082 142.993 384.48 142.097 cv
383.878 141.201 383.584 139.885 383.584 138.163 cv
383.584 136.455 383.878 135.139 384.48 134.229 cv
385.082 133.333 385.964 132.871 387.112 132.871 cv
f
393.062 141.523 mo
394.504 141.523 li
394.504 143.259 li
393.062 143.259 li
393.062 141.523 li
f
397.528 133.053 mo
402.946 133.053 li
402.946 134.215 li
398.788 134.215 li
398.788 136.721 li
398.984 136.651 399.194 136.595 399.39 136.567 cv
399.586 136.539 399.796 136.511 399.992 136.511 cv
401.126 136.511 402.022 136.833 402.694 137.449 cv
403.366 138.079 403.702 138.919 403.702 139.983 cv
403.702 141.089 403.352 141.943 402.666 142.545 cv
401.98 143.147 401.014 143.441 399.782 143.441 cv
399.348 143.441 398.914 143.399 398.466 143.343 cv
398.018 143.273 397.57 143.175 397.094 143.021 cv
397.094 141.635 li
397.5 141.859 397.92 142.027 398.368 142.139 cv
398.802 142.251 399.264 142.293 399.754 142.293 cv
400.538 142.293 401.168 142.097 401.63 141.677 cv
402.078 141.257 402.316 140.697 402.316 139.983 cv
402.316 139.283 402.078 138.723 401.63 138.303 cv
401.168 137.883 400.538 137.673 399.754 137.673 cv
399.39 137.673 399.012 137.715 398.648 137.799 cv
398.284 137.883 397.906 138.009 397.528 138.177 cv
397.528 133.053 li
f
411.926 106.602 mo
408.426 106.602 li
f
411.926 106.602 mo
408.426 106.602 li
@
387.112 102.626 mo
386.398 102.626 385.866 102.976 385.502 103.676 cv
385.138 104.376 384.97 105.426 384.97 106.826 cv
384.97 108.226 385.138 109.276 385.502 109.976 cv
385.866 110.676 386.398 111.026 387.112 111.026 cv
387.826 111.026 388.358 110.676 388.722 109.976 cv
389.072 109.276 389.254 108.226 389.254 106.826 cv
389.254 105.426 389.072 104.376 388.722 103.676 cv
388.358 102.976 387.826 102.626 387.112 102.626 cv
387.112 101.534 mo
388.246 101.534 389.114 101.996 389.73 102.892 cv
390.332 103.802 390.64 105.118 390.64 106.826 cv
390.64 108.548 390.332 109.864 389.73 110.76 cv
389.114 111.656 388.246 112.104 387.112 112.104 cv
385.964 112.104 385.082 111.656 384.48 110.76 cv
383.878 109.864 383.584 108.548 383.584 106.826 cv
383.584 105.118 383.878 103.802 384.48 102.892 cv
385.082 101.996 385.964 101.534 387.112 101.534 cv
f
393.062 110.186 mo
394.504 110.186 li
394.504 111.922 li
393.062 111.922 li
393.062 110.186 li
f
400.636 106.266 mo
400.02 106.266 399.53 106.49 399.166 106.91 cv
398.802 107.33 398.62 107.918 398.62 108.646 cv
398.62 109.388 398.802 109.976 399.166 110.396 cv
399.53 110.816 400.02 111.026 400.636 111.026 cv
401.252 111.026 401.742 110.816 402.106 110.396 cv
402.47 109.976 402.652 109.388 402.652 108.646 cv
402.652 107.918 402.47 107.33 402.106 106.91 cv
401.742 106.49 401.252 106.266 400.636 106.266 cv
403.38 101.94 mo
403.38 103.2 li
403.03 103.032 402.68 102.906 402.33 102.822 cv
401.966 102.738 401.616 102.696 401.28 102.696 cv
400.356 102.696 399.656 103.004 399.18 103.62 cv
398.704 104.236 398.424 105.174 398.368 106.406 cv
398.634 106.014 398.97 105.706 399.376 105.496 cv
399.782 105.286 400.23 105.174 400.72 105.174 cv
401.742 105.174 402.554 105.496 403.142 106.112 cv
403.73 106.728 404.038 107.582 404.038 108.646 cv
404.038 109.696 403.716 110.536 403.1 111.166 cv
402.484 111.796 401.658 112.104 400.636 112.104 cv
399.46 112.104 398.55 111.656 397.934 110.76 cv
397.304 109.864 396.996 108.548 396.996 106.826 cv
396.996 105.216 397.374 103.928 398.144 102.976 cv
398.9 102.024 399.936 101.534 401.224 101.534 cv
401.56 101.534 401.91 101.576 402.274 101.632 cv
402.624 101.702 402.988 101.8 403.38 101.94 cv
f
411.926 75.2652 mo
408.426 75.2652 li
f
411.926 75.2652 mo
408.426 75.2652 li
@
387.112 71.2895 mo
386.398 71.2895 385.866 71.6395 385.502 72.3395 cv
385.138 73.0395 384.97 74.0895 384.97 75.4895 cv
384.97 76.8895 385.138 77.9395 385.502 78.6395 cv
385.866 79.3395 386.398 79.6895 387.112 79.6895 cv
387.826 79.6895 388.358 79.3395 388.722 78.6395 cv
389.072 77.9395 389.254 76.8895 389.254 75.4895 cv
389.254 74.0895 389.072 73.0395 388.722 72.3395 cv
388.358 71.6395 387.826 71.2895 387.112 71.2895 cv
387.112 70.1975 mo
388.246 70.1975 389.114 70.6595 389.73 71.5555 cv
390.332 72.4655 390.64 73.7815 390.64 75.4895 cv
390.64 77.2115 390.332 78.5275 389.73 79.4235 cv
389.114 80.3195 388.246 80.7675 387.112 80.7675 cv
385.964 80.7675 385.082 80.3195 384.48 79.4235 cv
383.878 78.5275 383.584 77.2115 383.584 75.4895 cv
383.584 73.7815 383.878 72.4655 384.48 71.5555 cv
385.082 70.6595 385.964 70.1975 387.112 70.1975 cv
f
393.062 78.8495 mo
394.504 78.8495 li
394.504 80.5855 li
393.062 80.5855 li
393.062 78.8495 li
f
397.164 70.3795 mo
403.73 70.3795 li
403.73 70.9675 li
400.02 80.5855 li
398.578 80.5855 li
402.064 71.5415 li
397.164 71.5415 li
397.164 70.3795 li
f
2 lc
0 lj
411.926 263.286 mo
411.926 59.5968 li
@
710.92 263.286 mo
710.92 59.5968 li
@
411.926 263.286 mo
710.92 263.286 li
@
411.926 59.5968 mo
710.92 59.5968 li
@
654.087 30.1274 mo
468.759 30.1274 li
467.902 30.1256 467.355 29.9165 467.012 29.5739 cv
466.67 29.2313 466.461 28.684 466.459 27.8274 cv
466.459 8.2898 li
466.461 7.43328 466.67 6.88592 467.012 6.5436 cv
467.355 6.2007 467.902 5.99162 468.759 5.98988 cv
654.087 5.98988 li
654.944 5.99162 655.491 6.2007 655.833 6.5436 cv
656.176 6.88592 656.385 7.43328 656.387 8.2898 cv
656.387 27.8274 li
656.385 28.684 656.176 29.2313 655.833 29.5739 cv
655.491 29.9165 654.944 30.1256 654.087 30.1274 cv
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
654.097 31.1275 mo
654.094 31.1275 654.091 31.1275 654.087 31.1275 cv
468.759 31.1275 li
468.756 31.1275 468.752 31.1275 468.749 31.1275 cv
467.743 31.1275 466.894 30.8695 466.305 30.2811 cv
465.715 29.6902 465.457 28.8377 465.459 27.8274 cv
465.459 8.2898 li
465.457 7.27986 465.715 6.42709 466.305 5.83646 cv
466.894 5.24814 467.742 4.99002 468.747 4.99002 cv
468.751 4.99002 468.755 4.99002 468.759 4.99003 cv
654.087 4.99003 li
654.091 4.99002 654.095 4.99002 654.099 4.99002 cv
655.104 4.99002 655.952 5.24811 656.541 5.83646 cv
657.131 6.42709 657.389 7.27986 657.387 8.2898 cv
657.387 27.8274 li
657.389 28.8377 657.131 29.6902 656.541 30.2811 cv
655.952 30.8694 655.103 31.1275 654.097 31.1275 cv
468.759 30.1274 mo
654.087 30.1274 li
654.944 30.1256 655.491 29.9165 655.833 29.5739 cv
656.176 29.2313 656.385 28.684 656.387 27.8274 cv
656.387 8.2898 li
656.385 7.43328 656.176 6.88592 655.833 6.5436 cv
655.491 6.2007 654.944 5.99162 654.087 5.98988 cv
468.759 5.98988 li
467.902 5.99162 467.355 6.2007 467.012 6.5436 cv
466.67 6.88592 466.461 7.43328 466.459 8.2898 cv
466.459 27.8274 li
466.461 28.684 466.67 29.2313 467.012 29.5739 cv
467.355 29.9165 467.902 30.1256 468.759 30.1274 cv
468.759 30.1274 li
.69482 .6318 .621515 .583612 cmyk
f
471.559 21.7305 mo
499.559 21.7305 li
499.559 11.9305 li
471.559 11.9305 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
471.559 21.7305 mo
499.559 21.7305 li
499.559 11.9305 li
471.559 11.9305 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
512.131 11.5245 mo
518.585 11.5245 li
518.585 12.6865 li
513.517 12.6865 li
513.517 15.7105 li
518.375 15.7105 li
518.375 16.8725 li
513.517 16.8725 li
513.517 20.5685 li
518.711 20.5685 li
518.711 21.7305 li
512.131 21.7305 li
512.131 11.5245 li
f
520.979 11.5245 mo
522.365 11.5245 li
522.365 20.5685 li
527.335 20.5685 li
527.335 21.7305 li
520.979 21.7305 li
520.979 11.5245 li
f
530.163 12.6585 mo
530.163 16.4945 li
531.899 16.4945 li
532.543 16.4945 533.033 16.3405 533.383 16.0045 cv
533.733 15.6685 533.915 15.1925 533.915 14.5765 cv
533.915 13.9605 533.733 13.4985 533.383 13.1625 cv
533.033 12.8265 532.543 12.6585 531.899 12.6585 cv
530.163 12.6585 li
528.777 11.5245 mo
531.899 11.5245 li
533.033 11.5245 533.901 11.7905 534.489 12.3085 cv
535.077 12.8265 535.371 13.5825 535.371 14.5765 cv
535.371 15.5845 535.077 16.3545 534.489 16.8585 cv
533.901 17.3765 533.033 17.6285 531.899 17.6285 cv
530.163 17.6285 li
530.163 21.7305 li
528.777 21.7305 li
528.777 11.5245 li
f
542.987 24.0405 mo
542.987 25.0205 li
535.721 25.0205 li
535.721 24.0405 li
542.987 24.0405 li
f
550.533 17.1105 mo
550.533 21.7305 li
549.273 21.7305 li
549.273 17.1525 li
549.273 16.4245 549.119 15.8925 548.839 15.5285 cv
548.559 15.1645 548.139 14.9825 547.579 14.9825 cv
546.893 14.9825 546.361 15.2065 545.969 15.6405 cv
545.577 16.0745 545.381 16.6625 545.381 17.4045 cv
545.381 21.7305 li
544.121 21.7305 li
544.121 14.0725 li
545.381 14.0725 li
545.381 15.2625 li
545.675 14.8145 546.025 14.4645 546.445 14.2405 cv
546.851 14.0165 547.327 13.8905 547.859 13.8905 cv
548.727 13.8905 549.399 14.1705 549.847 14.7165 cv
550.295 15.2625 550.533 16.0605 550.533 17.1105 cv
f
557.925 14.2965 mo
557.925 15.4865 li
557.561 15.3185 557.197 15.1785 556.819 15.0805 cv
556.427 14.9965 556.035 14.9405 555.629 14.9405 cv
554.999 14.9405 554.523 15.0385 554.215 15.2345 cv
553.907 15.4305 553.753 15.7105 553.753 16.0885 cv
553.753 16.3825 553.865 16.6065 554.089 16.7745 cv
554.313 16.9425 554.761 17.1105 555.433 17.2505 cv
555.867 17.3485 li
556.763 17.5445 557.393 17.8245 557.771 18.1605 cv
558.135 18.5105 558.331 19.0005 558.331 19.6165 cv
558.331 20.3305 558.051 20.8905 557.491 21.2965 cv
556.931 21.7165 556.147 21.9125 555.167 21.9125 cv
554.747 21.9125 554.327 21.8705 553.879 21.8005 cv
553.431 21.7305 552.969 21.6185 552.479 21.4505 cv
552.479 20.1485 li
552.941 20.4005 553.403 20.5825 553.851 20.6945 cv
554.299 20.8205 554.747 20.8765 555.195 20.8765 cv
555.783 20.8765 556.245 20.7785 556.567 20.5825 cv
556.875 20.3865 557.043 20.0925 557.043 19.7145 cv
557.043 19.3785 556.917 19.1125 556.693 18.9305 cv
556.469 18.7485 555.965 18.5665 555.181 18.3985 cv
554.747 18.3005 li
553.963 18.1325 553.389 17.8805 553.053 17.5445 cv
552.703 17.2085 552.535 16.7465 552.535 16.1445 cv
552.535 15.4305 552.787 14.8705 553.291 14.4785 cv
553.795 14.0865 554.523 13.8905 555.475 13.8905 cv
555.937 13.8905 556.371 13.9325 556.791 14.0025 cv
557.197 14.0725 557.575 14.1705 557.925 14.2965 cv
f
587.009 21.7305 mo
615.009 21.7305 li
615.009 11.9305 li
587.009 11.9305 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
587.009 21.7305 mo
615.009 21.7305 li
615.009 11.9305 li
587.009 11.9305 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
627.581 11.5245 mo
634.035 11.5245 li
634.035 12.6865 li
628.967 12.6865 li
628.967 15.7105 li
633.825 15.7105 li
633.825 16.8725 li
628.967 16.8725 li
628.967 20.5685 li
634.161 20.5685 li
634.161 21.7305 li
627.581 21.7305 li
627.581 11.5245 li
f
636.429 11.5245 mo
637.815 11.5245 li
637.815 20.5685 li
642.785 20.5685 li
642.785 21.7305 li
636.429 21.7305 li
636.429 11.5245 li
f
645.613 12.6585 mo
645.613 16.4945 li
647.349 16.4945 li
647.993 16.4945 648.483 16.3405 648.833 16.0045 cv
649.183 15.6685 649.365 15.1925 649.365 14.5765 cv
649.365 13.9605 649.183 13.4985 648.833 13.1625 cv
648.483 12.8265 647.993 12.6585 647.349 12.6585 cv
645.613 12.6585 li
644.227 11.5245 mo
647.349 11.5245 li
648.483 11.5245 649.351 11.7905 649.939 12.3085 cv
650.527 12.8265 650.821 13.5825 650.821 14.5765 cv
650.821 15.5845 650.527 16.3545 649.939 16.8585 cv
649.351 17.3765 648.483 17.6285 647.349 17.6285 cv
645.613 17.6285 li
645.613 21.7305 li
644.227 21.7305 li
644.227 11.5245 li
f
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5968 li
792.326 59.5968 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
805.092 294.623 mo
813.444 294.623 li
813.444 123.129 li
805.092 123.129 li
cp
f
805.092 294.623 mo
813.444 294.623 li
813.444 123.129 li
805.092 123.129 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
852.817 294.623 mo
861.169 294.623 li
861.169 139.192 li
852.817 139.192 li
cp
f
852.817 294.623 mo
861.169 294.623 li
861.169 139.192 li
852.817 139.192 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
900.541 294.623 mo
908.893 294.623 li
908.893 135.667 li
900.541 135.667 li
cp
f
900.541 294.623 mo
908.893 294.623 li
908.893 135.667 li
900.541 135.667 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
948.266 294.623 mo
956.618 294.623 li
956.618 131.797 li
948.266 131.797 li
cp
f
948.266 294.623 mo
956.618 294.623 li
956.618 131.797 li
948.266 131.797 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
995.99 294.623 mo
1004.34 294.623 li
1004.34 155.522 li
995.99 155.522 li
cp
f
995.99 294.623 mo
1004.34 294.623 li
1004.34 155.522 li
995.99 155.522 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
1043.71 294.623 mo
1052.07 294.623 li
1052.07 118.582 li
1043.71 118.582 li
cp
f
1043.71 294.623 mo
1052.07 294.623 li
1052.07 118.582 li
1043.71 118.582 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
813.444 294.623 mo
821.796 294.623 li
821.796 127.143 li
813.444 127.143 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
813.444 294.623 mo
821.796 294.623 li
821.796 127.143 li
813.444 127.143 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
861.169 294.623 mo
869.52 294.623 li
869.52 137.384 li
861.169 137.384 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
861.169 294.623 mo
869.52 294.623 li
869.52 137.384 li
861.169 137.384 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
908.893 294.623 mo
917.245 294.623 li
917.245 134.793 li
908.893 134.793 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
908.893 294.623 mo
917.245 294.623 li
917.245 134.793 li
908.893 134.793 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
956.618 294.623 mo
964.969 294.623 li
964.969 132.471 li
956.618 132.471 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
956.618 294.623 mo
964.969 294.623 li
964.969 132.471 li
956.618 132.471 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
1004.34 294.623 mo
1012.69 294.623 li
1012.69 149.932 li
1004.34 149.932 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1004.34 294.623 mo
1012.69 294.623 li
1012.69 149.932 li
1004.34 149.932 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
792.326 263.286 mo
1091.32 263.286 li
1091.32 59.5969 li
792.326 59.5969 li
792.326 263.286 li
clp
1052.07 294.623 mo
1060.42 294.623 li
1060.42 114.317 li
1052.07 114.317 li
cp
1 /0 /CSD get_res sepcs
.588235 sep
f
1052.07 294.623 mo
1060.42 294.623 li
1060.42 114.317 li
1052.07 114.317 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
852.698 263.286 mo
852.698 266.786 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
1 lj
852.698 263.286 mo
852.698 266.786 li
@
793.853 273.111 mo
793.467 274.298 li
793.07 273.923 792.689 273.621 792.317 273.377 cv
791.929 273.142 791.554 272.952 791.183 272.831 cv
790.515 272.614 789.952 272.581 789.513 272.712 cv
789.07 272.855 788.776 273.17 788.624 273.64 cv
788.495 274.035 788.506 274.381 788.689 274.659 cv
788.855 274.945 789.261 275.255 789.888 275.595 cv
790.582 275.985 li
791.428 276.451 791.995 276.977 792.287 277.55 cv
792.576 278.136 792.609 278.789 792.372 279.519 cv
792.087 280.397 791.577 280.956 790.852 281.212 cv
790.114 281.464 789.188 281.41 788.063 281.044 cv
787.63 280.903 787.189 280.705 786.735 280.462 cv
786.281 280.219 785.831 279.922 785.388 279.56 cv
785.798 278.299 li
786.2 278.744 786.614 279.11 787.039 279.399 cv
787.461 279.7 787.911 279.915 788.38 280.067 cv
789.073 280.292 789.649 280.329 790.12 280.181 cv
790.58 280.03 790.902 279.711 791.071 279.192 cv
791.215 278.747 791.192 278.356 791 278.021 cv
790.808 277.685 790.424 277.355 789.846 277.03 cv
789.152 276.641 li
788.293 276.171 787.73 275.673 787.451 275.145 cv
787.167 274.629 787.142 274.033 787.367 273.341 cv
787.625 272.55 788.101 272.008 788.819 271.735 cv
789.524 271.458 790.379 271.476 791.368 271.798 cv
791.788 271.934 792.197 272.108 792.618 272.327 cv
793.026 272.542 793.431 272.81 793.853 273.111 cv
f
797.34 274.285 mo
796.717 276.201 li
799.004 276.944 li
798.723 277.81 li
796.436 277.067 li
795.243 280.739 li
795.062 281.295 795.02 281.678 795.12 281.874 cv
795.216 282.083 795.501 282.258 795.971 282.41 cv
797.108 282.78 li
796.807 283.707 li
795.669 283.338 li
794.804 283.057 794.263 282.703 794.046 282.277 cv
793.829 281.851 793.857 281.218 794.13 280.377 cv
795.323 276.705 li
794.507 276.44 li
794.788 275.574 li
795.604 275.84 li
796.227 273.923 li
797.34 274.285 li
f
802.449 281.782 mo
801.547 281.488 800.892 281.399 800.482 281.484 cv
800.067 281.582 799.782 281.872 799.621 282.366 cv
799.492 282.762 799.512 283.124 799.699 283.43 cv
799.882 283.75 800.205 283.978 800.65 284.122 cv
801.268 284.323 801.831 284.274 802.346 283.949 cv
802.858 283.637 803.232 283.116 803.469 282.386 cv
803.549 282.139 li
802.449 281.782 li
804.811 282.043 mo
803.557 285.901 li
802.445 285.539 li
802.778 284.513 li
802.382 284.849 801.964 285.041 801.533 285.106 cv
801.102 285.171 800.6 285.117 800.056 284.941 cv
799.363 284.716 798.867 284.349 798.584 283.834 cv
798.3 283.318 798.271 282.734 798.484 282.079 cv
798.729 281.325 799.161 280.836 799.809 280.609 cv
800.441 280.391 801.259 280.438 802.273 280.768 cv
803.831 281.274 li
803.867 281.162 li
804.032 280.656 803.987 280.204 803.746 279.811 cv
803.5 279.43 803.079 279.129 802.473 278.932 cv
802.077 278.804 801.69 278.733 801.287 278.711 cv
800.884 278.69 800.494 278.713 800.104 278.778 cv
800.437 277.752 li
800.881 277.732 801.317 277.737 801.724 277.787 cv
802.131 277.837 802.518 277.908 802.889 278.029 cv
803.866 278.346 804.511 278.843 804.829 279.507 cv
805.146 280.17 805.144 281.017 804.811 282.043 cv
f
809.765 278.322 mo
809.143 280.239 li
811.43 280.982 li
811.149 281.847 li
808.861 281.104 li
807.668 284.776 li
807.488 285.332 807.445 285.715 807.545 285.912 cv
807.642 286.121 807.927 286.295 808.396 286.448 cv
809.534 286.817 li
809.233 287.745 li
808.095 287.375 li
807.23 287.094 806.688 286.74 806.471 286.314 cv
806.254 285.889 806.282 285.255 806.556 284.414 cv
807.749 280.742 li
806.933 280.477 li
807.214 279.612 li
808.03 279.877 li
808.653 277.961 li
809.765 278.322 li
f
812.889 281.456 mo
814.002 281.817 li
811.804 288.58 li
810.691 288.219 li
812.889 281.456 li
813.745 278.822 mo
814.857 279.184 li
814.399 280.593 li
813.287 280.232 li
813.745 278.822 li
f
820.577 284.172 mo
820.235 285.223 li
819.962 284.97 819.681 284.742 819.375 284.547 cv
819.053 284.361 818.723 284.199 818.364 284.082 cv
817.808 283.901 817.359 283.851 817.031 283.936 cv
816.703 284.021 816.487 284.224 816.378 284.558 cv
816.294 284.817 816.328 285.047 816.478 285.26 cv
816.628 285.473 816.975 285.75 817.528 286.066 cv
817.883 286.277 li
818.618 286.707 819.094 287.135 819.332 287.541 cv
819.553 287.954 819.585 288.443 819.409 288.987 cv
819.204 289.618 818.796 290.032 818.185 290.23 cv
817.57 290.44 816.821 290.388 815.956 290.107 cv
815.585 289.986 815.226 289.829 814.85 289.638 cv
814.475 289.448 814.099 289.216 813.714 288.928 cv
814.088 287.778 li
814.424 288.133 814.779 288.426 815.143 288.654 cv
815.502 288.893 815.882 289.071 816.278 289.2 cv
816.797 289.369 817.233 289.415 817.574 289.334 cv
817.902 289.249 818.135 289.038 818.243 288.704 cv
818.339 288.407 818.305 288.136 818.159 287.911 cv
818.013 287.686 817.62 287.381 816.976 287.008 cv
816.621 286.796 li
815.977 286.423 815.542 286.036 815.342 285.643 cv
815.129 285.246 815.114 284.789 815.286 284.258 cv
815.491 283.627 815.874 283.205 816.432 283.003 cv
816.99 282.802 817.689 282.838 818.529 283.111 cv
818.938 283.243 819.309 283.405 819.66 283.587 cv
819.998 283.766 820.304 283.961 820.577 284.172 cv
f
824.49 283.107 mo
823.868 285.023 li
826.155 285.766 li
825.874 286.632 li
823.587 285.888 li
822.393 289.56 li
822.213 290.117 822.17 290.5 822.271 290.696 cv
822.367 290.905 822.652 291.08 823.122 291.232 cv
824.259 291.602 li
823.958 292.529 li
822.82 292.16 li
821.955 291.878 821.414 291.525 821.197 291.099 cv
820.979 290.673 821.008 290.04 821.281 289.199 cv
822.474 285.527 li
821.658 285.262 li
821.939 284.396 li
822.755 284.661 li
823.378 282.745 li
824.49 283.107 li
f
827.614 286.24 mo
828.727 286.602 li
826.529 293.365 li
825.417 293.003 li
827.614 286.24 li
828.47 283.607 mo
829.582 283.968 li
829.124 285.378 li
828.012 285.016 li
828.47 283.607 li
f
835.838 289.199 mo
835.501 290.238 li
835.235 289.96 834.966 289.736 834.673 289.545 cv
834.38 289.354 834.087 289.204 833.765 289.1 cv
833.048 288.867 832.403 288.917 831.859 289.246 cv
831.315 289.575 830.908 290.154 830.643 290.97 cv
830.374 291.798 830.363 292.505 830.61 293.091 cv
830.857 293.677 831.353 294.085 832.07 294.318 cv
832.392 294.422 832.713 294.485 833.062 294.503 cv
833.412 294.521 833.765 294.486 834.143 294.417 cv
833.809 295.443 li
833.44 295.487 833.082 295.494 832.741 295.451 cv
832.387 295.405 832.016 295.325 831.645 295.205 cv
830.631 294.875 829.916 294.301 829.531 293.465 cv
829.13 292.638 829.115 291.676 829.468 290.588 cv
829.826 289.488 830.404 288.719 831.214 288.285 cv
832.025 287.851 832.958 287.799 834.021 288.144 cv
834.367 288.257 834.689 288.402 834.987 288.581 cv
835.284 288.76 835.573 288.963 835.838 289.199 cv
f
839.837 293.93 mo
838.935 293.636 838.28 293.547 837.87 293.632 cv
837.455 293.73 837.17 294.02 837.009 294.514 cv
836.88 294.91 836.9 295.272 837.087 295.579 cv
837.27 295.898 837.593 296.126 838.038 296.27 cv
838.656 296.471 839.219 296.422 839.734 296.097 cv
840.246 295.785 840.62 295.264 840.857 294.534 cv
840.938 294.287 li
839.837 293.93 li
842.199 294.191 mo
840.945 298.049 li
839.833 297.687 li
840.166 296.661 li
839.77 296.997 839.352 297.189 838.921 297.254 cv
838.49 297.319 837.988 297.265 837.444 297.089 cv
836.751 296.864 836.255 296.498 835.972 295.982 cv
835.688 295.466 835.659 294.882 835.872 294.227 cv
836.117 293.473 836.549 292.984 837.197 292.758 cv
837.829 292.539 838.647 292.586 839.661 292.916 cv
841.219 293.422 li
841.255 293.31 li
841.42 292.804 841.375 292.352 841.134 291.959 cv
840.888 291.578 840.467 291.277 839.861 291.081 cv
839.465 290.952 839.078 290.881 838.675 290.859 cv
838.272 290.838 837.882 290.861 837.492 290.926 cv
837.825 289.9 li
838.269 289.88 838.705 289.885 839.112 289.935 cv
839.519 289.985 839.906 290.057 840.277 290.177 cv
841.254 290.494 841.899 290.991 842.217 291.655 cv
842.534 292.318 842.532 293.165 842.199 294.191 cv
f
846.286 289.396 mo
847.399 289.757 li
844.346 299.154 li
843.233 298.792 li
846.286 289.396 li
f
850.087 295.661 mo
849.612 295.862 849.243 296.111 848.966 296.376 cv
848.688 296.642 848.489 296.96 848.377 297.306 cv
848.184 297.899 848.238 298.45 848.542 298.986 cv
848.834 299.518 849.317 299.88 849.96 300.089 cv
850.331 300.21 850.71 300.265 851.084 300.249 cv
851.458 300.234 851.844 300.141 852.225 299.978 cv
850.087 295.661 li
851.161 295.258 mo
853.207 299.395 li
853.554 299.125 853.864 298.802 854.133 298.438 cv
854.389 298.07 854.616 297.665 854.794 297.204 cv
855.919 297.569 li
855.696 298.085 855.392 298.56 855.013 299.011 cv
854.634 299.462 854.181 299.889 853.645 300.275 cv
854.768 302.54 li
853.247 302.046 li
852.671 300.875 li
852.13 301.109 851.601 301.224 851.087 301.248 cv
850.578 301.26 850.055 301.186 849.536 301.018 cv
848.559 300.7 847.856 300.171 847.415 299.426 cv
846.973 298.681 846.909 297.868 847.191 297.002 cv
847.359 296.483 847.64 296.041 848.056 295.684 cv
848.473 295.328 849.021 295.028 849.698 294.796 cv
849.581 294.485 849.517 294.177 849.498 293.897 cv
849.479 293.618 849.51 293.355 849.591 293.107 cv
849.8 292.465 850.195 292.005 850.768 291.754 cv
851.342 291.503 852 291.498 852.742 291.739 cv
853.076 291.848 853.397 291.993 853.707 292.176 cv
854.004 292.355 854.318 292.566 854.616 292.827 cv
854.259 293.927 li
853.961 293.625 853.675 293.368 853.386 293.165 cv
853.096 292.962 852.828 292.82 852.556 292.731 cv
852.136 292.595 851.753 292.594 851.421 292.732 cv
851.077 292.866 850.857 293.123 850.745 293.469 cv
850.676 293.679 850.657 293.905 850.717 294.143 cv
850.772 294.393 850.911 294.767 851.161 295.258 cv
f
859.292 294.045 mo
860.516 294.443 li
857.587 303.456 li
856.363 303.058 li
859.292 294.045 li
f
866.912 301.975 mo
865.586 306.055 li
864.474 305.694 li
865.787 301.651 li
865.996 301.008 866.013 300.494 865.87 300.092 cv
865.727 299.69 865.409 299.409 864.914 299.248 cv
864.308 299.051 863.774 299.097 863.303 299.367 cv
862.833 299.638 862.491 300.101 862.278 300.756 cv
861.037 304.577 li
859.924 304.215 li
862.121 297.452 li
863.234 297.814 li
862.893 298.865 li
863.281 298.553 863.69 298.345 864.125 298.268 cv
864.548 298.186 865.005 298.212 865.475 298.364 cv
866.241 298.613 866.754 299.053 866.993 299.664 cv
867.232 300.275 867.213 301.048 866.912 301.975 cv
f
874.277 298.491 mo
873.976 299.418 li
872.913 299.072 li
872.517 298.944 872.205 298.938 872.004 299.05 cv
871.791 299.159 871.625 299.419 871.488 299.84 cv
871.295 300.433 li
873.125 301.028 li
872.844 301.893 li
871.014 301.299 li
869.098 307.196 li
867.985 306.834 li
869.901 300.937 li
868.838 300.591 li
869.119 299.726 li
870.182 300.072 li
870.335 299.602 li
870.576 298.86 870.93 298.36 871.389 298.126 cv
871.847 297.892 872.46 297.9 873.227 298.149 cv
874.277 298.491 li
f
876.717 303.056 mo
876.124 302.863 875.578 302.945 875.079 303.303 cv
874.58 303.66 874.202 304.234 873.941 305.038 cv
873.676 305.854 873.631 306.537 873.825 307.119 cv
874.019 307.701 874.416 308.077 875.022 308.273 cv
875.615 308.466 876.157 308.396 876.656 308.039 cv
877.155 307.682 877.533 307.107 877.798 306.291 cv
878.055 305.5 878.091 304.801 877.898 304.219 cv
877.704 303.636 877.311 303.249 876.717 303.056 cv
877.022 302.116 mo
877.987 302.43 878.637 302.996 878.992 303.795 cv
879.331 304.602 879.334 305.56 878.973 306.673 cv
878.611 307.786 878.046 308.559 877.301 309 cv
876.54 309.45 875.685 309.514 874.721 309.201 cv
873.744 308.883 873.078 308.325 872.739 307.518 cv
872.395 306.723 872.405 305.769 872.766 304.656 cv
873.128 303.544 873.681 302.767 874.43 302.313 cv
875.175 301.871 876.046 301.799 877.022 302.116 cv
f
883.639 302.325 mo
883.016 304.241 li
885.303 304.985 li
885.022 305.85 li
882.735 305.107 li
881.542 308.779 li
881.361 309.335 881.319 309.718 881.419 309.914 cv
881.515 310.123 881.8 310.298 882.27 310.451 cv
883.407 310.82 li
883.106 311.748 li
881.969 311.378 li
881.103 311.097 880.562 310.743 880.345 310.317 cv
880.128 309.891 880.156 309.258 880.429 308.417 cv
881.622 304.745 li
880.806 304.48 li
881.087 303.615 li
881.903 303.88 li
882.526 301.964 li
883.639 302.325 li
f
891.516 309.969 mo
890.19 314.049 li
889.078 313.688 li
890.391 309.645 li
890.6 309.002 890.617 308.488 890.474 308.086 cv
890.331 307.684 890.012 307.403 889.518 307.242 cv
888.912 307.046 888.378 307.091 887.907 307.362 cv
887.437 307.632 887.095 308.095 886.882 308.751 cv
885.641 312.571 li
884.528 312.21 li
887.581 302.813 li
888.694 303.175 li
887.496 306.859 li
887.885 306.548 888.294 306.339 888.729 306.262 cv
889.152 306.181 889.609 306.206 890.078 306.358 cv
890.845 306.608 891.358 307.048 891.597 307.658 cv
891.836 308.269 891.817 309.042 891.516 309.969 cv
f
899.379 312.989 mo
899.202 313.533 li
894.096 311.874 li
893.896 312.656 893.926 313.322 894.218 313.854 cv
894.497 314.383 895.002 314.765 895.744 315.006 cv
896.164 315.143 896.6 315.23 897.028 315.26 cv
897.456 315.289 897.916 315.261 898.384 315.167 cv
898.043 316.218 li
897.591 316.263 897.139 316.266 896.694 316.204 cv
896.25 316.141 895.801 316.05 895.38 315.913 cv
894.292 315.56 893.54 314.974 893.11 314.151 cv
892.68 313.328 892.648 312.374 892.998 311.298 cv
893.355 310.198 893.937 309.417 894.744 308.954 cv
895.546 308.504 896.471 308.435 897.484 308.765 cv
898.399 309.062 899.02 309.592 899.363 310.346 cv
899.689 311.108 899.704 311.987 899.379 312.989 cv
898.371 312.306 mo
898.555 311.696 898.539 311.158 898.338 310.682 cv
898.12 310.215 897.736 309.885 897.192 309.708 cv
896.573 309.508 896.019 309.532 895.535 309.758 cv
895.052 309.984 894.669 310.406 894.414 311.02 cv
898.371 312.306 li
f
904.573 312.107 mo
903.979 311.914 903.433 311.996 902.934 312.354 cv
902.435 312.711 902.057 313.285 901.796 314.089 cv
901.531 314.905 901.487 315.588 901.681 316.17 cv
901.874 316.752 902.272 317.127 902.877 317.324 cv
903.471 317.517 904.013 317.447 904.512 317.09 cv
905.011 316.732 905.389 316.158 905.654 315.342 cv
905.911 314.551 905.947 313.852 905.753 313.269 cv
905.56 312.687 905.166 312.3 904.573 312.107 cv
904.878 311.167 mo
905.842 311.48 906.492 312.047 906.848 312.846 cv
907.187 313.653 907.19 314.611 906.828 315.724 cv
906.467 316.837 905.901 317.61 905.156 318.051 cv
904.395 318.501 903.541 318.565 902.576 318.251 cv
901.599 317.934 900.933 317.376 900.594 316.569 cv
900.251 315.774 900.26 314.82 900.622 313.707 cv
900.983 312.594 901.537 311.817 902.285 311.364 cv
903.03 310.922 903.901 310.85 904.878 311.167 cv
f
913.353 315.247 mo
913.254 315.132 913.134 315.039 912.997 314.953 cv
912.857 314.88 912.704 314.804 912.531 314.747 cv
911.901 314.542 911.35 314.596 910.884 314.895 cv
910.405 315.191 910.056 315.72 909.806 316.486 cv
908.65 320.047 li
907.537 319.686 li
909.734 312.923 li
910.847 313.284 li
910.505 314.335 li
910.861 313.999 911.27 313.791 911.705 313.713 cv
912.141 313.636 912.63 313.686 913.174 313.863 cv
913.248 313.887 913.331 313.927 913.43 313.959 cv
913.512 314 913.607 314.044 913.723 314.109 cv
913.353 315.247 li
f
915.273 322.883 mo
914.695 323.57 914.213 324.001 913.836 324.152 cv
913.459 324.303 913.023 324.298 912.528 324.137 cv
911.638 323.848 li
911.94 322.921 li
912.595 323.133 li
912.892 323.23 913.151 323.232 913.372 323.14 cv
913.593 323.048 913.887 322.774 914.274 322.298 cv
914.633 321.868 li
914.061 314.329 li
915.236 314.71 li
915.631 320.689 li
919.464 316.084 li
920.639 316.466 li
915.273 322.883 li
f
900.422 263.286 mo
900.422 266.786 li
f
900.422 263.286 mo
900.422 266.786 li
@
854.036 271.059 mo
855.854 271.649 li
856.161 278.529 li
860.465 273.148 li
862.283 273.738 li
859.354 282.751 li
858.167 282.366 li
860.738 274.453 li
856.405 279.879 li
855.181 279.482 li
854.866 272.545 li
852.295 280.457 li
851.108 280.072 li
854.036 271.059 li
f
866.294 278.39 mo
865.7 278.197 865.154 278.28 864.655 278.637 cv
864.156 278.994 863.779 279.569 863.517 280.372 cv
863.252 281.188 863.208 281.871 863.402 282.453 cv
863.595 283.036 863.993 283.411 864.598 283.608 cv
865.192 283.801 865.734 283.731 866.233 283.373 cv
866.732 283.016 867.11 282.442 867.375 281.626 cv
867.632 280.834 867.668 280.135 867.474 279.553 cv
867.281 278.971 866.887 278.583 866.294 278.39 cv
866.599 277.451 mo
867.563 277.764 868.213 278.33 868.569 279.129 cv
868.908 279.937 868.911 280.895 868.549 282.007 cv
868.188 283.12 867.622 283.893 866.877 284.334 cv
866.116 284.784 865.262 284.848 864.297 284.535 cv
863.32 284.218 862.654 283.659 862.315 282.852 cv
861.972 282.057 861.981 281.103 862.343 279.991 cv
862.704 278.878 863.258 278.101 864.006 277.647 cv
864.751 277.206 865.622 277.133 866.599 277.451 cv
f
875.61 281.691 mo
876.799 278.031 li
877.912 278.392 li
874.859 287.789 li
873.746 287.427 li
874.075 286.414 li
873.708 286.745 873.315 286.945 872.896 287.014 cv
872.477 287.083 872.024 287.046 871.53 286.885 cv
870.714 286.62 870.151 286.082 869.84 285.27 cv
869.53 284.458 869.564 283.512 869.909 282.449 cv
870.255 281.386 870.779 280.613 871.512 280.127 cv
872.24 279.652 873.016 279.535 873.832 279.801 cv
874.326 279.961 874.715 280.197 875.009 280.511 cv
875.303 280.825 875.503 281.219 875.61 281.691 cv
871.059 282.823 mo
870.794 283.639 870.746 284.334 870.927 284.912 cv
871.108 285.49 871.506 285.866 872.099 286.059 cv
872.68 286.247 873.21 286.173 873.709 285.816 cv
874.195 285.455 874.577 284.868 874.843 284.052 cv
875.108 283.236 875.139 282.549 874.958 281.971 cv
874.765 281.389 874.384 281.005 873.803 280.816 cv
873.209 280.623 872.663 280.706 872.176 281.067 cv
871.69 281.428 871.324 282.007 871.059 282.823 cv
f
884.121 286.752 mo
883.944 287.296 li
878.838 285.637 li
878.638 286.42 878.668 287.086 878.96 287.618 cv
879.24 288.146 879.744 288.529 880.486 288.77 cv
880.906 288.906 881.343 288.993 881.77 289.023 cv
882.198 289.053 882.658 289.025 883.126 288.931 cv
882.785 289.982 li
882.333 290.026 881.881 290.03 881.436 289.967 cv
880.992 289.905 880.543 289.814 880.123 289.677 cv
879.035 289.323 878.282 288.737 877.852 287.914 cv
877.423 287.091 877.391 286.138 877.74 285.062 cv
878.098 283.962 878.68 283.18 879.486 282.718 cv
880.288 282.268 881.213 282.199 882.227 282.528 cv
883.142 282.826 883.762 283.355 884.105 284.109 cv
884.432 284.871 884.446 285.751 884.121 286.752 cv
883.113 286.069 mo
883.297 285.46 883.281 284.921 883.08 284.446 cv
882.863 283.979 882.478 283.649 881.934 283.472 cv
881.316 283.271 880.761 283.296 880.277 283.522 cv
879.794 283.747 879.411 284.169 879.156 284.784 cv
883.113 286.069 li
f
887.803 281.606 mo
888.915 281.968 li
885.862 291.364 li
884.75 291.003 li
887.803 281.606 li
f
900.403 286.452 mo
900.017 287.639 li
899.62 287.264 899.239 286.962 898.867 286.719 cv
898.479 286.483 898.104 286.293 897.733 286.172 cv
897.065 285.955 896.501 285.923 896.063 286.053 cv
895.62 286.196 895.326 286.511 895.173 286.981 cv
895.045 287.377 895.056 287.722 895.239 288 cv
895.405 288.287 895.811 288.596 896.438 288.936 cv
897.132 289.326 li
897.978 289.792 898.545 290.318 898.837 290.892 cv
899.125 291.477 899.159 292.131 898.922 292.86 cv
898.637 293.738 898.127 294.297 897.402 294.553 cv
896.663 294.805 895.738 294.751 894.613 294.385 cv
894.18 294.245 893.739 294.046 893.285 293.803 cv
892.831 293.56 892.38 293.263 891.938 292.901 cv
892.347 291.64 li
892.75 292.085 893.164 292.452 893.589 292.74 cv
894.011 293.041 894.461 293.256 894.93 293.408 cv
895.623 293.633 896.198 293.67 896.67 293.523 cv
897.129 293.371 897.452 293.052 897.621 292.533 cv
897.765 292.088 897.742 291.697 897.55 291.362 cv
897.358 291.026 896.974 290.696 896.395 290.372 cv
895.702 289.982 li
894.843 289.512 894.28 289.014 894.001 288.486 cv
893.717 287.97 893.692 287.375 893.917 286.682 cv
894.174 285.891 894.651 285.349 895.369 285.076 cv
896.074 284.799 896.929 284.818 897.918 285.139 cv
898.338 285.275 898.747 285.449 899.168 285.668 cv
899.576 285.883 899.981 286.151 900.403 286.452 cv
f
903.89 287.626 mo
903.267 289.542 li
905.554 290.286 li
905.273 291.151 li
902.986 290.408 li
901.793 294.08 li
901.612 294.636 901.57 295.019 901.67 295.215 cv
901.766 295.424 902.051 295.599 902.521 295.752 cv
903.658 296.121 li
903.357 297.049 li
902.219 296.679 li
901.354 296.398 900.813 296.044 900.596 295.618 cv
900.379 295.192 900.407 294.559 900.68 293.718 cv
901.873 290.046 li
901.057 289.781 li
901.338 288.916 li
902.154 289.181 li
902.777 287.264 li
903.89 287.626 li
f
910.595 293.072 mo
910.495 292.957 910.376 292.864 910.239 292.778 cv
910.099 292.705 909.946 292.628 909.773 292.572 cv
909.143 292.367 908.592 292.421 908.126 292.72 cv
907.647 293.016 907.297 293.545 907.048 294.311 cv
905.891 297.872 li
904.779 297.51 li
906.976 290.748 li
908.089 291.109 li
907.747 292.16 li
908.102 291.824 908.512 291.616 908.947 291.538 cv
909.382 291.461 909.872 291.511 910.416 291.688 cv
910.49 291.712 910.573 291.752 910.672 291.784 cv
910.754 291.825 910.849 291.869 910.965 291.934 cv
910.595 293.072 li
f
910.654 296.467 mo
911.983 292.374 li
913.096 292.736 li
911.778 296.791 li
911.57 297.434 911.541 297.944 911.683 298.346 cv
911.826 298.748 912.145 299.029 912.652 299.194 cv
913.245 299.387 913.788 299.358 914.258 299.087 cv
914.729 298.816 915.071 298.353 915.288 297.686 cv
916.533 293.853 li
917.646 294.214 li
915.448 300.977 li
914.336 300.616 li
914.673 299.577 li
914.265 299.909 913.847 300.102 913.436 300.187 cv
913.017 300.256 912.577 300.222 912.108 300.069 cv
911.329 299.816 910.811 299.389 910.573 298.778 cv
910.317 298.176 910.348 297.407 910.654 296.467 cv
914.83 293.122 mo
914.83 293.122 li
f
924.72 296.8 mo
924.383 297.839 li
924.117 297.561 923.849 297.337 923.555 297.146 cv
923.262 296.955 922.969 296.805 922.647 296.701 cv
921.93 296.468 921.285 296.518 920.741 296.847 cv
920.197 297.176 919.79 297.754 919.525 298.57 cv
919.256 299.399 919.245 300.106 919.492 300.692 cv
919.739 301.278 920.235 301.685 920.952 301.918 cv
921.274 302.023 921.595 302.086 921.944 302.104 cv
922.294 302.122 922.647 302.086 923.025 302.017 cv
922.691 303.044 li
922.322 303.088 921.964 303.094 921.623 303.052 cv
921.269 303.005 920.898 302.926 920.527 302.805 cv
919.513 302.476 918.798 301.902 918.413 301.066 cv
918.012 300.238 917.997 299.277 918.35 298.189 cv
918.708 297.088 919.286 296.319 920.096 295.885 cv
920.907 295.452 921.84 295.399 922.903 295.745 cv
923.249 295.857 923.571 296.003 923.869 296.182 cv
924.166 296.36 924.455 296.564 924.72 296.8 cv
f
928.456 295.608 mo
927.834 297.525 li
930.121 298.268 li
929.84 299.133 li
927.552 298.39 li
926.359 302.062 li
926.179 302.618 926.136 303.001 926.236 303.198 cv
926.333 303.407 926.618 303.581 927.087 303.734 cv
928.225 304.103 li
927.924 305.031 li
926.786 304.661 li
925.921 304.38 925.379 304.026 925.162 303.6 cv
924.945 303.175 924.973 302.541 925.247 301.701 cv
926.44 298.029 li
925.624 297.763 li
925.905 296.898 li
926.721 297.163 li
927.344 295.247 li
928.456 295.608 li
f
930.139 302.798 mo
931.469 298.706 li
932.581 299.067 li
931.264 303.122 li
931.055 303.765 931.026 304.275 931.169 304.677 cv
931.311 305.079 931.63 305.36 932.137 305.525 cv
932.731 305.718 933.273 305.689 933.744 305.418 cv
934.214 305.147 934.556 304.684 934.773 304.017 cv
936.018 300.184 li
937.131 300.546 li
934.934 307.309 li
933.821 306.947 li
934.159 305.908 li
933.75 306.24 933.332 306.433 932.922 306.518 cv
932.503 306.587 932.063 306.553 931.593 306.401 cv
930.814 306.148 930.297 305.72 930.058 305.109 cv
929.802 304.507 929.834 303.738 930.139 302.798 cv
934.315 299.453 mo
934.315 299.453 li
f
943 303.601 mo
942.901 303.486 942.781 303.393 942.645 303.307 cv
942.504 303.234 942.352 303.158 942.178 303.101 cv
941.548 302.896 940.997 302.95 940.531 303.249 cv
940.052 303.545 939.703 304.074 939.454 304.84 cv
938.297 308.401 li
937.184 308.04 li
939.381 301.277 li
940.494 301.638 li
940.153 302.689 li
940.508 302.353 940.917 302.145 941.353 302.067 cv
941.788 301.99 942.277 302.04 942.821 302.217 cv
942.896 302.241 942.978 302.281 943.077 302.313 cv
943.159 302.354 943.254 302.398 943.37 302.463 cv
943 303.601 li
f
949.278 307.923 mo
949.101 308.467 li
943.995 306.808 li
943.795 307.591 943.825 308.256 944.117 308.789 cv
944.396 309.317 944.901 309.699 945.643 309.941 cv
946.063 310.077 946.499 310.164 946.927 310.194 cv
947.355 310.224 947.815 310.195 948.283 310.101 cv
947.942 311.152 li
947.49 311.197 947.038 311.2 946.593 311.138 cv
946.149 311.075 945.7 310.984 945.279 310.848 cv
944.191 310.494 943.439 309.908 943.009 309.085 cv
942.579 308.262 942.547 307.308 942.897 306.233 cv
943.255 305.132 943.836 304.351 944.643 303.888 cv
945.445 303.438 946.37 303.37 947.383 303.699 cv
948.298 303.996 948.919 304.526 949.262 305.28 cv
949.588 306.042 949.603 306.922 949.278 307.923 cv
948.27 307.24 mo
948.454 306.63 948.438 306.092 948.237 305.617 cv
948.019 305.15 947.635 304.819 947.091 304.643 cv
946.472 304.442 945.918 304.467 945.434 304.692 cv
944.951 304.918 944.568 305.34 944.313 305.955 cv
948.27 307.24 li
f
948.146 263.286 mo
948.146 266.786 li
f
948.146 263.286 mo
948.146 266.786 li
@
909.072 271.059 mo
910.296 271.456 li
907.701 279.443 li
912.09 280.869 li
911.757 281.896 li
906.143 280.072 li
909.072 271.059 li
f
917.164 279.894 mo
916.261 279.6 915.607 279.511 915.197 279.596 cv
914.782 279.694 914.497 279.984 914.336 280.478 cv
914.207 280.874 914.227 281.236 914.414 281.542 cv
914.597 281.862 914.92 282.09 915.365 282.234 cv
915.983 282.435 916.546 282.385 917.061 282.061 cv
917.573 281.749 917.947 281.228 918.184 280.498 cv
918.264 280.251 li
917.164 279.894 li
919.526 280.155 mo
918.272 284.013 li
917.16 283.651 li
917.493 282.625 li
917.097 282.961 916.679 283.153 916.248 283.218 cv
915.817 283.283 915.315 283.229 914.771 283.053 cv
914.078 282.828 913.582 282.461 913.299 281.946 cv
913.015 281.43 912.986 280.846 913.199 280.191 cv
913.444 279.437 913.876 278.948 914.524 278.721 cv
915.155 278.503 915.974 278.55 916.988 278.879 cv
918.546 279.386 li
918.582 279.274 li
918.746 278.767 918.702 278.316 918.46 277.923 cv
918.215 277.542 917.793 277.241 917.188 277.044 cv
916.792 276.916 916.405 276.845 916.002 276.823 cv
915.599 276.802 915.208 276.825 914.818 276.89 cv
915.152 275.864 li
915.596 275.844 916.031 275.849 916.439 275.899 cv
916.846 275.949 917.233 276.02 917.604 276.141 cv
918.581 276.458 919.226 276.955 919.543 277.619 cv
919.861 278.282 919.859 279.129 919.526 280.155 cv
f
927.511 282.504 mo
926.185 286.584 li
925.073 286.222 li
926.386 282.179 li
926.595 281.536 926.612 281.022 926.469 280.621 cv
926.326 280.219 926.007 279.938 925.513 279.777 cv
924.907 279.58 924.373 279.625 923.902 279.896 cv
923.431 280.167 923.09 280.63 922.877 281.285 cv
921.635 285.105 li
920.523 284.744 li
922.72 277.981 li
923.833 278.342 li
923.491 279.393 li
923.88 279.082 924.289 278.873 924.724 278.796 cv
925.147 278.715 925.604 278.74 926.073 278.893 cv
926.84 279.142 927.353 279.582 927.592 280.193 cv
927.831 280.803 927.812 281.576 927.511 282.504 cv
f
934.713 283.012 mo
935.902 279.353 li
937.015 279.714 li
933.962 289.111 li
932.849 288.749 li
933.179 287.735 li
932.811 288.067 932.418 288.267 931.999 288.336 cv
931.581 288.405 931.128 288.367 930.633 288.207 cv
929.817 287.942 929.254 287.403 928.944 286.592 cv
928.633 285.78 928.667 284.834 929.013 283.771 cv
929.358 282.708 929.883 281.935 930.615 281.448 cv
931.343 280.974 932.119 280.857 932.935 281.122 cv
933.43 281.283 933.818 281.518 934.112 281.833 cv
934.407 282.147 934.607 282.54 934.713 283.012 cv
930.163 284.144 mo
929.898 284.96 929.849 285.656 930.031 286.234 cv
930.212 286.812 930.609 287.187 931.203 287.38 cv
931.784 287.569 932.314 287.495 932.812 287.138 cv
933.299 286.776 933.681 286.19 933.946 285.374 cv
934.211 284.558 934.243 283.871 934.062 283.293 cv
933.868 282.71 933.487 282.327 932.906 282.138 cv
932.313 281.945 931.766 282.027 931.28 282.389 cv
930.793 282.75 930.428 283.328 930.163 284.144 cv
f
936.954 285.791 mo
940.206 286.847 li
939.885 287.836 li
936.633 286.78 li
936.954 285.791 li
f
943.69 282.307 mo
945.508 282.897 li
945.815 289.777 li
950.12 284.396 li
951.937 284.986 li
949.009 293.999 li
947.822 293.614 li
950.393 285.701 li
946.06 291.128 li
944.836 290.73 li
944.52 283.793 li
941.949 291.706 li
940.762 291.32 li
943.69 282.307 li
f
955.566 292.371 mo
954.663 292.078 954.009 291.988 953.598 292.074 cv
953.184 292.171 952.898 292.461 952.738 292.956 cv
952.609 293.351 952.628 293.713 952.816 294.02 cv
952.999 294.339 953.321 294.567 953.766 294.712 cv
954.385 294.912 954.948 294.863 955.463 294.538 cv
955.975 294.226 956.349 293.705 956.586 292.976 cv
956.666 292.729 li
955.566 292.371 li
957.928 292.633 mo
956.674 296.49 li
955.561 296.129 li
955.895 295.102 li
955.499 295.438 955.081 295.631 954.65 295.696 cv
954.218 295.761 953.716 295.707 953.172 295.53 cv
952.48 295.305 951.984 294.939 951.701 294.423 cv
951.417 293.907 951.388 293.324 951.601 292.668 cv
951.846 291.914 952.278 291.426 952.926 291.199 cv
953.557 290.98 954.376 291.028 955.39 291.357 cv
956.947 291.863 li
956.984 291.752 li
957.148 291.245 957.104 290.793 956.862 290.4 cv
956.617 290.02 956.195 289.719 955.589 289.522 cv
955.194 289.393 954.807 289.322 954.404 289.301 cv
954.001 289.279 953.61 289.303 953.22 289.367 cv
953.554 288.341 li
953.998 288.321 954.433 288.326 954.841 288.376 cv
955.248 288.427 955.635 288.498 956.006 288.618 cv
956.983 288.936 957.628 289.432 957.945 290.096 cv
958.263 290.76 958.261 291.607 957.928 292.633 cv
f
964.741 292.782 mo
964.641 292.668 964.521 292.574 964.385 292.489 cv
964.245 292.416 964.092 292.339 963.919 292.283 cv
963.288 292.078 962.738 292.132 962.272 292.431 cv
961.793 292.727 961.443 293.256 961.194 294.022 cv
960.037 297.583 li
958.924 297.221 li
961.122 290.458 li
962.235 290.82 li
961.893 291.871 li
962.248 291.535 962.658 291.326 963.093 291.249 cv
963.528 291.172 964.018 291.222 964.562 291.398 cv
964.636 291.422 964.719 291.463 964.817 291.495 cv
964.9 291.536 964.995 291.58 965.11 291.645 cv
964.741 292.782 li
f
967.059 289.476 mo
968.172 289.838 li
966.368 295.389 li
970.63 293.548 li
972.051 294.01 li
967.438 296.01 li
970.002 300.821 li
968.556 300.351 li
966.191 295.933 li
965.119 299.234 li
964.006 298.872 li
967.059 289.476 li
f
973.399 294.447 mo
974.512 294.809 li
972.314 301.572 li
971.201 301.21 li
973.399 294.447 li
974.255 291.814 mo
975.367 292.176 li
974.909 293.585 li
973.797 293.223 li
974.255 291.814 li
f
981.59 300.075 mo
980.264 304.155 li
979.151 303.793 li
980.465 299.751 li
980.674 299.108 980.691 298.594 980.548 298.192 cv
980.405 297.79 980.086 297.509 979.592 297.348 cv
978.986 297.151 978.452 297.196 977.981 297.467 cv
977.51 297.738 977.169 298.201 976.956 298.856 cv
975.714 302.677 li
974.602 302.315 li
976.799 295.552 li
977.912 295.914 li
977.57 296.965 li
977.958 296.653 978.368 296.445 978.803 296.367 cv
979.226 296.286 979.682 296.311 980.152 296.464 cv
980.919 296.713 981.432 297.153 981.671 297.764 cv
981.91 298.375 981.891 299.148 981.59 300.075 cv
f
988.053 302.858 mo
988.31 302.067 988.342 301.38 988.165 300.831 cv
987.976 300.277 987.578 299.902 986.985 299.709 cv
986.391 299.516 985.849 299.586 985.371 299.923 cv
984.892 300.26 984.527 300.838 984.27 301.629 cv
984.009 302.433 983.968 303.103 984.158 303.657 cv
984.347 304.21 984.744 304.586 985.338 304.778 cv
985.931 304.971 986.473 304.901 986.952 304.565 cv
987.418 304.224 987.792 303.662 988.053 302.858 cv
988.314 305.841 mo
987.945 306.979 987.408 307.747 986.716 308.151 cv
986.016 308.539 985.145 308.57 984.094 308.229 cv
983.698 308.1 983.352 307.947 983.021 307.785 cv
982.695 307.61 982.377 307.411 982.096 307.183 cv
982.445 306.108 li
982.711 306.385 982.992 306.613 983.285 306.804 cv
983.579 306.995 983.884 307.149 984.218 307.258 cv
984.935 307.491 985.543 307.47 986.035 307.219 cv
986.518 306.952 986.888 306.444 987.137 305.677 cv
987.314 305.133 li
986.95 305.453 986.557 305.653 986.134 305.734 cv
985.712 305.816 985.259 305.778 984.765 305.617 cv
983.924 305.344 983.357 304.818 983.055 304.023 cv
982.753 303.228 982.778 302.307 983.12 301.256 cv
983.457 300.217 983.978 299.457 984.69 298.991 cv
985.401 298.525 986.173 298.42 987.014 298.694 cv
987.509 298.854 987.897 299.09 988.191 299.404 cv
988.486 299.718 988.686 300.112 988.792 300.584 cv
989.126 299.557 li
990.238 299.919 li
988.314 305.841 li
f
995.871 263.286 mo
995.871 266.786 li
f
995.871 263.286 mo
995.871 266.786 li
@
947.055 272.458 mo
945.954 275.845 li
947.488 276.344 li
948.056 276.528 948.533 276.533 948.939 276.337 cv
949.344 276.14 949.642 275.772 949.818 275.228 cv
949.995 274.684 949.967 274.224 949.754 273.827 cv
949.542 273.43 949.157 273.141 948.588 272.956 cv
947.055 272.458 li
946.157 271.059 mo
948.914 271.954 li
949.915 272.28 950.605 272.764 950.976 273.39 cv
951.347 274.016 951.389 274.768 951.104 275.646 cv
950.815 276.536 950.334 277.132 949.67 277.408 cv
949.003 277.697 948.164 277.67 947.162 277.345 cv
945.629 276.847 li
944.452 280.469 li
943.228 280.072 li
946.157 271.059 li
f
956.413 278.027 mo
956.314 277.913 956.194 277.819 956.057 277.734 cv
955.917 277.661 955.764 277.584 955.591 277.528 cv
954.961 277.323 954.41 277.376 953.944 277.676 cv
953.465 277.971 953.116 278.5 952.866 279.267 cv
951.71 282.828 li
950.597 282.466 li
952.794 275.703 li
953.907 276.065 li
953.565 277.116 li
953.921 276.78 954.33 276.571 954.765 276.494 cv
955.201 276.417 955.69 276.466 956.234 276.643 cv
956.308 276.667 956.391 276.708 956.49 276.74 cv
956.572 276.78 956.667 276.825 956.783 276.89 cv
956.413 278.027 li
f
960.281 278.997 mo
959.687 278.804 959.141 278.886 958.642 279.244 cv
958.143 279.601 957.766 280.175 957.504 280.979 cv
957.239 281.795 957.195 282.478 957.389 283.06 cv
957.582 283.642 957.98 284.017 958.585 284.214 cv
959.179 284.407 959.721 284.337 960.22 283.98 cv
960.719 283.622 961.097 283.048 961.362 282.232 cv
961.619 281.441 961.655 280.742 961.461 280.159 cv
961.268 279.577 960.874 279.19 960.281 278.997 cv
960.586 278.057 mo
961.55 278.37 962.2 278.937 962.556 279.736 cv
962.895 280.543 962.898 281.501 962.536 282.614 cv
962.175 283.727 961.609 284.5 960.864 284.941 cv
960.103 285.391 959.249 285.455 958.284 285.142 cv
957.307 284.824 956.641 284.266 956.302 283.459 cv
955.959 282.664 955.968 281.71 956.33 280.597 cv
956.691 279.484 957.245 278.707 957.993 278.254 cv
958.738 277.812 959.609 277.74 960.586 278.057 cv
f
969.238 284.791 mo
969.503 283.975 969.534 283.288 969.353 282.71 cv
969.16 282.128 968.779 281.744 968.198 281.555 cv
967.604 281.363 967.07 281.449 966.584 281.81 cv
966.085 282.168 965.719 282.746 965.454 283.562 cv
965.189 284.378 965.141 285.073 965.334 285.655 cv
965.516 286.234 965.901 286.605 966.494 286.798 cv
967.075 286.986 967.605 286.913 968.104 286.555 cv
968.59 286.194 968.972 285.607 969.238 284.791 cv
966.221 281.2 mo
966.573 280.877 966.966 280.677 967.389 280.595 cv
967.811 280.514 968.276 280.556 968.771 280.716 cv
969.587 280.982 970.146 281.532 970.456 282.344 cv
970.75 283.164 970.733 284.101 970.387 285.165 cv
970.042 286.228 969.501 287.009 968.785 287.487 cv
968.057 287.962 967.285 288.066 966.469 287.801 cv
965.974 287.64 965.574 287.401 965.276 287.099 cv
964.977 286.797 964.777 286.404 964.687 285.923 cv
964.358 286.937 li
963.245 286.576 li
966.298 277.179 li
967.411 277.541 li
966.221 281.2 li
f
974.186 279.742 mo
975.299 280.104 li
972.245 289.5 li
971.133 289.139 li
974.186 279.742 li
f
981.545 288.476 mo
981.368 289.02 li
976.262 287.361 li
976.063 288.143 976.092 288.809 976.384 289.341 cv
976.664 289.869 977.168 290.252 977.91 290.493 cv
978.33 290.63 978.767 290.717 979.194 290.746 cv
979.622 290.776 980.083 290.748 980.55 290.654 cv
980.209 291.705 li
979.757 291.749 979.305 291.753 978.86 291.69 cv
978.416 291.628 977.967 291.537 977.547 291.4 cv
976.459 291.047 975.706 290.461 975.276 289.637 cv
974.847 288.814 974.815 287.861 975.164 286.785 cv
975.522 285.685 976.104 284.903 976.91 284.441 cv
977.713 283.991 978.637 283.922 979.651 284.252 cv
980.566 284.549 981.186 285.079 981.529 285.832 cv
981.856 286.595 981.871 287.474 981.545 288.476 cv
980.537 287.793 mo
980.721 287.183 980.705 286.644 980.504 286.169 cv
980.287 285.702 979.902 285.372 979.358 285.195 cv
978.74 284.994 978.185 285.019 977.702 285.245 cv
977.218 285.471 976.835 285.893 976.581 286.507 cv
980.537 287.793 li
f
989.216 288.973 mo
989.649 288.566 990.099 288.316 990.563 288.194 cv
991.022 288.083 991.52 288.108 992.052 288.281 cv
992.744 288.506 993.208 288.93 993.43 289.549 cv
993.653 290.168 993.622 290.937 993.328 291.84 cv
992.003 295.92 li
990.89 295.558 li
992.204 291.515 li
992.413 290.872 992.446 290.35 992.328 289.956 cv
992.193 289.571 991.899 289.298 991.429 289.145 cv
990.848 288.956 990.326 289.005 989.868 289.28 cv
989.41 289.555 989.08 290.022 988.867 290.677 cv
987.626 294.498 li
986.513 294.136 li
987.827 290.093 li
988.036 289.45 988.069 288.928 987.951 288.534 cv
987.816 288.149 987.51 287.871 987.04 287.719 cv
986.471 287.534 985.95 287.583 985.491 287.858 cv
985.033 288.133 984.704 288.6 984.491 289.255 cv
983.249 293.075 li
982.137 292.714 li
984.334 285.951 li
985.447 286.313 li
985.105 287.363 li
985.485 287.036 985.895 286.827 986.317 286.746 cv
986.728 286.66 987.18 286.698 987.675 286.859 cv
988.169 287.02 988.537 287.276 988.803 287.635 cv
989.069 287.995 989.196 288.446 989.216 288.973 cv
f
1003.72 290.527 mo
1003.3 291.813 li
1003 291.306 1002.66 290.881 1002.26 290.53 cv
1001.85 290.192 1001.4 289.937 1000.88 289.768 cv
999.839 289.43 998.943 289.495 998.194 289.949 cv
997.445 290.402 996.88 291.217 996.494 292.404 cv
996.109 293.59 996.083 294.594 996.422 295.401 cv
996.761 296.208 997.452 296.775 998.491 297.112 cv
999.01 297.281 999.521 297.351 1000.05 297.306 cv
1000.58 297.273 1001.11 297.129 1001.65 296.882 cv
1001.24 298.156 li
1000.71 298.312 1000.19 298.374 999.672 298.357 cv
999.158 298.34 998.627 298.25 998.095 298.077 cv
996.735 297.635 995.792 296.878 995.27 295.792 cv
994.748 294.707 994.734 293.445 995.208 291.986 cv
995.678 290.539 996.431 289.526 997.496 288.943 cv
998.556 288.371 999.768 288.3 1001.13 288.742 cv
1001.67 288.919 1002.16 289.158 1002.58 289.447 cv
1003 289.748 1003.39 290.106 1003.72 290.527 cv
f
1007.41 294.31 mo
1006.82 294.118 1006.27 294.2 1005.77 294.557 cv
1005.27 294.914 1004.9 295.489 1004.63 296.292 cv
1004.37 297.108 1004.33 297.791 1004.52 298.374 cv
1004.71 298.956 1005.11 299.331 1005.72 299.528 cv
1006.31 299.721 1006.85 299.651 1007.35 299.293 cv
1007.85 298.936 1008.23 298.362 1008.49 297.546 cv
1008.75 296.755 1008.79 296.055 1008.59 295.473 cv
1008.4 294.891 1008 294.503 1007.41 294.31 cv
1007.72 293.371 mo
1008.68 293.684 1009.33 294.251 1009.69 295.049 cv
1010.03 295.857 1010.03 296.815 1009.67 297.927 cv
1009.31 299.04 1008.74 299.813 1007.99 300.255 cv
1007.23 300.704 1006.38 300.768 1005.41 300.455 cv
1004.44 300.138 1003.77 299.58 1003.43 298.772 cv
1003.09 297.977 1003.1 297.023 1003.46 295.911 cv
1003.82 294.798 1004.38 294.021 1005.12 293.567 cv
1005.87 293.126 1006.74 293.053 1007.72 293.371 cv
f
1017.45 298.148 mo
1017.89 297.742 1018.34 297.492 1018.8 297.369 cv
1019.26 297.258 1019.76 297.284 1020.29 297.456 cv
1020.98 297.681 1021.45 298.105 1021.67 298.724 cv
1021.89 299.343 1021.86 300.112 1021.57 301.015 cv
1020.24 305.095 li
1019.13 304.733 li
1020.44 300.69 li
1020.65 300.048 1020.68 299.525 1020.57 299.131 cv
1020.43 298.746 1020.14 298.473 1019.67 298.32 cv
1019.09 298.131 1018.57 298.181 1018.11 298.455 cv
1017.65 298.73 1017.32 299.197 1017.11 299.853 cv
1015.86 303.673 li
1014.75 303.311 li
1016.07 299.268 li
1016.27 298.625 1016.31 298.103 1016.19 297.709 cv
1016.06 297.324 1015.75 297.047 1015.28 296.894 cv
1014.71 296.709 1014.19 296.758 1013.73 297.033 cv
1013.27 297.308 1012.94 297.775 1012.73 298.43 cv
1011.49 302.251 li
1010.38 301.889 li
1012.57 295.126 li
1013.69 295.488 li
1013.34 296.539 li
1013.72 296.211 1014.13 296.002 1014.56 295.921 cv
1014.97 295.836 1015.42 295.873 1015.91 296.034 cv
1016.41 296.195 1016.78 296.451 1017.04 296.811 cv
1017.31 297.171 1017.43 297.622 1017.45 298.148 cv
f
1023.86 305.15 mo
1022.7 308.723 li
1021.59 308.361 li
1024.61 299.039 li
1025.73 299.401 li
1025.39 300.427 li
1025.75 300.103 1026.14 299.903 1026.56 299.822 cv
1026.98 299.741 1027.45 299.782 1027.94 299.943 cv
1028.76 300.208 1029.32 300.759 1029.63 301.57 cv
1029.92 302.39 1029.91 303.328 1029.56 304.391 cv
1029.21 305.454 1028.67 306.236 1027.96 306.714 cv
1027.23 307.188 1026.46 307.292 1025.64 307.027 cv
1025.15 306.867 1024.75 306.627 1024.45 306.325 cv
1024.15 306.023 1023.95 305.63 1023.86 305.15 cv
1028.41 304.018 mo
1028.68 303.202 1028.71 302.515 1028.53 301.936 cv
1028.33 301.354 1027.95 300.971 1027.37 300.782 cv
1026.78 300.589 1026.24 300.675 1025.76 301.037 cv
1025.26 301.394 1024.89 301.972 1024.63 302.788 cv
1024.36 303.604 1024.31 304.299 1024.51 304.882 cv
1024.69 305.46 1025.07 305.831 1025.67 306.024 cv
1026.25 306.213 1026.78 306.139 1027.28 305.782 cv
1027.76 305.42 1028.15 304.834 1028.41 304.018 cv
f
1033.36 298.969 mo
1034.47 299.33 li
1031.42 308.727 li
1030.31 308.365 li
1033.36 298.969 li
f
1040.72 307.702 mo
1040.54 308.246 li
1035.43 306.587 li
1035.24 307.37 1035.27 308.035 1035.56 308.568 cv
1035.84 309.096 1036.34 309.478 1037.08 309.72 cv
1037.5 309.856 1037.94 309.943 1038.37 309.973 cv
1038.8 310.003 1039.26 309.974 1039.72 309.88 cv
1039.38 310.931 li
1038.93 310.976 1038.48 310.979 1038.03 310.917 cv
1037.59 310.854 1037.14 310.763 1036.72 310.627 cv
1035.63 310.273 1034.88 309.687 1034.45 308.864 cv
1034.02 308.041 1033.99 307.087 1034.34 306.012 cv
1034.69 304.911 1035.28 304.13 1036.08 303.667 cv
1036.89 303.217 1037.81 303.149 1038.82 303.478 cv
1039.74 303.775 1040.36 304.305 1040.7 305.059 cv
1041.03 305.821 1041.04 306.701 1040.72 307.702 cv
1039.71 307.019 mo
1039.89 306.409 1039.88 305.871 1039.68 305.396 cv
1039.46 304.929 1039.07 304.598 1038.53 304.422 cv
1037.91 304.221 1037.36 304.246 1036.87 304.471 cv
1036.39 304.697 1036.01 305.119 1035.75 305.734 cv
1039.71 307.019 li
f
1049.17 307.017 mo
1045.65 309.511 li
1047.1 313.82 li
1045.79 313.395 li
1044.68 310.098 li
1041.85 312.117 li
1040.54 311.691 li
1044.31 309.007 li
1042.96 305.001 li
1044.27 305.426 li
1045.28 308.42 li
1047.86 306.591 li
1049.17 307.017 li
f
1043.6 263.286 mo
1043.6 266.786 li
f
1043.6 263.286 mo
1043.6 266.786 li
@
1011.35 273.111 mo
1010.97 274.298 li
1010.57 273.923 1010.19 273.621 1009.82 273.377 cv
1009.43 273.142 1009.05 272.952 1008.68 272.831 cv
1008.01 272.614 1007.45 272.581 1007.01 272.712 cv
1006.57 272.855 1006.27 273.17 1006.12 273.64 cv
1005.99 274.035 1006 274.381 1006.19 274.659 cv
1006.35 274.945 1006.76 275.255 1007.39 275.595 cv
1008.08 275.985 li
1008.93 276.451 1009.49 276.977 1009.79 277.55 cv
1010.07 278.136 1010.11 278.789 1009.87 279.519 cv
1009.58 280.397 1009.08 280.956 1008.35 281.212 cv
1007.61 281.464 1006.69 281.41 1005.56 281.044 cv
1005.13 280.903 1004.69 280.705 1004.23 280.462 cv
1003.78 280.219 1003.33 279.922 1002.89 279.56 cv
1003.3 278.299 li
1003.7 278.744 1004.11 279.11 1004.54 279.399 cv
1004.96 279.7 1005.41 279.915 1005.88 280.067 cv
1006.57 280.292 1007.15 280.329 1007.62 280.181 cv
1008.08 280.03 1008.4 279.711 1008.57 279.192 cv
1008.71 278.747 1008.69 278.356 1008.5 278.021 cv
1008.31 277.685 1007.92 277.355 1007.34 277.03 cv
1006.65 276.641 li
1005.79 276.171 1005.23 275.673 1004.95 275.145 cv
1004.67 274.629 1004.64 274.033 1004.87 273.341 cv
1005.12 272.55 1005.6 272.008 1006.32 271.735 cv
1007.02 271.458 1007.88 271.476 1008.87 271.798 cv
1009.29 271.934 1009.69 272.108 1010.12 272.327 cv
1010.52 272.542 1010.93 272.81 1011.35 273.111 cv
f
1014.84 274.285 mo
1014.21 276.201 li
1016.5 276.944 li
1016.22 277.81 li
1013.93 277.067 li
1012.74 280.739 li
1012.56 281.295 1012.52 281.678 1012.62 281.874 cv
1012.71 282.083 1013 282.258 1013.47 282.41 cv
1014.61 282.78 li
1014.3 283.707 li
1013.17 283.338 li
1012.3 283.057 1011.76 282.703 1011.54 282.277 cv
1011.33 281.851 1011.35 281.218 1011.63 280.377 cv
1012.82 276.705 li
1012 276.44 li
1012.29 275.574 li
1013.1 275.84 li
1013.72 273.923 li
1014.84 274.285 li
f
1021.54 279.73 mo
1021.44 279.616 1021.32 279.522 1021.19 279.437 cv
1021.05 279.364 1020.89 279.287 1020.72 279.231 cv
1020.09 279.026 1019.54 279.08 1019.07 279.379 cv
1018.59 279.675 1018.25 280.204 1018 280.97 cv
1016.84 284.531 li
1015.73 284.169 li
1017.92 277.406 li
1019.04 277.768 li
1018.7 278.819 li
1019.05 278.483 1019.46 278.274 1019.9 278.197 cv
1020.33 278.12 1020.82 278.17 1021.36 278.346 cv
1021.44 278.37 1021.52 278.411 1021.62 278.443 cv
1021.7 278.484 1021.8 278.528 1021.91 278.593 cv
1021.54 279.73 li
f
1021.6 283.126 mo
1022.93 279.033 li
1024.04 279.395 li
1022.73 283.45 li
1022.52 284.093 1022.49 284.603 1022.63 285.005 cv
1022.77 285.407 1023.09 285.688 1023.6 285.853 cv
1024.19 286.045 1024.74 286.017 1025.21 285.746 cv
1025.68 285.475 1026.02 285.012 1026.24 284.344 cv
1027.48 280.512 li
1028.59 280.873 li
1026.4 287.636 li
1025.28 287.275 li
1025.62 286.236 li
1025.21 286.568 1024.79 286.76 1024.38 286.846 cv
1023.97 286.915 1023.53 286.881 1023.06 286.728 cv
1022.28 286.475 1021.76 286.047 1021.52 285.437 cv
1021.27 284.834 1021.3 284.065 1021.6 283.126 cv
1025.78 279.78 mo
1025.78 279.78 li
f
1035.67 283.459 mo
1035.33 284.497 li
1035.07 284.22 1034.8 283.996 1034.5 283.805 cv
1034.21 283.614 1033.92 283.464 1033.6 283.359 cv
1032.88 283.126 1032.23 283.177 1031.69 283.505 cv
1031.14 283.834 1030.74 284.413 1030.47 285.229 cv
1030.2 286.057 1030.19 286.765 1030.44 287.351 cv
1030.69 287.937 1031.18 288.344 1031.9 288.577 cv
1032.22 288.681 1032.54 288.745 1032.89 288.763 cv
1033.24 288.78 1033.6 288.745 1033.97 288.676 cv
1033.64 289.702 li
1033.27 289.746 1032.91 289.753 1032.57 289.711 cv
1032.22 289.664 1031.85 289.585 1031.48 289.464 cv
1030.46 289.135 1029.75 288.56 1029.36 287.725 cv
1028.96 286.897 1028.94 285.935 1029.3 284.847 cv
1029.66 283.747 1030.23 282.978 1031.04 282.544 cv
1031.86 282.111 1032.79 282.058 1033.85 282.404 cv
1034.2 282.516 1034.52 282.662 1034.82 282.84 cv
1035.11 283.019 1035.4 283.222 1035.67 283.459 cv
f
1039.4 282.267 mo
1038.78 284.183 li
1041.07 284.927 li
1040.79 285.792 li
1038.5 285.049 li
1037.31 288.721 li
1037.13 289.277 1037.08 289.66 1037.18 289.856 cv
1037.28 290.065 1037.57 290.24 1038.04 290.393 cv
1039.17 290.762 li
1038.87 291.69 li
1037.73 291.32 li
1036.87 291.039 1036.33 290.685 1036.11 290.259 cv
1035.89 289.833 1035.92 289.2 1036.19 288.359 cv
1037.39 284.687 li
1036.57 284.422 li
1036.85 283.557 li
1037.67 283.822 li
1038.29 281.905 li
1039.4 282.267 li
f
1041.09 289.457 mo
1042.42 285.364 li
1043.53 285.726 li
1042.21 289.781 li
1042 290.424 1041.97 290.934 1042.12 291.336 cv
1042.26 291.738 1042.58 292.019 1043.08 292.184 cv
1043.68 292.377 1044.22 292.348 1044.69 292.077 cv
1045.16 291.806 1045.5 291.343 1045.72 290.676 cv
1046.97 286.843 li
1048.08 287.204 li
1045.88 293.967 li
1044.77 293.606 li
1045.11 292.567 li
1044.7 292.899 1044.28 293.091 1043.87 293.177 cv
1043.45 293.246 1043.01 293.212 1042.54 293.059 cv
1041.76 292.806 1041.24 292.379 1041.01 291.768 cv
1040.75 291.165 1040.78 290.396 1041.09 289.457 cv
1045.26 286.112 mo
1045.26 286.112 li
f
1053.95 290.26 mo
1053.85 290.145 1053.73 290.052 1053.59 289.966 cv
1053.45 289.893 1053.3 289.816 1053.13 289.76 cv
1052.5 289.555 1051.95 289.609 1051.48 289.908 cv
1051 290.204 1050.65 290.733 1050.4 291.499 cv
1049.24 295.06 li
1048.13 294.698 li
1050.33 287.935 li
1051.44 288.297 li
1051.1 289.348 li
1051.46 289.012 1051.87 288.804 1052.3 288.726 cv
1052.74 288.649 1053.23 288.699 1053.77 288.875 cv
1053.84 288.9 1053.93 288.94 1054.02 288.972 cv
1054.11 289.013 1054.2 289.057 1054.32 289.122 cv
1053.95 290.26 li
f
1060.23 294.582 mo
1060.05 295.126 li
1054.94 293.467 li
1054.74 294.249 1054.77 294.915 1055.06 295.447 cv
1055.34 295.976 1055.85 296.358 1056.59 296.599 cv
1057.01 296.736 1057.45 296.823 1057.88 296.853 cv
1058.3 296.882 1058.76 296.854 1059.23 296.76 cv
1058.89 297.811 li
1058.44 297.856 1057.99 297.859 1057.54 297.797 cv
1057.1 297.734 1056.65 297.643 1056.23 297.507 cv
1055.14 297.153 1054.39 296.567 1053.96 295.744 cv
1053.53 294.921 1053.5 293.967 1053.84 292.891 cv
1054.2 291.791 1054.78 291.01 1055.59 290.547 cv
1056.39 290.097 1057.32 290.028 1058.33 290.358 cv
1059.25 290.655 1059.87 291.185 1060.21 291.939 cv
1060.54 292.701 1060.55 293.581 1060.23 294.582 cv
1059.22 293.899 mo
1059.4 293.289 1059.39 292.751 1059.18 292.275 cv
1058.97 291.808 1058.58 291.478 1058.04 291.301 cv
1057.42 291.101 1056.87 291.125 1056.38 291.351 cv
1055.9 291.577 1055.52 291.999 1055.26 292.613 cv
1059.22 293.899 li
f
1063.83 289.835 mo
1065.06 290.233 li
1062.13 299.246 li
1060.9 298.848 li
1063.83 289.835 li
f
1071.45 297.765 mo
1070.13 301.845 li
1069.01 301.484 li
1070.33 297.441 li
1070.54 296.798 1070.55 296.284 1070.41 295.882 cv
1070.27 295.48 1069.95 295.199 1069.45 295.038 cv
1068.85 294.841 1068.31 294.886 1067.84 295.157 cv
1067.37 295.428 1067.03 295.891 1066.82 296.546 cv
1065.58 300.367 li
1064.46 300.005 li
1066.66 293.242 li
1067.77 293.604 li
1067.43 294.655 li
1067.82 294.343 1068.23 294.135 1068.67 294.057 cv
1069.09 293.976 1069.55 294.001 1070.02 294.154 cv
1070.78 294.403 1071.29 294.843 1071.53 295.454 cv
1071.77 296.065 1071.75 296.838 1071.45 297.765 cv
f
1078.82 294.281 mo
1078.52 295.208 li
1077.45 294.862 li
1077.06 294.734 1076.75 294.728 1076.54 294.84 cv
1076.33 294.949 1076.17 295.209 1076.03 295.63 cv
1075.84 296.223 li
1077.67 296.818 li
1077.38 297.683 li
1075.55 297.088 li
1073.64 302.986 li
1072.53 302.624 li
1074.44 296.727 li
1073.38 296.381 li
1073.66 295.516 li
1074.72 295.861 li
1074.88 295.392 li
1075.12 294.65 1075.47 294.15 1075.93 293.916 cv
1076.39 293.682 1077 293.69 1077.77 293.939 cv
1078.82 294.281 li
f
1081.26 298.846 mo
1080.66 298.653 1080.12 298.735 1079.62 299.093 cv
1079.12 299.45 1078.74 300.024 1078.48 300.828 cv
1078.22 301.644 1078.17 302.327 1078.37 302.909 cv
1078.56 303.491 1078.96 303.867 1079.56 304.063 cv
1080.16 304.256 1080.7 304.186 1081.2 303.829 cv
1081.7 303.472 1082.07 302.897 1082.34 302.081 cv
1082.6 301.29 1082.63 300.591 1082.44 300.009 cv
1082.24 299.426 1081.85 299.039 1081.26 298.846 cv
1081.56 297.906 mo
1082.53 298.22 1083.18 298.786 1083.53 299.585 cv
1083.87 300.392 1083.87 301.35 1083.51 302.463 cv
1083.15 303.576 1082.59 304.349 1081.84 304.79 cv
1081.08 305.24 1080.23 305.304 1079.26 304.991 cv
1078.28 304.673 1077.62 304.115 1077.28 303.308 cv
1076.94 302.513 1076.95 301.559 1077.31 300.446 cv
1077.67 299.334 1078.22 298.556 1078.97 298.103 cv
1079.72 297.661 1080.59 297.589 1081.56 297.906 cv
f
1091.32 263.286 mo
1091.32 266.786 li
f
1091.32 263.286 mo
1091.32 266.786 li
@
1061.57 273.944 mo
1061.15 275.23 li
1060.85 274.723 1060.51 274.298 1060.11 273.947 cv
1059.7 273.609 1059.25 273.354 1058.73 273.185 cv
1057.69 272.847 1056.8 272.912 1056.05 273.366 cv
1055.3 273.819 1054.73 274.634 1054.35 275.82 cv
1053.96 277.007 1053.94 278.011 1054.28 278.818 cv
1054.61 279.625 1055.31 280.191 1056.34 280.529 cv
1056.86 280.698 1057.37 280.768 1057.91 280.723 cv
1058.44 280.69 1058.96 280.546 1059.51 280.299 cv
1059.09 281.573 li
1058.56 281.729 1058.04 281.79 1057.52 281.774 cv
1057.01 281.757 1056.48 281.667 1055.95 281.494 cv
1054.59 281.052 1053.64 280.294 1053.12 279.209 cv
1052.6 278.124 1052.59 276.862 1053.06 275.403 cv
1053.53 273.956 1054.28 272.943 1055.35 272.36 cv
1056.41 271.788 1057.62 271.717 1058.98 272.159 cv
1059.53 272.336 1060.01 272.575 1060.43 272.864 cv
1060.86 273.165 1061.24 273.523 1061.57 273.944 cv
f
1065.26 277.727 mo
1064.67 277.534 1064.12 277.617 1063.63 277.974 cv
1063.13 278.331 1062.75 278.906 1062.49 279.709 cv
1062.22 280.525 1062.18 281.208 1062.37 281.79 cv
1062.57 282.373 1062.96 282.748 1063.57 282.945 cv
1064.16 283.138 1064.7 283.068 1065.2 282.71 cv
1065.7 282.353 1066.08 281.779 1066.34 280.963 cv
1066.6 280.171 1066.64 279.472 1066.44 278.89 cv
1066.25 278.308 1065.86 277.92 1065.26 277.727 cv
1065.57 276.788 mo
1066.53 277.101 1067.18 277.668 1067.54 278.466 cv
1067.88 279.274 1067.88 280.232 1067.52 281.344 cv
1067.16 282.457 1066.59 283.23 1065.85 283.672 cv
1065.09 284.121 1064.23 284.185 1063.27 283.872 cv
1062.29 283.555 1061.62 282.997 1061.29 282.189 cv
1060.94 281.394 1060.95 280.44 1061.31 279.328 cv
1061.67 278.215 1062.23 277.438 1062.98 276.984 cv
1063.72 276.543 1064.59 276.47 1065.57 276.788 cv
f
1075.31 281.565 mo
1075.74 281.159 1076.19 280.909 1076.65 280.786 cv
1077.11 280.675 1077.61 280.7 1078.14 280.873 cv
1078.84 281.098 1079.3 281.522 1079.52 282.141 cv
1079.74 282.76 1079.71 283.529 1079.42 284.432 cv
1078.09 288.512 li
1076.98 288.15 li
1078.3 284.107 li
1078.5 283.465 1078.54 282.942 1078.42 282.548 cv
1078.28 282.163 1077.99 281.89 1077.52 281.737 cv
1076.94 281.548 1076.42 281.597 1075.96 281.872 cv
1075.5 282.147 1075.17 282.614 1074.96 283.269 cv
1073.72 287.09 li
1072.6 286.728 li
1073.92 282.685 li
1074.13 282.042 1074.16 281.52 1074.04 281.126 cv
1073.91 280.741 1073.6 280.464 1073.13 280.311 cv
1072.56 280.126 1072.04 280.175 1071.58 280.45 cv
1071.12 280.725 1070.79 281.192 1070.58 281.847 cv
1069.34 285.668 li
1068.23 285.306 li
1070.43 278.543 li
1071.54 278.905 li
1071.2 279.956 li
1071.58 279.628 1071.99 279.419 1072.41 279.338 cv
1072.82 279.253 1073.27 279.29 1073.77 279.451 cv
1074.26 279.612 1074.63 279.868 1074.89 280.228 cv
1075.16 280.587 1075.29 281.039 1075.31 281.565 cv
f
1086.26 287.434 mo
1086.53 286.618 1086.56 285.932 1086.38 285.353 cv
1086.19 284.771 1085.8 284.388 1085.22 284.199 cv
1084.63 284.006 1084.1 284.092 1083.61 284.454 cv
1083.11 284.811 1082.74 285.389 1082.48 286.205 cv
1082.21 287.021 1082.17 287.716 1082.36 288.299 cv
1082.54 288.877 1082.93 289.248 1083.52 289.441 cv
1084.1 289.63 1084.63 289.556 1085.13 289.199 cv
1085.62 288.837 1086 288.25 1086.26 287.434 cv
1083.25 283.844 mo
1083.6 283.52 1083.99 283.32 1084.41 283.239 cv
1084.84 283.157 1085.3 283.199 1085.8 283.36 cv
1086.61 283.625 1087.17 284.176 1087.48 284.987 cv
1087.78 285.807 1087.76 286.745 1087.41 287.808 cv
1087.07 288.871 1086.53 289.652 1085.81 290.131 cv
1085.08 290.605 1084.31 290.709 1083.49 290.444 cv
1083 290.284 1082.6 290.044 1082.3 289.742 cv
1082 289.44 1081.8 289.047 1081.71 288.567 cv
1081.38 289.581 li
1080.27 289.219 li
1083.32 279.823 li
1084.44 280.184 li
1083.25 283.844 li
f
1090.36 285.019 mo
1091.47 285.38 li
1089.27 292.143 li
1088.16 291.782 li
1090.36 285.019 li
1091.21 282.385 mo
1092.32 282.747 li
1091.87 284.156 li
1090.75 283.795 li
1091.21 282.385 li
f
1098.55 290.647 mo
1097.22 294.727 li
1096.11 294.365 li
1097.42 290.322 li
1097.63 289.679 1097.65 289.165 1097.5 288.763 cv
1097.36 288.362 1097.04 288.08 1096.55 287.92 cv
1095.94 287.723 1095.41 287.768 1094.94 288.039 cv
1094.47 288.31 1094.13 288.773 1093.91 289.428 cv
1092.67 293.248 li
1091.56 292.887 li
1093.76 286.124 li
1094.87 286.485 li
1094.53 287.536 li
1094.92 287.225 1095.32 287.016 1095.76 286.939 cv
1096.18 286.858 1096.64 286.883 1097.11 287.036 cv
1097.88 287.285 1098.39 287.725 1098.63 288.335 cv
1098.87 288.946 1098.85 289.719 1098.55 290.647 cv
f
1103.62 293.046 mo
1102.71 292.753 1102.06 292.663 1101.65 292.748 cv
1101.24 292.846 1100.95 293.136 1100.79 293.631 cv
1100.66 294.026 1100.68 294.388 1100.87 294.695 cv
1101.05 295.014 1101.37 295.242 1101.82 295.386 cv
1102.44 295.587 1103 295.538 1103.51 295.213 cv
1104.03 294.901 1104.4 294.38 1104.64 293.651 cv
1104.72 293.403 li
1103.62 293.046 li
1105.98 293.308 mo
1104.73 297.165 li
1103.61 296.803 li
1103.95 295.777 li
1103.55 296.113 1103.13 296.306 1102.7 296.371 cv
1102.27 296.435 1101.77 296.382 1101.22 296.205 cv
1100.53 295.98 1100.04 295.614 1099.75 295.098 cv
1099.47 294.582 1099.44 293.999 1099.65 293.343 cv
1099.9 292.589 1100.33 292.101 1100.98 291.874 cv
1101.61 291.655 1102.43 291.702 1103.44 292.032 cv
1105 292.538 li
1105.03 292.427 li
1105.2 291.92 1105.16 291.468 1104.91 291.075 cv
1104.67 290.695 1104.25 290.394 1103.64 290.197 cv
1103.25 290.068 1102.86 289.997 1102.46 289.976 cv
1102.05 289.954 1101.66 289.977 1101.27 290.042 cv
1101.61 289.016 li
1102.05 288.996 1102.48 289.001 1102.89 289.051 cv
1103.3 289.102 1103.69 289.173 1104.06 289.293 cv
1105.03 289.611 1105.68 290.107 1106 290.771 cv
1106.31 291.434 1106.31 292.281 1105.98 293.308 cv
f
1110.93 289.586 mo
1110.31 291.503 li
1112.6 292.246 li
1112.32 293.111 li
1110.03 292.368 li
1108.84 296.04 li
1108.66 296.597 1108.61 296.979 1108.71 297.176 cv
1108.81 297.385 1109.09 297.559 1109.56 297.712 cv
1110.7 298.082 li
1110.4 299.009 li
1109.26 298.639 li
1108.4 298.358 1107.86 298.005 1107.64 297.579 cv
1107.42 297.153 1107.45 296.519 1107.72 295.679 cv
1108.92 292.007 li
1108.1 291.742 li
1108.38 290.876 li
1109.2 291.141 li
1109.82 289.225 li
1110.93 289.586 li
f
1114.06 292.72 mo
1115.17 293.082 li
1112.97 299.845 li
1111.86 299.483 li
1114.06 292.72 li
1114.91 290.087 mo
1116.03 290.448 li
1115.57 291.858 li
1114.45 291.496 li
1114.91 290.087 li
f
1119.86 295.467 mo
1119.27 295.275 1118.72 295.357 1118.22 295.714 cv
1117.72 296.071 1117.35 296.646 1117.09 297.449 cv
1116.82 298.265 1116.78 298.948 1116.97 299.531 cv
1117.16 300.113 1117.56 300.488 1118.17 300.685 cv
1118.76 300.878 1119.3 300.808 1119.8 300.45 cv
1120.3 300.093 1120.68 299.519 1120.94 298.703 cv
1121.2 297.912 1121.24 297.212 1121.04 296.63 cv
1120.85 296.048 1120.46 295.66 1119.86 295.467 cv
1120.17 294.528 mo
1121.13 294.841 1121.78 295.408 1122.14 296.207 cv
1122.48 297.014 1122.48 297.972 1122.12 299.084 cv
1121.76 300.197 1121.19 300.97 1120.45 301.412 cv
1119.68 301.861 1118.83 301.925 1117.87 301.612 cv
1116.89 301.295 1116.22 300.737 1115.88 299.929 cv
1115.54 299.134 1115.55 298.181 1115.91 297.068 cv
1116.27 295.955 1116.83 295.178 1117.57 294.724 cv
1118.32 294.283 1119.19 294.21 1120.17 294.528 cv
f
1129.81 300.806 mo
1128.49 304.886 li
1127.38 304.525 li
1128.69 300.482 li
1128.9 299.839 1128.92 299.325 1128.77 298.923 cv
1128.63 298.521 1128.31 298.24 1127.82 298.079 cv
1127.21 297.882 1126.68 297.927 1126.21 298.198 cv
1125.73 298.469 1125.39 298.932 1125.18 299.587 cv
1123.94 303.408 li
1122.83 303.046 li
1125.02 296.283 li
1126.14 296.645 li
1125.79 297.696 li
1126.18 297.384 1126.59 297.176 1127.03 297.098 cv
1127.45 297.017 1127.91 297.042 1128.38 297.195 cv
1129.14 297.444 1129.66 297.884 1129.9 298.495 cv
1130.13 299.106 1130.12 299.879 1129.81 300.806 cv
f
911.186 329.922 mo
910.57 330.986 910.122 332.022 909.828 333.044 cv
909.52 334.066 909.38 335.102 909.38 336.152 cv
909.38 337.216 909.52 338.252 909.828 339.274 cv
910.122 340.31 910.57 341.332 911.186 342.382 cv
910.094 342.382 li
909.408 341.304 908.89 340.268 908.554 339.232 cv
908.218 338.196 908.05 337.174 908.05 336.152 cv
908.05 335.144 908.218 334.122 908.554 333.086 cv
908.89 332.05 909.394 331 910.094 329.922 cv
911.186 329.922 li
f
919.138 333.184 mo
919.138 334.36 li
918.774 334.164 918.424 334.024 918.06 333.926 cv
917.696 333.828 917.346 333.772 916.982 333.772 cv
916.17 333.772 915.526 334.038 915.078 334.556 cv
914.63 335.074 914.406 335.802 914.406 336.726 cv
914.406 337.664 914.63 338.392 915.078 338.91 cv
915.526 339.428 916.17 339.68 916.982 339.68 cv
917.346 339.68 917.696 339.638 918.06 339.54 cv
918.424 339.442 918.774 339.288 919.138 339.092 cv
919.138 340.254 li
918.774 340.422 918.41 340.548 918.046 340.618 cv
917.668 340.688 917.262 340.73 916.842 340.73 cv
915.694 340.73 914.77 340.38 914.098 339.652 cv
913.412 338.938 913.076 337.958 913.076 336.726 cv
913.076 335.48 913.412 334.5 914.098 333.786 cv
914.784 333.072 915.722 332.708 916.926 332.708 cv
917.318 332.708 917.696 332.75 918.06 332.834 cv
918.424 332.918 918.788 333.03 919.138 333.184 cv
f
921.126 329.922 mo
922.218 329.922 li
922.89 331 923.408 332.05 923.744 333.086 cv
924.08 334.122 924.262 335.144 924.262 336.152 cv
924.262 337.174 924.08 338.196 923.744 339.232 cv
923.408 340.268 922.89 341.304 922.218 342.382 cv
921.126 342.382 li
921.728 341.332 922.176 340.31 922.484 339.274 cv
922.778 338.252 922.932 337.216 922.932 336.152 cv
922.932 335.102 922.778 334.066 922.484 333.044 cv
922.176 332.022 921.728 330.986 921.126 329.922 cv
f
930.254 331.7 mo
928.378 336.782 li
932.13 336.782 li
930.254 331.7 li
929.47 330.342 mo
931.038 330.342 li
934.93 340.548 li
933.488 340.548 li
932.564 337.93 li
927.958 337.93 li
927.034 340.548 li
925.578 340.548 li
929.47 330.342 li
f
941.259 335.76 mo
941.553 335.872 941.847 336.082 942.127 336.404 cv
942.407 336.74 942.687 337.188 942.967 337.762 cv
944.367 340.548 li
942.883 340.548 li
941.581 337.93 li
941.245 337.258 940.909 336.796 940.601 336.572 cv
940.279 336.348 939.845 336.236 939.299 336.236 cv
937.801 336.236 li
937.801 340.548 li
936.415 340.548 li
936.415 330.342 li
939.537 330.342 li
940.699 330.342 941.567 330.594 942.141 331.07 cv
942.715 331.56 943.009 332.302 943.009 333.282 cv
943.009 333.926 942.855 334.472 942.561 334.892 cv
942.253 335.312 941.819 335.606 941.259 335.76 cv
937.801 331.476 mo
937.801 335.102 li
939.537 335.102 li
940.195 335.102 940.699 334.948 941.035 334.64 cv
941.371 334.332 941.553 333.884 941.553 333.282 cv
941.553 332.694 941.371 332.246 941.035 331.938 cv
940.699 331.63 940.195 331.476 939.537 331.476 cv
937.801 331.476 li
f
950.989 335.76 mo
951.283 335.872 951.577 336.082 951.857 336.404 cv
952.137 336.74 952.417 337.188 952.697 337.762 cv
954.097 340.548 li
952.613 340.548 li
951.311 337.93 li
950.975 337.258 950.639 336.796 950.331 336.572 cv
950.009 336.348 949.575 336.236 949.029 336.236 cv
947.531 336.236 li
947.531 340.548 li
946.145 340.548 li
946.145 330.342 li
949.267 330.342 li
950.429 330.342 951.297 330.594 951.871 331.07 cv
952.445 331.56 952.739 332.302 952.739 333.282 cv
952.739 333.926 952.585 334.472 952.291 334.892 cv
951.983 335.312 951.549 335.606 950.989 335.76 cv
947.531 331.476 mo
947.531 335.102 li
949.267 335.102 li
949.925 335.102 950.429 334.948 950.765 334.64 cv
951.101 334.332 951.283 333.884 951.283 333.282 cv
951.283 332.694 951.101 332.246 950.765 331.938 cv
950.429 331.63 949.925 331.476 949.267 331.476 cv
947.531 331.476 li
f
958.955 331.252 mo
958.241 331.252 957.709 331.602 957.345 332.302 cv
956.981 333.002 956.813 334.052 956.813 335.452 cv
956.813 336.852 956.981 337.902 957.345 338.602 cv
957.709 339.302 958.241 339.652 958.955 339.652 cv
959.669 339.652 960.201 339.302 960.565 338.602 cv
960.915 337.902 961.097 336.852 961.097 335.452 cv
961.097 334.052 960.915 333.002 960.565 332.302 cv
960.201 331.602 959.669 331.252 958.955 331.252 cv
958.955 330.16 mo
960.089 330.16 960.957 330.622 961.573 331.518 cv
962.175 332.428 962.483 333.744 962.483 335.452 cv
962.483 337.174 962.175 338.49 961.573 339.386 cv
960.957 340.282 960.089 340.73 958.955 340.73 cv
957.807 340.73 956.925 340.282 956.323 339.386 cv
955.721 338.49 955.427 337.174 955.427 335.452 cv
955.427 333.744 955.721 332.428 956.323 331.518 cv
956.925 330.622 957.807 330.16 958.955 330.16 cv
f
964.905 338.812 mo
966.347 338.812 li
966.347 340.548 li
964.905 340.548 li
964.905 338.812 li
f
969.595 339.386 mo
971.849 339.386 li
971.849 331.602 li
969.399 332.092 li
969.399 330.832 li
971.835 330.342 li
973.221 330.342 li
973.221 339.386 li
975.475 339.386 li
975.475 340.548 li
969.595 340.548 li
969.595 339.386 li
f
792.326 263.286 mo
788.826 263.286 li
f
792.326 263.286 mo
788.826 263.286 li
@
767.513 259.311 mo
766.798 259.311 766.266 259.661 765.902 260.361 cv
765.539 261.061 765.37 262.111 765.37 263.511 cv
765.37 264.911 765.539 265.961 765.902 266.661 cv
766.266 267.361 766.798 267.711 767.513 267.711 cv
768.227 267.711 768.758 267.361 769.122 266.661 cv
769.472 265.961 769.654 264.911 769.654 263.511 cv
769.654 262.111 769.472 261.061 769.122 260.361 cv
768.758 259.661 768.227 259.311 767.513 259.311 cv
767.513 258.219 mo
768.646 258.219 769.514 258.681 770.13 259.577 cv
770.732 260.487 771.04 261.803 771.04 263.511 cv
771.04 265.233 770.732 266.549 770.13 267.445 cv
769.514 268.341 768.646 268.789 767.513 268.789 cv
766.365 268.789 765.482 268.341 764.88 267.445 cv
764.279 266.549 763.984 265.233 763.984 263.511 cv
763.984 261.803 764.279 260.487 764.88 259.577 cv
765.482 258.681 766.365 258.219 767.513 258.219 cv
f
773.462 266.871 mo
774.904 266.871 li
774.904 268.607 li
773.462 268.607 li
773.462 266.871 li
f
778.152 267.445 mo
780.406 267.445 li
780.406 259.661 li
777.956 260.151 li
777.956 258.891 li
780.392 258.401 li
781.778 258.401 li
781.778 267.445 li
784.032 267.445 li
784.032 268.607 li
778.152 268.607 li
778.152 267.445 li
f
792.326 231.95 mo
788.826 231.95 li
f
792.326 231.95 mo
788.826 231.95 li
@
767.513 227.974 mo
766.798 227.974 766.266 228.324 765.902 229.024 cv
765.539 229.724 765.37 230.774 765.37 232.174 cv
765.37 233.574 765.539 234.624 765.902 235.324 cv
766.266 236.024 766.798 236.374 767.513 236.374 cv
768.227 236.374 768.758 236.024 769.122 235.324 cv
769.472 234.624 769.654 233.574 769.654 232.174 cv
769.654 230.774 769.472 229.724 769.122 229.024 cv
768.758 228.324 768.227 227.974 767.513 227.974 cv
767.513 226.882 mo
768.646 226.882 769.514 227.344 770.13 228.24 cv
770.732 229.15 771.04 230.466 771.04 232.174 cv
771.04 233.896 770.732 235.212 770.13 236.108 cv
769.514 237.004 768.646 237.452 767.513 237.452 cv
766.365 237.452 765.482 237.004 764.88 236.108 cv
764.279 235.212 763.984 233.896 763.984 232.174 cv
763.984 230.466 764.279 229.15 764.88 228.24 cv
765.482 227.344 766.365 226.882 767.513 226.882 cv
f
773.462 235.534 mo
774.904 235.534 li
774.904 237.27 li
773.462 237.27 li
773.462 235.534 li
f
779.104 236.108 mo
783.92 236.108 li
783.92 237.27 li
777.438 237.27 li
777.438 236.108 li
777.956 235.576 778.67 234.848 779.58 233.924 cv
780.476 233.014 781.05 232.426 781.288 232.16 cv
781.736 231.67 782.044 231.25 782.212 230.9 cv
782.38 230.564 782.478 230.214 782.478 229.878 cv
782.478 229.346 782.282 228.898 781.904 228.562 cv
781.526 228.226 781.036 228.044 780.42 228.044 cv
779.986 228.044 779.524 228.128 779.048 228.268 cv
778.572 228.422 778.054 228.646 777.508 228.954 cv
777.508 227.554 li
778.068 227.33 778.586 227.162 779.062 227.05 cv
779.538 226.938 779.986 226.882 780.392 226.882 cv
781.442 226.882 782.282 227.148 782.912 227.68 cv
783.542 228.212 783.864 228.912 783.864 229.794 cv
783.864 230.214 783.78 230.62 783.626 230.984 cv
783.472 231.362 783.192 231.81 782.772 232.314 cv
782.66 232.454 782.296 232.832 781.68 233.462 cv
781.064 234.092 780.21 234.974 779.104 236.108 cv
f
792.326 200.613 mo
788.826 200.613 li
f
792.326 200.613 mo
788.826 200.613 li
@
767.513 196.637 mo
766.798 196.637 766.266 196.987 765.902 197.687 cv
765.539 198.387 765.37 199.437 765.37 200.837 cv
765.37 202.237 765.539 203.287 765.902 203.987 cv
766.266 204.687 766.798 205.037 767.513 205.037 cv
768.227 205.037 768.758 204.687 769.122 203.987 cv
769.472 203.287 769.654 202.237 769.654 200.837 cv
769.654 199.437 769.472 198.387 769.122 197.687 cv
768.758 196.987 768.227 196.637 767.513 196.637 cv
767.513 195.545 mo
768.646 195.545 769.514 196.007 770.13 196.903 cv
770.732 197.813 771.04 199.129 771.04 200.837 cv
771.04 202.559 770.732 203.875 770.13 204.771 cv
769.514 205.667 768.646 206.115 767.513 206.115 cv
766.365 206.115 765.482 205.667 764.88 204.771 cv
764.279 203.875 763.984 202.559 763.984 200.837 cv
763.984 199.129 764.279 197.813 764.88 196.903 cv
765.482 196.007 766.365 195.545 767.513 195.545 cv
f
773.462 204.197 mo
774.904 204.197 li
774.904 205.933 li
773.462 205.933 li
773.462 204.197 li
f
782.1 200.431 mo
782.758 200.571 783.276 200.865 783.64 201.313 cv
784.004 201.761 784.2 202.321 784.2 202.965 cv
784.2 203.973 783.85 204.757 783.164 205.303 cv
782.464 205.849 781.484 206.115 780.21 206.115 cv
779.776 206.115 779.328 206.073 778.88 205.989 cv
778.432 205.919 777.956 205.793 777.48 205.625 cv
777.48 204.295 li
777.858 204.519 778.278 204.687 778.74 204.799 cv
779.188 204.911 779.664 204.967 780.168 204.967 cv
781.036 204.967 781.694 204.799 782.142 204.463 cv
782.59 204.127 782.828 203.623 782.828 202.965 cv
782.828 202.377 782.618 201.901 782.198 201.565 cv
781.778 201.229 781.19 201.047 780.434 201.047 cv
779.244 201.047 li
779.244 199.913 li
780.49 199.913 li
781.162 199.913 781.68 199.787 782.044 199.507 cv
782.408 199.241 782.59 198.849 782.59 198.331 cv
782.59 197.813 782.394 197.407 782.03 197.127 cv
781.652 196.847 781.12 196.707 780.434 196.707 cv
780.056 196.707 779.65 196.749 779.216 196.833 cv
778.782 196.917 778.306 197.043 777.788 197.211 cv
777.788 195.979 li
778.306 195.839 778.796 195.727 779.258 195.657 cv
779.706 195.587 780.14 195.545 780.56 195.545 cv
781.596 195.545 782.422 195.783 783.038 196.259 cv
783.654 196.735 783.962 197.379 783.962 198.191 cv
783.962 198.751 783.794 199.227 783.472 199.619 cv
783.15 200.011 782.688 200.291 782.1 200.431 cv
f
792.326 169.276 mo
788.826 169.276 li
f
792.326 169.276 mo
788.826 169.276 li
@
767.513 165.3 mo
766.798 165.3 766.266 165.65 765.902 166.35 cv
765.539 167.05 765.37 168.1 765.37 169.5 cv
765.37 170.9 765.539 171.95 765.902 172.65 cv
766.266 173.35 766.798 173.7 767.513 173.7 cv
768.227 173.7 768.758 173.35 769.122 172.65 cv
769.472 171.95 769.654 170.9 769.654 169.5 cv
769.654 168.1 769.472 167.05 769.122 166.35 cv
768.758 165.65 768.227 165.3 767.513 165.3 cv
767.513 164.208 mo
768.646 164.208 769.514 164.67 770.13 165.566 cv
770.732 166.476 771.04 167.792 771.04 169.5 cv
771.04 171.222 770.732 172.538 770.13 173.434 cv
769.514 174.33 768.646 174.778 767.513 174.778 cv
766.365 174.778 765.482 174.33 764.88 173.434 cv
764.279 172.538 763.984 171.222 763.984 169.5 cv
763.984 167.792 764.279 166.476 764.88 165.566 cv
765.482 164.67 766.365 164.208 767.513 164.208 cv
f
773.462 172.86 mo
774.904 172.86 li
774.904 174.596 li
773.462 174.596 li
773.462 172.86 li
f
781.708 165.594 mo
778.222 171.04 li
781.708 171.04 li
781.708 165.594 li
781.344 164.39 mo
783.08 164.39 li
783.08 171.04 li
784.536 171.04 li
784.536 172.188 li
783.08 172.188 li
783.08 174.596 li
781.708 174.596 li
781.708 172.188 li
777.102 172.188 li
777.102 170.858 li
781.344 164.39 li
f
792.326 137.939 mo
788.826 137.939 li
f
792.326 137.939 mo
788.826 137.939 li
@
767.513 133.963 mo
766.798 133.963 766.266 134.313 765.902 135.013 cv
765.539 135.713 765.37 136.763 765.37 138.163 cv
765.37 139.563 765.539 140.613 765.902 141.313 cv
766.266 142.013 766.798 142.363 767.513 142.363 cv
768.227 142.363 768.758 142.013 769.122 141.313 cv
769.472 140.613 769.654 139.563 769.654 138.163 cv
769.654 136.763 769.472 135.713 769.122 135.013 cv
768.758 134.313 768.227 133.963 767.513 133.963 cv
767.513 132.871 mo
768.646 132.871 769.514 133.333 770.13 134.229 cv
770.732 135.139 771.04 136.455 771.04 138.163 cv
771.04 139.885 770.732 141.201 770.13 142.097 cv
769.514 142.993 768.646 143.441 767.513 143.441 cv
766.365 143.441 765.482 142.993 764.88 142.097 cv
764.279 141.201 763.984 139.885 763.984 138.163 cv
763.984 136.455 764.279 135.139 764.88 134.229 cv
765.482 133.333 766.365 132.871 767.513 132.871 cv
f
773.462 141.523 mo
774.904 141.523 li
774.904 143.259 li
773.462 143.259 li
773.462 141.523 li
f
777.928 133.053 mo
783.346 133.053 li
783.346 134.215 li
779.188 134.215 li
779.188 136.721 li
779.384 136.651 779.594 136.595 779.79 136.567 cv
779.986 136.539 780.196 136.511 780.392 136.511 cv
781.526 136.511 782.422 136.833 783.094 137.449 cv
783.766 138.079 784.102 138.919 784.102 139.983 cv
784.102 141.089 783.752 141.943 783.066 142.545 cv
782.38 143.147 781.414 143.441 780.182 143.441 cv
779.748 143.441 779.314 143.399 778.866 143.343 cv
778.418 143.273 777.97 143.175 777.494 143.021 cv
777.494 141.635 li
777.9 141.859 778.32 142.027 778.768 142.139 cv
779.202 142.251 779.664 142.293 780.154 142.293 cv
780.938 142.293 781.568 142.097 782.03 141.677 cv
782.478 141.257 782.716 140.697 782.716 139.983 cv
782.716 139.283 782.478 138.723 782.03 138.303 cv
781.568 137.883 780.938 137.673 780.154 137.673 cv
779.79 137.673 779.412 137.715 779.048 137.799 cv
778.684 137.883 778.306 138.009 777.928 138.177 cv
777.928 133.053 li
f
792.326 106.602 mo
788.826 106.602 li
f
792.326 106.602 mo
788.826 106.602 li
@
767.513 102.626 mo
766.798 102.626 766.266 102.976 765.902 103.676 cv
765.539 104.376 765.37 105.426 765.37 106.826 cv
765.37 108.226 765.539 109.276 765.902 109.976 cv
766.266 110.676 766.798 111.026 767.513 111.026 cv
768.227 111.026 768.758 110.676 769.122 109.976 cv
769.472 109.276 769.654 108.226 769.654 106.826 cv
769.654 105.426 769.472 104.376 769.122 103.676 cv
768.758 102.976 768.227 102.626 767.513 102.626 cv
767.513 101.534 mo
768.646 101.534 769.514 101.996 770.13 102.892 cv
770.732 103.802 771.04 105.118 771.04 106.826 cv
771.04 108.548 770.732 109.864 770.13 110.76 cv
769.514 111.656 768.646 112.104 767.513 112.104 cv
766.365 112.104 765.482 111.656 764.88 110.76 cv
764.279 109.864 763.984 108.548 763.984 106.826 cv
763.984 105.118 764.279 103.802 764.88 102.892 cv
765.482 101.996 766.365 101.534 767.513 101.534 cv
f
773.462 110.186 mo
774.904 110.186 li
774.904 111.922 li
773.462 111.922 li
773.462 110.186 li
f
781.036 106.266 mo
780.42 106.266 779.93 106.49 779.566 106.91 cv
779.202 107.33 779.02 107.918 779.02 108.646 cv
779.02 109.388 779.202 109.976 779.566 110.396 cv
779.93 110.816 780.42 111.026 781.036 111.026 cv
781.652 111.026 782.142 110.816 782.506 110.396 cv
782.87 109.976 783.052 109.388 783.052 108.646 cv
783.052 107.918 782.87 107.33 782.506 106.91 cv
782.142 106.49 781.652 106.266 781.036 106.266 cv
783.78 101.94 mo
783.78 103.2 li
783.43 103.032 783.08 102.906 782.73 102.822 cv
782.366 102.738 782.016 102.696 781.68 102.696 cv
780.756 102.696 780.056 103.004 779.58 103.62 cv
779.104 104.236 778.824 105.174 778.768 106.406 cv
779.034 106.014 779.37 105.706 779.776 105.496 cv
780.182 105.286 780.63 105.174 781.12 105.174 cv
782.142 105.174 782.954 105.496 783.542 106.112 cv
784.13 106.728 784.438 107.582 784.438 108.646 cv
784.438 109.696 784.116 110.536 783.5 111.166 cv
782.884 111.796 782.058 112.104 781.036 112.104 cv
779.86 112.104 778.95 111.656 778.334 110.76 cv
777.704 109.864 777.396 108.548 777.396 106.826 cv
777.396 105.216 777.774 103.928 778.544 102.976 cv
779.3 102.024 780.336 101.534 781.624 101.534 cv
781.96 101.534 782.31 101.576 782.674 101.632 cv
783.024 101.702 783.388 101.8 783.78 101.94 cv
f
792.326 75.2652 mo
788.826 75.2652 li
f
792.326 75.2652 mo
788.826 75.2652 li
@
767.513 71.2895 mo
766.798 71.2895 766.266 71.6395 765.902 72.3395 cv
765.539 73.0395 765.37 74.0895 765.37 75.4895 cv
765.37 76.8895 765.539 77.9395 765.902 78.6395 cv
766.266 79.3395 766.798 79.6895 767.513 79.6895 cv
768.227 79.6895 768.758 79.3395 769.122 78.6395 cv
769.472 77.9395 769.654 76.8895 769.654 75.4895 cv
769.654 74.0895 769.472 73.0395 769.122 72.3395 cv
768.758 71.6395 768.227 71.2895 767.513 71.2895 cv
767.513 70.1975 mo
768.646 70.1975 769.514 70.6595 770.13 71.5555 cv
770.732 72.4655 771.04 73.7815 771.04 75.4895 cv
771.04 77.2115 770.732 78.5275 770.13 79.4235 cv
769.514 80.3195 768.646 80.7675 767.513 80.7675 cv
766.365 80.7675 765.482 80.3195 764.88 79.4235 cv
764.279 78.5275 763.984 77.2115 763.984 75.4895 cv
763.984 73.7815 764.279 72.4655 764.88 71.5555 cv
765.482 70.6595 766.365 70.1975 767.513 70.1975 cv
f
773.462 78.8495 mo
774.904 78.8495 li
774.904 80.5855 li
773.462 80.5855 li
773.462 78.8495 li
f
777.564 70.3795 mo
784.13 70.3795 li
784.13 70.9675 li
780.42 80.5855 li
778.978 80.5855 li
782.464 71.5415 li
777.564 71.5415 li
777.564 70.3795 li
f
2 lc
0 lj
792.326 263.286 mo
792.326 59.5968 li
@
1091.32 263.286 mo
1091.32 59.5968 li
@
792.326 263.286 mo
1091.32 263.286 li
@
792.326 59.5968 mo
1091.32 59.5968 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
