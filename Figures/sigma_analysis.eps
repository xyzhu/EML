%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: sigma_analysis.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yingchenzhen
%%CreationDate: 2019/8/5, 20:59:37
%%BoundingBox: 0 0 1152 864
%%HiResBoundingBox: 0 0 1152 864
%%CropBox: 0 0 1152 864
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-08-05T20:53:14+08:00"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2019-08-05T20:59:29+08:00"
   xmp:MetadataDate="2019-08-05T20:59:29+08:00"
   pdf:Producer="matplotlib pdf backend 3.1.1"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:b1df3837-046f-422f-bc92-6e34a523360a"
   xmpMM:InstanceID="uuid:41b74362-b343-4992-aca4-bdccfbe3abe9"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -864 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 864 li
1152 864 li
1152 0 li
cp
clp
gsave
0 864 mo
1152 864 li
1152 0 li
0 0 li
0 864 li
clp
0 864 mo
1152 864 li
1152 0 li
0 0 li
0 864 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
77.92 395.89 mo
554.666 395.89 li
554.666 88.02 li
77.92 88.02 li
cp
f
99.5903 395.89 mo
99.5903 399.39 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
99.5903 395.89 mo
99.5903 399.39 li
@
86.715 405.478 mo
85.338 405.478 84.312 406.153 83.61 407.503 cv
82.908 408.853 82.584 410.878 82.584 413.578 cv
82.584 416.278 82.908 418.303 83.61 419.653 cv
84.312 421.003 85.338 421.678 86.715 421.678 cv
88.092 421.678 89.118 421.003 89.82 419.653 cv
90.495 418.303 90.846 416.278 90.846 413.578 cv
90.846 410.878 90.495 408.853 89.82 407.503 cv
89.118 406.153 88.092 405.478 86.715 405.478 cv
86.715 403.372 mo
88.902 403.372 90.576 404.263 91.764 405.991 cv
92.925 407.746 93.519 410.284 93.519 413.578 cv
93.519 416.899 92.925 419.437 91.764 421.165 cv
90.576 422.893 88.902 423.757 86.715 423.757 cv
84.501 423.757 82.8 422.893 81.639 421.165 cv
80.478 419.437 79.911 416.899 79.911 413.578 cv
79.911 410.284 80.478 407.746 81.639 405.991 cv
82.8 404.263 84.501 403.372 86.715 403.372 cv
f
98.19 420.058 mo
100.971 420.058 li
100.971 423.406 li
98.19 423.406 li
98.19 420.058 li
f
106.803 403.723 mo
117.252 403.723 li
117.252 405.964 li
109.233 405.964 li
109.233 410.797 li
109.611 410.662 110.016 410.554 110.394 410.5 cv
110.772 410.446 111.177 410.392 111.555 410.392 cv
113.742 410.392 115.47 411.013 116.766 412.201 cv
118.062 413.416 118.71 415.036 118.71 417.088 cv
118.71 419.221 118.035 420.868 116.712 422.029 cv
115.389 423.19 113.526 423.757 111.15 423.757 cv
110.313 423.757 109.476 423.676 108.612 423.568 cv
107.748 423.433 106.884 423.244 105.966 422.947 cv
105.966 420.274 li
106.749 420.706 107.559 421.03 108.423 421.246 cv
109.26 421.462 110.151 421.543 111.096 421.543 cv
112.608 421.543 113.823 421.165 114.714 420.355 cv
115.578 419.545 116.037 418.465 116.037 417.088 cv
116.037 415.738 115.578 414.658 114.714 413.848 cv
113.823 413.038 112.608 412.633 111.096 412.633 cv
110.394 412.633 109.665 412.714 108.963 412.876 cv
108.261 413.038 107.532 413.281 106.803 413.605 cv
106.803 403.723 li
f
161.505 395.89 mo
161.505 399.39 li
f
161.505 395.89 mo
161.505 399.39 li
@
156.267 421.165 mo
160.614 421.165 li
160.614 406.153 li
155.889 407.098 li
155.889 404.668 li
160.587 403.723 li
163.26 403.723 li
163.26 421.165 li
167.607 421.165 li
167.607 423.406 li
156.267 423.406 li
156.267 421.165 li
f
223.421 395.89 mo
223.421 399.39 li
f
223.421 395.89 mo
223.421 399.39 li
@
205.308 421.165 mo
209.655 421.165 li
209.655 406.153 li
204.93 407.098 li
204.93 404.668 li
209.628 403.723 li
212.301 403.723 li
212.301 421.165 li
216.648 421.165 li
216.648 423.406 li
205.308 423.406 li
205.308 421.165 li
f
222.021 420.058 mo
224.802 420.058 li
224.802 423.406 li
222.021 423.406 li
222.021 420.058 li
f
230.634 403.723 mo
241.083 403.723 li
241.083 405.964 li
233.064 405.964 li
233.064 410.797 li
233.442 410.662 233.847 410.554 234.225 410.5 cv
234.603 410.446 235.008 410.392 235.386 410.392 cv
237.573 410.392 239.301 411.013 240.597 412.201 cv
241.893 413.416 242.541 415.036 242.541 417.088 cv
242.541 419.221 241.866 420.868 240.543 422.029 cv
239.22 423.19 237.357 423.757 234.981 423.757 cv
234.144 423.757 233.307 423.676 232.443 423.568 cv
231.579 423.433 230.715 423.244 229.797 422.947 cv
229.797 420.274 li
230.58 420.706 231.39 421.03 232.254 421.246 cv
233.091 421.462 233.982 421.543 234.927 421.543 cv
236.439 421.543 237.654 421.165 238.545 420.355 cv
239.409 419.545 239.868 418.465 239.868 417.088 cv
239.868 415.738 239.409 414.658 238.545 413.848 cv
237.654 413.038 236.439 412.633 234.927 412.633 cv
234.225 412.633 233.496 412.714 232.794 412.876 cv
232.092 413.038 231.363 413.281 230.634 413.605 cv
230.634 403.723 li
f
285.336 395.89 mo
285.336 399.39 li
f
285.336 395.89 mo
285.336 399.39 li
@
287.712 412.795 mo
288.981 413.065 289.98 413.632 290.682 414.496 cv
291.384 415.36 291.762 416.44 291.762 417.682 cv
291.762 419.626 291.087 421.138 289.764 422.191 cv
288.414 423.244 286.524 423.757 284.067 423.757 cv
283.23 423.757 282.366 423.676 281.502 423.514 cv
280.638 423.379 279.72 423.136 278.802 422.812 cv
278.802 420.247 li
279.531 420.679 280.341 421.003 281.232 421.219 cv
282.096 421.435 283.014 421.543 283.986 421.543 cv
285.66 421.543 286.929 421.219 287.793 420.571 cv
288.657 419.923 289.116 418.951 289.116 417.682 cv
289.116 416.548 288.711 415.63 287.901 414.982 cv
287.091 414.334 285.957 413.983 284.499 413.983 cv
282.204 413.983 li
282.204 411.796 li
284.607 411.796 li
285.903 411.796 286.902 411.553 287.604 411.013 cv
288.306 410.5 288.657 409.744 288.657 408.745 cv
288.657 407.746 288.279 406.963 287.577 406.423 cv
286.848 405.883 285.822 405.613 284.499 405.613 cv
283.77 405.613 282.987 405.694 282.15 405.856 cv
281.313 406.018 280.395 406.261 279.396 406.585 cv
279.396 404.209 li
280.395 403.939 281.34 403.723 282.231 403.588 cv
283.095 403.453 283.932 403.372 284.742 403.372 cv
286.74 403.372 288.333 403.831 289.521 404.749 cv
290.709 405.667 291.303 406.909 291.303 408.475 cv
291.303 409.555 290.979 410.473 290.358 411.229 cv
289.737 411.985 288.846 412.525 287.712 412.795 cv
f
347.251 395.89 mo
347.251 399.39 li
f
347.251 395.89 mo
347.251 399.39 li
@
341.581 403.723 mo
352.03 403.723 li
352.03 405.964 li
344.011 405.964 li
344.011 410.797 li
344.389 410.662 344.794 410.554 345.172 410.5 cv
345.55 410.446 345.955 410.392 346.333 410.392 cv
348.52 410.392 350.248 411.013 351.544 412.201 cv
352.84 413.416 353.488 415.036 353.488 417.088 cv
353.488 419.221 352.813 420.868 351.49 422.029 cv
350.167 423.19 348.304 423.757 345.928 423.757 cv
345.091 423.757 344.254 423.676 343.39 423.568 cv
342.526 423.433 341.662 423.244 340.744 422.947 cv
340.744 420.274 li
341.527 420.706 342.337 421.03 343.201 421.246 cv
344.038 421.462 344.929 421.543 345.874 421.543 cv
347.386 421.543 348.601 421.165 349.492 420.355 cv
350.356 419.545 350.815 418.465 350.815 417.088 cv
350.815 415.738 350.356 414.658 349.492 413.848 cv
348.601 413.038 347.386 412.633 345.874 412.633 cv
345.172 412.633 344.443 412.714 343.741 412.876 cv
343.039 413.038 342.31 413.281 341.581 413.605 cv
341.581 403.723 li
f
409.166 395.89 mo
409.166 399.39 li
f
409.166 395.89 mo
409.166 399.39 li
@
395.342 421.165 mo
399.689 421.165 li
399.689 406.153 li
394.964 407.098 li
394.964 404.668 li
399.662 403.723 li
402.335 403.723 li
402.335 421.165 li
406.682 421.165 li
406.682 423.406 li
395.342 423.406 li
395.342 421.165 li
f
417.752 405.478 mo
416.375 405.478 415.349 406.153 414.647 407.503 cv
413.945 408.853 413.621 410.878 413.621 413.578 cv
413.621 416.278 413.945 418.303 414.647 419.653 cv
415.349 421.003 416.375 421.678 417.752 421.678 cv
419.129 421.678 420.155 421.003 420.857 419.653 cv
421.532 418.303 421.883 416.278 421.883 413.578 cv
421.883 410.878 421.532 408.853 420.857 407.503 cv
420.155 406.153 419.129 405.478 417.752 405.478 cv
417.752 403.372 mo
419.939 403.372 421.613 404.263 422.801 405.991 cv
423.962 407.746 424.556 410.284 424.556 413.578 cv
424.556 416.899 423.962 419.437 422.801 421.165 cv
421.613 422.893 419.939 423.757 417.752 423.757 cv
415.538 423.757 413.837 422.893 412.676 421.165 cv
411.515 419.437 410.948 416.899 410.948 413.578 cv
410.948 410.284 411.515 407.746 412.676 405.991 cv
413.837 404.263 415.538 403.372 417.752 403.372 cv
f
471.081 395.89 mo
471.081 399.39 li
f
471.081 395.89 mo
471.081 399.39 li
@
464.871 412.795 mo
466.14 413.065 467.139 413.632 467.841 414.496 cv
468.543 415.36 468.921 416.44 468.921 417.682 cv
468.921 419.626 468.246 421.138 466.923 422.191 cv
465.573 423.244 463.683 423.757 461.226 423.757 cv
460.389 423.757 459.525 423.676 458.661 423.514 cv
457.797 423.379 456.879 423.136 455.961 422.812 cv
455.961 420.247 li
456.69 420.679 457.5 421.003 458.391 421.219 cv
459.255 421.435 460.173 421.543 461.145 421.543 cv
462.819 421.543 464.088 421.219 464.952 420.571 cv
465.816 419.923 466.275 418.951 466.275 417.682 cv
466.275 416.548 465.87 415.63 465.06 414.982 cv
464.25 414.334 463.116 413.983 461.658 413.983 cv
459.363 413.983 li
459.363 411.796 li
461.766 411.796 li
463.062 411.796 464.061 411.553 464.763 411.013 cv
465.465 410.5 465.816 409.744 465.816 408.745 cv
465.816 407.746 465.438 406.963 464.736 406.423 cv
464.007 405.883 462.981 405.613 461.658 405.613 cv
460.929 405.613 460.146 405.694 459.309 405.856 cv
458.472 406.018 457.554 406.261 456.555 406.585 cv
456.555 404.209 li
457.554 403.939 458.499 403.723 459.39 403.588 cv
460.254 403.453 461.091 403.372 461.901 403.372 cv
463.899 403.372 465.492 403.831 466.68 404.749 cv
467.868 405.667 468.462 406.909 468.462 408.475 cv
468.462 409.555 468.138 410.473 467.517 411.229 cv
466.896 411.985 466.005 412.525 464.871 412.795 cv
f
479.667 405.478 mo
478.29 405.478 477.264 406.153 476.562 407.503 cv
475.86 408.853 475.536 410.878 475.536 413.578 cv
475.536 416.278 475.86 418.303 476.562 419.653 cv
477.264 421.003 478.29 421.678 479.667 421.678 cv
481.044 421.678 482.07 421.003 482.772 419.653 cv
483.447 418.303 483.798 416.278 483.798 413.578 cv
483.798 410.878 483.447 408.853 482.772 407.503 cv
482.07 406.153 481.044 405.478 479.667 405.478 cv
479.667 403.372 mo
481.854 403.372 483.528 404.263 484.716 405.991 cv
485.877 407.746 486.471 410.284 486.471 413.578 cv
486.471 416.899 485.877 419.437 484.716 421.165 cv
483.528 422.893 481.854 423.757 479.667 423.757 cv
477.453 423.757 475.752 422.893 474.591 421.165 cv
473.43 419.437 472.863 416.899 472.863 413.578 cv
472.863 410.284 473.43 407.746 474.591 405.991 cv
475.752 404.263 477.453 403.372 479.667 403.372 cv
f
532.996 395.89 mo
532.996 399.39 li
f
532.996 395.89 mo
532.996 399.39 li
@
510.586 421.165 mo
514.933 421.165 li
514.933 406.153 li
510.208 407.098 li
510.208 404.668 li
514.906 403.723 li
517.579 403.723 li
517.579 421.165 li
521.926 421.165 li
521.926 423.406 li
510.586 423.406 li
510.586 421.165 li
f
532.996 405.478 mo
531.619 405.478 530.593 406.153 529.891 407.503 cv
529.189 408.853 528.865 410.878 528.865 413.578 cv
528.865 416.278 529.189 418.303 529.891 419.653 cv
530.593 421.003 531.619 421.678 532.996 421.678 cv
534.373 421.678 535.399 421.003 536.101 419.653 cv
536.776 418.303 537.127 416.278 537.127 413.578 cv
537.127 410.878 536.776 408.853 536.101 407.503 cv
535.399 406.153 534.373 405.478 532.996 405.478 cv
532.996 403.372 mo
535.183 403.372 536.857 404.263 538.045 405.991 cv
539.206 407.746 539.8 410.284 539.8 413.578 cv
539.8 416.899 539.206 419.437 538.045 421.165 cv
536.857 422.893 535.183 423.757 532.996 423.757 cv
530.782 423.757 529.081 422.893 527.92 421.165 cv
526.759 419.437 526.192 416.899 526.192 413.578 cv
526.192 410.284 526.759 407.746 527.92 405.991 cv
529.081 404.263 530.782 403.372 532.996 403.372 cv
f
550.168 405.478 mo
548.791 405.478 547.765 406.153 547.063 407.503 cv
546.361 408.853 546.037 410.878 546.037 413.578 cv
546.037 416.278 546.361 418.303 547.063 419.653 cv
547.765 421.003 548.791 421.678 550.168 421.678 cv
551.545 421.678 552.571 421.003 553.273 419.653 cv
553.948 418.303 554.299 416.278 554.299 413.578 cv
554.299 410.878 553.948 408.853 553.273 407.503 cv
552.571 406.153 551.545 405.478 550.168 405.478 cv
550.168 403.372 mo
552.355 403.372 554.029 404.263 555.217 405.991 cv
556.378 407.746 556.972 410.284 556.972 413.578 cv
556.972 416.899 556.378 419.437 555.217 421.165 cv
554.029 422.893 552.355 423.757 550.168 423.757 cv
547.954 423.757 546.253 422.893 545.092 421.165 cv
543.931 419.437 543.364 416.899 543.364 413.578 cv
543.364 410.284 543.931 407.746 545.092 405.991 cv
546.253 404.263 547.954 403.372 550.168 403.372 cv
f
206.473 433.045 mo
205.241 435.173 204.345 437.245 203.757 439.289 cv
203.141 441.333 202.861 443.405 202.861 445.505 cv
202.861 447.633 203.141 449.705 203.757 451.749 cv
204.345 453.821 205.241 455.865 206.473 457.965 cv
204.289 457.965 li
202.917 455.809 201.881 453.737 201.209 451.665 cv
200.537 449.593 200.201 447.549 200.201 445.505 cv
200.201 443.489 200.537 441.445 201.209 439.373 cv
201.881 437.301 202.889 435.201 204.289 433.045 cv
206.473 433.045 li
f
218.317 446.597 mo
216.273 446.597 214.873 446.849 214.089 447.297 cv
213.305 447.773 212.913 448.557 212.913 449.677 cv
212.913 450.573 213.193 451.301 213.781 451.805 cv
214.369 452.337 215.181 452.589 216.189 452.589 cv
217.589 452.589 218.709 452.113 219.549 451.105 cv
220.389 450.125 220.809 448.809 220.809 447.157 cv
220.809 446.597 li
218.317 446.597 li
223.329 445.561 mo
223.329 454.297 li
220.809 454.297 li
220.809 451.973 li
220.221 452.925 219.493 453.597 218.653 454.017 cv
217.813 454.437 216.749 454.661 215.517 454.661 cv
213.949 454.661 212.689 454.241 211.765 453.373 cv
210.841 452.505 210.393 451.329 210.393 449.845 cv
210.393 448.137 210.953 446.849 212.129 445.953 cv
213.277 445.085 214.985 444.637 217.281 444.637 cv
220.809 444.637 li
220.809 444.385 li
220.809 443.237 220.417 442.341 219.661 441.697 cv
218.905 441.081 217.841 440.745 216.469 440.745 cv
215.573 440.745 214.733 440.857 213.893 441.081 cv
213.053 441.305 212.269 441.613 211.513 442.005 cv
211.513 439.681 li
212.409 439.345 213.305 439.065 214.173 438.897 cv
215.041 438.729 215.881 438.617 216.721 438.617 cv
218.933 438.617 220.585 439.205 221.677 440.353 cv
222.769 441.501 223.329 443.237 223.329 445.561 cv
f
228.117 433.045 mo
230.301 433.045 li
231.645 435.201 232.681 437.301 233.353 439.373 cv
234.025 441.445 234.389 443.489 234.389 445.505 cv
234.389 447.549 234.025 449.593 233.353 451.665 cv
232.681 453.737 231.645 455.809 230.301 457.965 cv
228.117 457.965 li
229.321 455.865 230.217 453.821 230.833 451.749 cv
231.421 449.705 231.729 447.633 231.729 445.505 cv
231.729 443.405 231.421 441.333 230.833 439.289 cv
230.217 437.245 229.321 435.173 228.117 433.045 cv
f
239.541 433.885 mo
242.313 433.885 li
242.313 442.257 li
252.337 442.257 li
252.337 433.885 li
255.109 433.885 li
255.109 454.297 li
252.337 454.297 li
252.337 444.581 li
242.313 444.581 li
242.313 454.297 li
239.541 454.297 li
239.541 433.885 li
f
267.457 446.597 mo
265.413 446.597 264.013 446.849 263.229 447.297 cv
262.445 447.773 262.053 448.557 262.053 449.677 cv
262.053 450.573 262.333 451.301 262.921 451.805 cv
263.509 452.337 264.321 452.589 265.329 452.589 cv
266.729 452.589 267.849 452.113 268.689 451.105 cv
269.529 450.125 269.949 448.809 269.949 447.157 cv
269.949 446.597 li
267.457 446.597 li
272.469 445.561 mo
272.469 454.297 li
269.949 454.297 li
269.949 451.973 li
269.361 452.925 268.633 453.597 267.793 454.017 cv
266.953 454.437 265.889 454.661 264.657 454.661 cv
263.089 454.661 261.829 454.241 260.905 453.373 cv
259.981 452.505 259.533 451.329 259.533 449.845 cv
259.533 448.137 260.093 446.849 261.269 445.953 cv
262.417 445.085 264.125 444.637 266.421 444.637 cv
269.949 444.637 li
269.949 444.385 li
269.949 443.237 269.557 442.341 268.801 441.697 cv
268.045 441.081 266.981 440.745 265.609 440.745 cv
264.713 440.745 263.873 440.857 263.033 441.081 cv
262.193 441.305 261.409 441.613 260.653 442.005 cv
260.653 439.681 li
261.549 439.345 262.445 439.065 263.313 438.897 cv
264.181 438.729 265.021 438.617 265.861 438.617 cv
268.073 438.617 269.725 439.205 270.817 440.353 cv
271.909 441.501 272.469 443.237 272.469 445.561 cv
f
289.577 441.921 mo
290.193 440.801 290.949 439.989 291.817 439.429 cv
292.685 438.897 293.721 438.617 294.925 438.617 cv
296.493 438.617 297.725 439.177 298.593 440.297 cv
299.461 441.417 299.909 443.013 299.909 445.057 cv
299.909 454.297 li
297.389 454.297 li
297.389 445.141 li
297.389 443.685 297.109 442.593 296.605 441.865 cv
296.073 441.165 295.289 440.801 294.225 440.801 cv
292.909 440.801 291.873 441.249 291.117 442.117 cv
290.361 442.985 289.997 444.161 289.997 445.645 cv
289.997 454.297 li
287.477 454.297 li
287.477 445.141 li
287.477 443.685 287.197 442.593 286.693 441.865 cv
286.161 441.165 285.349 440.801 284.285 440.801 cv
282.997 440.801 281.961 441.249 281.205 442.117 cv
280.449 442.985 280.085 444.161 280.085 445.645 cv
280.085 454.297 li
277.565 454.297 li
277.565 438.981 li
280.085 438.981 li
280.085 441.361 li
280.645 440.437 281.345 439.737 282.157 439.289 cv
282.941 438.841 283.893 438.617 285.013 438.617 cv
286.133 438.617 287.057 438.897 287.841 439.457 cv
288.625 440.017 289.185 440.857 289.577 441.921 cv
f
316.849 441.921 mo
317.465 440.801 318.221 439.989 319.089 439.429 cv
319.957 438.897 320.993 438.617 322.197 438.617 cv
323.765 438.617 324.997 439.177 325.865 440.297 cv
326.733 441.417 327.181 443.013 327.181 445.057 cv
327.181 454.297 li
324.661 454.297 li
324.661 445.141 li
324.661 443.685 324.381 442.593 323.877 441.865 cv
323.345 441.165 322.561 440.801 321.497 440.801 cv
320.181 440.801 319.145 441.249 318.389 442.117 cv
317.633 442.985 317.269 444.161 317.269 445.645 cv
317.269 454.297 li
314.749 454.297 li
314.749 445.141 li
314.749 443.685 314.469 442.593 313.965 441.865 cv
313.433 441.165 312.621 440.801 311.557 440.801 cv
310.269 440.801 309.233 441.249 308.477 442.117 cv
307.721 442.985 307.357 444.161 307.357 445.645 cv
307.357 454.297 li
304.837 454.297 li
304.837 438.981 li
307.357 438.981 li
307.357 441.361 li
307.917 440.437 308.617 439.737 309.429 439.289 cv
310.213 438.841 311.165 438.617 312.285 438.617 cv
313.405 438.617 314.329 438.897 315.113 439.457 cv
315.897 440.017 316.457 440.857 316.849 441.921 cv
f
332.193 438.981 mo
334.713 438.981 li
334.713 454.297 li
332.193 454.297 li
332.193 438.981 li
332.193 433.017 mo
334.713 433.017 li
334.713 436.209 li
332.193 436.209 li
332.193 433.017 li
f
352.717 445.057 mo
352.717 454.297 li
350.197 454.297 li
350.197 445.141 li
350.197 443.685 349.889 442.621 349.329 441.893 cv
348.769 441.165 347.929 440.801 346.809 440.801 cv
345.437 440.801 344.373 441.249 343.589 442.117 cv
342.805 442.985 342.413 444.161 342.413 445.645 cv
342.413 454.297 li
339.893 454.297 li
339.893 438.981 li
342.413 438.981 li
342.413 441.361 li
343.001 440.465 343.701 439.765 344.541 439.317 cv
345.353 438.869 346.305 438.617 347.369 438.617 cv
349.105 438.617 350.449 439.177 351.345 440.269 cv
352.241 441.361 352.717 442.957 352.717 445.057 cv
f
367.809 446.457 mo
367.809 444.665 367.417 443.237 366.689 442.229 cv
365.933 441.221 364.869 440.717 363.525 440.717 cv
362.181 440.717 361.117 441.221 360.361 442.229 cv
359.605 443.237 359.241 444.665 359.241 446.457 cv
359.241 448.277 359.605 449.677 360.361 450.685 cv
361.117 451.693 362.181 452.197 363.525 452.197 cv
364.869 452.197 365.933 451.693 366.689 450.685 cv
367.417 449.677 367.809 448.277 367.809 446.457 cv
370.329 452.393 mo
370.329 454.969 369.741 456.901 368.593 458.189 cv
367.417 459.449 365.653 460.093 363.273 460.093 cv
362.377 460.093 361.565 460.009 360.781 459.897 cv
359.997 459.757 359.213 459.561 358.485 459.281 cv
358.485 456.845 li
359.213 457.237 359.941 457.517 360.669 457.713 cv
361.397 457.909 362.125 458.021 362.881 458.021 cv
364.505 458.021 365.737 457.573 366.577 456.733 cv
367.389 455.865 367.809 454.577 367.809 452.841 cv
367.809 451.609 li
367.277 452.505 366.605 453.177 365.793 453.625 cv
364.981 454.073 364.029 454.297 362.909 454.297 cv
361.005 454.297 359.493 453.597 358.345 452.169 cv
357.197 450.741 356.637 448.837 356.637 446.457 cv
356.637 444.105 357.197 442.201 358.345 440.773 cv
359.493 439.345 361.005 438.617 362.909 438.617 cv
364.029 438.617 364.981 438.841 365.793 439.289 cv
366.605 439.737 367.277 440.409 367.809 441.305 cv
367.809 438.981 li
370.329 438.981 li
370.329 452.393 li
f
375.621 433.885 mo
378.393 433.885 li
378.393 451.973 li
388.333 451.973 li
388.333 454.297 li
375.621 454.297 li
375.621 433.885 li
f
397.041 440.745 mo
395.697 440.745 394.633 441.277 393.849 442.341 cv
393.065 443.405 392.673 444.833 392.673 446.653 cv
392.673 448.501 393.037 449.929 393.821 450.993 cv
394.605 452.057 395.669 452.561 397.041 452.561 cv
398.385 452.561 399.449 452.057 400.233 450.993 cv
401.017 449.929 401.409 448.501 401.409 446.653 cv
401.409 444.861 401.017 443.405 400.233 442.341 cv
399.449 441.277 398.385 440.745 397.041 440.745 cv
397.041 438.617 mo
399.225 438.617 400.933 439.345 402.193 440.745 cv
403.425 442.173 404.069 444.133 404.069 446.653 cv
404.069 449.173 403.425 451.133 402.193 452.533 cv
400.933 453.961 399.225 454.661 397.041 454.661 cv
394.829 454.661 393.093 453.961 391.861 452.533 cv
390.629 451.133 390.013 449.173 390.013 446.653 cv
390.013 444.133 390.629 442.173 391.861 440.745 cv
393.093 439.345 394.829 438.617 397.041 438.617 cv
f
418.013 439.429 mo
418.013 441.809 li
417.285 441.473 416.557 441.193 415.801 440.997 cv
415.017 440.829 414.233 440.717 413.421 440.717 cv
412.161 440.717 411.209 440.913 410.593 441.305 cv
409.977 441.697 409.669 442.257 409.669 443.013 cv
409.669 443.601 409.893 444.049 410.341 444.385 cv
410.789 444.721 411.685 445.057 413.029 445.337 cv
413.897 445.533 li
415.689 445.925 416.949 446.485 417.705 447.157 cv
418.433 447.857 418.825 448.837 418.825 450.069 cv
418.825 451.497 418.265 452.617 417.145 453.429 cv
416.025 454.269 414.457 454.661 412.497 454.661 cv
411.657 454.661 410.817 454.577 409.921 454.437 cv
409.025 454.297 408.101 454.073 407.121 453.737 cv
407.121 451.133 li
408.045 451.637 408.969 452.001 409.865 452.225 cv
410.761 452.477 411.657 452.589 412.553 452.589 cv
413.729 452.589 414.653 452.393 415.297 452.001 cv
415.913 451.609 416.249 451.021 416.249 450.265 cv
416.249 449.593 415.997 449.061 415.549 448.697 cv
415.101 448.333 414.093 447.969 412.525 447.633 cv
411.657 447.437 li
410.089 447.101 408.941 446.597 408.269 445.925 cv
407.569 445.253 407.233 444.329 407.233 443.125 cv
407.233 441.697 407.737 440.577 408.745 439.793 cv
409.753 439.009 411.209 438.617 413.113 438.617 cv
414.037 438.617 414.905 438.701 415.745 438.841 cv
416.557 438.981 417.313 439.177 418.013 439.429 cv
f
432.601 439.429 mo
432.601 441.809 li
431.873 441.473 431.145 441.193 430.389 440.997 cv
429.605 440.829 428.821 440.717 428.009 440.717 cv
426.749 440.717 425.797 440.913 425.181 441.305 cv
424.565 441.697 424.257 442.257 424.257 443.013 cv
424.257 443.601 424.481 444.049 424.929 444.385 cv
425.377 444.721 426.273 445.057 427.617 445.337 cv
428.485 445.533 li
430.277 445.925 431.537 446.485 432.293 447.157 cv
433.021 447.857 433.413 448.837 433.413 450.069 cv
433.413 451.497 432.853 452.617 431.733 453.429 cv
430.613 454.269 429.045 454.661 427.085 454.661 cv
426.245 454.661 425.405 454.577 424.509 454.437 cv
423.613 454.297 422.689 454.073 421.709 453.737 cv
421.709 451.133 li
422.633 451.637 423.557 452.001 424.453 452.225 cv
425.349 452.477 426.245 452.589 427.141 452.589 cv
428.317 452.589 429.241 452.393 429.885 452.001 cv
430.501 451.609 430.837 451.021 430.837 450.265 cv
430.837 449.593 430.585 449.061 430.137 448.697 cv
429.689 448.333 428.681 447.969 427.113 447.633 cv
426.245 447.437 li
424.677 447.101 423.529 446.597 422.857 445.925 cv
422.157 445.253 421.821 444.329 421.821 443.125 cv
421.821 441.697 422.325 440.577 423.333 439.793 cv
424.341 439.009 425.797 438.617 427.701 438.617 cv
428.625 438.617 429.493 438.701 430.333 438.841 cv
431.145 438.981 431.901 439.177 432.601 439.429 cv
f
77.92 395.89 mo
74.42 395.89 li
f
77.92 395.89 mo
74.42 395.89 li
@
19.412 388.22 mo
18.035 388.22 17.009 388.895 16.307 390.245 cv
15.605 391.595 15.281 393.62 15.281 396.32 cv
15.281 399.02 15.605 401.045 16.307 402.395 cv
17.009 403.745 18.035 404.42 19.412 404.42 cv
20.789 404.42 21.815 403.745 22.517 402.395 cv
23.192 401.045 23.543 399.02 23.543 396.32 cv
23.543 393.62 23.192 391.595 22.517 390.245 cv
21.815 388.895 20.789 388.22 19.412 388.22 cv
19.412 386.114 mo
21.599 386.114 23.273 387.005 24.461 388.733 cv
25.622 390.488 26.216 393.026 26.216 396.32 cv
26.216 399.641 25.622 402.179 24.461 403.907 cv
23.273 405.635 21.599 406.499 19.412 406.499 cv
17.198 406.499 15.497 405.635 14.336 403.907 cv
13.175 402.179 12.608 399.641 12.608 396.32 cv
12.608 393.026 13.175 390.488 14.336 388.733 cv
15.497 387.005 17.198 386.114 19.412 386.114 cv
f
30.887 402.8 mo
33.668 402.8 li
33.668 406.148 li
30.887 406.148 li
30.887 402.8 li
f
45.1699 388.22 mo
43.7929 388.22 42.7669 388.895 42.0649 390.245 cv
41.3629 391.595 41.0389 393.62 41.0389 396.32 cv
41.0389 399.02 41.3629 401.045 42.0649 402.395 cv
42.7669 403.745 43.7929 404.42 45.1699 404.42 cv
46.5469 404.42 47.5729 403.745 48.2749 402.395 cv
48.9499 401.045 49.3009 399.02 49.3009 396.32 cv
49.3009 393.62 48.9499 391.595 48.2749 390.245 cv
47.5729 388.895 46.5469 388.22 45.1699 388.22 cv
45.1699 386.114 mo
47.3569 386.114 49.0309 387.005 50.2189 388.733 cv
51.3799 390.488 51.9739 393.026 51.9739 396.32 cv
51.9739 399.641 51.3799 402.179 50.2189 403.907 cv
49.0309 405.635 47.3569 406.499 45.1699 406.499 cv
42.9559 406.499 41.2549 405.635 40.0939 403.907 cv
38.9329 402.179 38.3659 399.641 38.3659 396.32 cv
38.3659 393.026 38.9329 390.488 40.0939 388.733 cv
41.2549 387.005 42.9559 386.114 45.1699 386.114 cv
f
62.3419 388.22 mo
60.9649 388.22 59.9389 388.895 59.2369 390.245 cv
58.5349 391.595 58.2109 393.62 58.2109 396.32 cv
58.2109 399.02 58.5349 401.045 59.2369 402.395 cv
59.9389 403.745 60.9649 404.42 62.3419 404.42 cv
63.7189 404.42 64.7449 403.745 65.4469 402.395 cv
66.1219 401.045 66.4729 399.02 66.4729 396.32 cv
66.4729 393.62 66.1219 391.595 65.4469 390.245 cv
64.7449 388.895 63.7189 388.22 62.3419 388.22 cv
62.3419 386.114 mo
64.5289 386.114 66.2029 387.005 67.3909 388.733 cv
68.5519 390.488 69.1459 393.026 69.1459 396.32 cv
69.1459 399.641 68.5519 402.179 67.3909 403.907 cv
66.2029 405.635 64.5289 406.499 62.3419 406.499 cv
60.1279 406.499 58.4269 405.635 57.2659 403.907 cv
56.1049 402.179 55.5379 399.641 55.5379 396.32 cv
55.5379 393.026 56.1049 390.488 57.2659 388.733 cv
58.4269 387.005 60.1279 386.114 62.3419 386.114 cv
f
77.92 334.316 mo
74.42 334.316 li
f
77.92 334.316 mo
74.42 334.316 li
@
19.412 326.646 mo
18.035 326.646 17.009 327.321 16.307 328.671 cv
15.605 330.021 15.281 332.046 15.281 334.746 cv
15.281 337.446 15.605 339.471 16.307 340.821 cv
17.009 342.171 18.035 342.846 19.412 342.846 cv
20.789 342.846 21.815 342.171 22.517 340.821 cv
23.192 339.471 23.543 337.446 23.543 334.746 cv
23.543 332.046 23.192 330.021 22.517 328.671 cv
21.815 327.321 20.789 326.646 19.412 326.646 cv
19.412 324.54 mo
21.599 324.54 23.273 325.431 24.461 327.159 cv
25.622 328.914 26.216 331.452 26.216 334.746 cv
26.216 338.067 25.622 340.605 24.461 342.333 cv
23.273 344.061 21.599 344.925 19.412 344.925 cv
17.198 344.925 15.497 344.061 14.336 342.333 cv
13.175 340.605 12.608 338.067 12.608 334.746 cv
12.608 331.452 13.175 328.914 14.336 327.159 cv
15.497 325.431 17.198 324.54 19.412 324.54 cv
f
30.887 341.226 mo
33.668 341.226 li
33.668 344.574 li
30.887 344.574 li
30.887 341.226 li
f
45.1699 326.646 mo
43.7929 326.646 42.7669 327.321 42.0649 328.671 cv
41.3629 330.021 41.0389 332.046 41.0389 334.746 cv
41.0389 337.446 41.3629 339.471 42.0649 340.821 cv
42.7669 342.171 43.7929 342.846 45.1699 342.846 cv
46.5469 342.846 47.5729 342.171 48.2749 340.821 cv
48.9499 339.471 49.3009 337.446 49.3009 334.746 cv
49.3009 332.046 48.9499 330.021 48.2749 328.671 cv
47.5729 327.321 46.5469 326.646 45.1699 326.646 cv
45.1699 324.54 mo
47.3569 324.54 49.0309 325.431 50.2189 327.159 cv
51.3799 328.914 51.9739 331.452 51.9739 334.746 cv
51.9739 338.067 51.3799 340.605 50.2189 342.333 cv
49.0309 344.061 47.3569 344.925 45.1699 344.925 cv
42.9559 344.925 41.2549 344.061 40.0939 342.333 cv
38.9329 340.605 38.3659 338.067 38.3659 334.746 cv
38.3659 331.452 38.9329 328.914 40.0939 327.159 cv
41.2549 325.431 42.9559 324.54 45.1699 324.54 cv
f
56.6719 324.891 mo
67.1209 324.891 li
67.1209 327.132 li
59.1019 327.132 li
59.1019 331.965 li
59.4799 331.83 59.8849 331.722 60.2629 331.668 cv
60.6409 331.614 61.0459 331.56 61.4239 331.56 cv
63.6109 331.56 65.3389 332.181 66.6349 333.369 cv
67.9309 334.584 68.5789 336.204 68.5789 338.256 cv
68.5789 340.389 67.9039 342.036 66.5809 343.197 cv
65.2579 344.358 63.3949 344.925 61.0189 344.925 cv
60.1819 344.925 59.3449 344.844 58.4809 344.736 cv
57.6169 344.601 56.7529 344.412 55.8349 344.115 cv
55.8349 341.442 li
56.6179 341.874 57.4279 342.198 58.2919 342.414 cv
59.1289 342.63 60.0199 342.711 60.9649 342.711 cv
62.4769 342.711 63.6919 342.333 64.5829 341.523 cv
65.4469 340.713 65.9059 339.633 65.9059 338.256 cv
65.9059 336.906 65.4469 335.826 64.5829 335.016 cv
63.6919 334.206 62.4769 333.801 60.9649 333.801 cv
60.2629 333.801 59.5339 333.882 58.8319 334.044 cv
58.1299 334.206 57.4009 334.449 56.6719 334.773 cv
56.6719 324.891 li
f
77.92 272.742 mo
74.42 272.742 li
f
77.92 272.742 mo
74.42 272.742 li
@
19.412 265.072 mo
18.035 265.072 17.009 265.747 16.307 267.097 cv
15.605 268.447 15.281 270.472 15.281 273.172 cv
15.281 275.872 15.605 277.897 16.307 279.247 cv
17.009 280.597 18.035 281.272 19.412 281.272 cv
20.789 281.272 21.815 280.597 22.517 279.247 cv
23.192 277.897 23.543 275.872 23.543 273.172 cv
23.543 270.472 23.192 268.447 22.517 267.097 cv
21.815 265.747 20.789 265.072 19.412 265.072 cv
19.412 262.966 mo
21.599 262.966 23.273 263.857 24.461 265.585 cv
25.622 267.34 26.216 269.878 26.216 273.172 cv
26.216 276.493 25.622 279.031 24.461 280.759 cv
23.273 282.487 21.599 283.351 19.412 283.351 cv
17.198 283.351 15.497 282.487 14.336 280.759 cv
13.175 279.031 12.608 276.493 12.608 273.172 cv
12.608 269.878 13.175 267.34 14.336 265.585 cv
15.497 263.857 17.198 262.966 19.412 262.966 cv
f
30.887 279.652 mo
33.668 279.652 li
33.668 283 li
30.887 283 li
30.887 279.652 li
f
39.9319 280.759 mo
44.2789 280.759 li
44.2789 265.747 li
39.5539 266.692 li
39.5539 264.262 li
44.2519 263.317 li
46.9249 263.317 li
46.9249 280.759 li
51.2719 280.759 li
51.2719 283 li
39.9319 283 li
39.9319 280.759 li
f
62.3419 265.072 mo
60.9649 265.072 59.9389 265.747 59.2369 267.097 cv
58.5349 268.447 58.2109 270.472 58.2109 273.172 cv
58.2109 275.872 58.5349 277.897 59.2369 279.247 cv
59.9389 280.597 60.9649 281.272 62.3419 281.272 cv
63.7189 281.272 64.7449 280.597 65.4469 279.247 cv
66.1219 277.897 66.4729 275.872 66.4729 273.172 cv
66.4729 270.472 66.1219 268.447 65.4469 267.097 cv
64.7449 265.747 63.7189 265.072 62.3419 265.072 cv
62.3419 262.966 mo
64.5289 262.966 66.2029 263.857 67.3909 265.585 cv
68.5519 267.34 69.1459 269.878 69.1459 273.172 cv
69.1459 276.493 68.5519 279.031 67.3909 280.759 cv
66.2029 282.487 64.5289 283.351 62.3419 283.351 cv
60.1279 283.351 58.4269 282.487 57.2659 280.759 cv
56.1049 279.031 55.5379 276.493 55.5379 273.172 cv
55.5379 269.878 56.1049 267.34 57.2659 265.585 cv
58.4269 263.857 60.1279 262.966 62.3419 262.966 cv
f
77.92 211.168 mo
74.42 211.168 li
f
77.92 211.168 mo
74.42 211.168 li
@
19.412 203.498 mo
18.035 203.498 17.009 204.173 16.307 205.523 cv
15.605 206.873 15.281 208.898 15.281 211.598 cv
15.281 214.298 15.605 216.323 16.307 217.673 cv
17.009 219.023 18.035 219.698 19.412 219.698 cv
20.789 219.698 21.815 219.023 22.517 217.673 cv
23.192 216.323 23.543 214.298 23.543 211.598 cv
23.543 208.898 23.192 206.873 22.517 205.523 cv
21.815 204.173 20.789 203.498 19.412 203.498 cv
19.412 201.392 mo
21.599 201.392 23.273 202.283 24.461 204.011 cv
25.622 205.766 26.216 208.304 26.216 211.598 cv
26.216 214.919 25.622 217.457 24.461 219.185 cv
23.273 220.913 21.599 221.777 19.412 221.777 cv
17.198 221.777 15.497 220.913 14.336 219.185 cv
13.175 217.457 12.608 214.919 12.608 211.598 cv
12.608 208.304 13.175 205.766 14.336 204.011 cv
15.497 202.283 17.198 201.392 19.412 201.392 cv
f
30.887 218.078 mo
33.668 218.078 li
33.668 221.426 li
30.887 221.426 li
30.887 218.078 li
f
39.9319 219.185 mo
44.2789 219.185 li
44.2789 204.173 li
39.5539 205.118 li
39.5539 202.688 li
44.2519 201.743 li
46.9249 201.743 li
46.9249 219.185 li
51.2719 219.185 li
51.2719 221.426 li
39.9319 221.426 li
39.9319 219.185 li
f
56.6719 201.743 mo
67.1209 201.743 li
67.1209 203.984 li
59.1019 203.984 li
59.1019 208.817 li
59.4799 208.682 59.8849 208.574 60.2629 208.52 cv
60.6409 208.466 61.0459 208.412 61.4239 208.412 cv
63.6109 208.412 65.3389 209.033 66.6349 210.221 cv
67.9309 211.436 68.5789 213.056 68.5789 215.108 cv
68.5789 217.241 67.9039 218.888 66.5809 220.049 cv
65.2579 221.21 63.3949 221.777 61.0189 221.777 cv
60.1819 221.777 59.3449 221.696 58.4809 221.588 cv
57.6169 221.453 56.7529 221.264 55.8349 220.967 cv
55.8349 218.294 li
56.6179 218.726 57.4279 219.05 58.2919 219.266 cv
59.1289 219.482 60.0199 219.563 60.9649 219.563 cv
62.4769 219.563 63.6919 219.185 64.5829 218.375 cv
65.4469 217.565 65.9059 216.485 65.9059 215.108 cv
65.9059 213.758 65.4469 212.678 64.5829 211.868 cv
63.6919 211.058 62.4769 210.653 60.9649 210.653 cv
60.2629 210.653 59.5339 210.734 58.8319 210.896 cv
58.1299 211.058 57.4009 211.301 56.6719 211.625 cv
56.6719 201.743 li
f
77.92 149.594 mo
74.42 149.594 li
f
77.92 149.594 mo
74.42 149.594 li
@
19.412 141.924 mo
18.035 141.924 17.009 142.599 16.307 143.949 cv
15.605 145.299 15.281 147.324 15.281 150.024 cv
15.281 152.724 15.605 154.749 16.307 156.099 cv
17.009 157.449 18.035 158.124 19.412 158.124 cv
20.789 158.124 21.815 157.449 22.517 156.099 cv
23.192 154.749 23.543 152.724 23.543 150.024 cv
23.543 147.324 23.192 145.299 22.517 143.949 cv
21.815 142.599 20.789 141.924 19.412 141.924 cv
19.412 139.818 mo
21.599 139.818 23.273 140.709 24.461 142.437 cv
25.622 144.192 26.216 146.73 26.216 150.024 cv
26.216 153.345 25.622 155.883 24.461 157.611 cv
23.273 159.339 21.599 160.203 19.412 160.203 cv
17.198 160.203 15.497 159.339 14.336 157.611 cv
13.175 155.883 12.608 153.345 12.608 150.024 cv
12.608 146.73 13.175 144.192 14.336 142.437 cv
15.497 140.709 17.198 139.818 19.412 139.818 cv
f
30.887 156.504 mo
33.668 156.504 li
33.668 159.852 li
30.887 159.852 li
30.887 156.504 li
f
41.7679 157.611 mo
51.0559 157.611 li
51.0559 159.852 li
38.5549 159.852 li
38.5549 157.611 li
39.5539 156.585 40.9309 155.181 42.6859 153.399 cv
44.4139 151.644 45.5209 150.51 45.9799 149.997 cv
46.8439 149.052 47.4379 148.242 47.7619 147.567 cv
48.0859 146.919 48.2749 146.244 48.2749 145.596 cv
48.2749 144.57 47.8969 143.706 47.1679 143.058 cv
46.4389 142.41 45.4939 142.059 44.3059 142.059 cv
43.4689 142.059 42.5779 142.221 41.6599 142.491 cv
40.7419 142.788 39.7429 143.22 38.6899 143.814 cv
38.6899 141.114 li
39.7699 140.682 40.7689 140.358 41.6869 140.142 cv
42.6049 139.926 43.4689 139.818 44.2519 139.818 cv
46.2769 139.818 47.8969 140.331 49.1119 141.357 cv
50.3269 142.383 50.9479 143.733 50.9479 145.434 cv
50.9479 146.244 50.7859 147.027 50.4889 147.729 cv
50.1919 148.458 49.6519 149.322 48.8419 150.294 cv
48.6259 150.564 47.9239 151.293 46.7359 152.508 cv
45.5479 153.723 43.9009 155.424 41.7679 157.611 cv
f
62.3419 141.924 mo
60.9649 141.924 59.9389 142.599 59.2369 143.949 cv
58.5349 145.299 58.2109 147.324 58.2109 150.024 cv
58.2109 152.724 58.5349 154.749 59.2369 156.099 cv
59.9389 157.449 60.9649 158.124 62.3419 158.124 cv
63.7189 158.124 64.7449 157.449 65.4469 156.099 cv
66.1219 154.749 66.4729 152.724 66.4729 150.024 cv
66.4729 147.324 66.1219 145.299 65.4469 143.949 cv
64.7449 142.599 63.7189 141.924 62.3419 141.924 cv
62.3419 139.818 mo
64.5289 139.818 66.2029 140.709 67.3909 142.437 cv
68.5519 144.192 69.1459 146.73 69.1459 150.024 cv
69.1459 153.345 68.5519 155.883 67.3909 157.611 cv
66.2029 159.339 64.5289 160.203 62.3419 160.203 cv
60.1279 160.203 58.4269 159.339 57.2659 157.611 cv
56.1049 155.883 55.5379 153.345 55.5379 150.024 cv
55.5379 146.73 56.1049 144.192 57.2659 142.437 cv
58.4269 140.709 60.1279 139.818 62.3419 139.818 cv
f
77.92 88.02 mo
74.42 88.02 li
f
77.92 88.02 mo
74.42 88.02 li
@
19.412 80.35 mo
18.035 80.35 17.009 81.025 16.307 82.375 cv
15.605 83.725 15.281 85.75 15.281 88.45 cv
15.281 91.15 15.605 93.175 16.307 94.525 cv
17.009 95.875 18.035 96.55 19.412 96.55 cv
20.789 96.55 21.815 95.875 22.517 94.525 cv
23.192 93.175 23.543 91.15 23.543 88.45 cv
23.543 85.75 23.192 83.725 22.517 82.375 cv
21.815 81.025 20.789 80.35 19.412 80.35 cv
19.412 78.244 mo
21.599 78.244 23.273 79.135 24.461 80.863 cv
25.622 82.618 26.216 85.156 26.216 88.45 cv
26.216 91.771 25.622 94.309 24.461 96.037 cv
23.273 97.765 21.599 98.629 19.412 98.629 cv
17.198 98.629 15.497 97.765 14.336 96.037 cv
13.175 94.309 12.608 91.771 12.608 88.45 cv
12.608 85.156 13.175 82.618 14.336 80.863 cv
15.497 79.135 17.198 78.244 19.412 78.244 cv
f
30.887 94.93 mo
33.668 94.93 li
33.668 98.278 li
30.887 98.278 li
30.887 94.93 li
f
41.7679 96.037 mo
51.0559 96.037 li
51.0559 98.278 li
38.5549 98.278 li
38.5549 96.037 li
39.5539 95.011 40.9309 93.607 42.6859 91.825 cv
44.4139 90.07 45.5209 88.936 45.9799 88.423 cv
46.8439 87.478 47.4379 86.668 47.7619 85.993 cv
48.0859 85.345 48.2749 84.67 48.2749 84.022 cv
48.2749 82.996 47.8969 82.132 47.1679 81.484 cv
46.4389 80.836 45.4939 80.485 44.3059 80.485 cv
43.4689 80.485 42.5779 80.647 41.6599 80.917 cv
40.7419 81.214 39.7429 81.646 38.6899 82.24 cv
38.6899 79.54 li
39.7699 79.108 40.7689 78.784 41.6869 78.568 cv
42.6049 78.352 43.4689 78.244 44.2519 78.244 cv
46.2769 78.244 47.8969 78.757 49.1119 79.783 cv
50.3269 80.809 50.9479 82.159 50.9479 83.86 cv
50.9479 84.67 50.7859 85.453 50.4889 86.155 cv
50.1919 86.884 49.6519 87.748 48.8419 88.72 cv
48.6259 88.99 47.9239 89.719 46.7359 90.934 cv
45.5479 92.149 43.9009 93.85 41.7679 96.037 cv
f
56.6719 78.595 mo
67.1209 78.595 li
67.1209 80.836 li
59.1019 80.836 li
59.1019 85.669 li
59.4799 85.534 59.8849 85.426 60.2629 85.372 cv
60.6409 85.318 61.0459 85.264 61.4239 85.264 cv
63.6109 85.264 65.3389 85.885 66.6349 87.073 cv
67.9309 88.288 68.5789 89.908 68.5789 91.96 cv
68.5789 94.093 67.9039 95.74 66.5809 96.901 cv
65.2579 98.062 63.3949 98.629 61.0189 98.629 cv
60.1819 98.629 59.3449 98.548 58.4809 98.44 cv
57.6169 98.305 56.7529 98.116 55.8349 97.819 cv
55.8349 95.146 li
56.6179 95.578 57.4279 95.902 58.2919 96.118 cv
59.1289 96.334 60.0199 96.415 60.9649 96.415 cv
62.4769 96.415 63.6919 96.037 64.5829 95.227 cv
65.4469 94.417 65.9059 93.337 65.9059 91.96 cv
65.9059 90.61 65.4469 89.53 64.5829 88.72 cv
63.6919 87.91 62.4769 87.505 60.9649 87.505 cv
60.2629 87.505 59.5339 87.586 58.8319 87.748 cv
58.1299 87.91 57.4009 88.153 56.6719 88.477 cv
56.6719 78.595 li
f
2.5 lw
2 lc
99.5903 104.974 mo
161.505 389.522 li
223.42 387.868 li
285.335 391.631 li
347.25 389.15 li
409.166 392.127 li
471.081 391.341 li
532.996 391.714 li
@
gsave
77.9201 395.89 mo
554.666 395.89 li
554.666 88.0202 li
77.9201 88.0202 li
77.9201 395.89 li
clp
0 lc
[9.25 4 ] 0 dsh
99.5903 118.579 mo
161.505 391.796 li
223.42 392.582 li
285.335 391.341 li
347.25 391.176 li
409.166 389.976 li
471.081 393.822 li
532.996 394.567 li
@
grestore
.8 lw
0 lj
77.92 395.89 mo
77.92 88.02 li
@
554.666 395.89 mo
554.666 88.02 li
@
77.92 395.89 mo
554.666 395.89 li
@
77.92 88.02 mo
554.666 88.02 li
@
657.115 395.89 mo
1133.86 395.89 li
1133.86 88.02 li
657.115 88.02 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
678.785 395.89 mo
678.785 399.39 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
678.785 395.89 mo
678.785 399.39 li
@
665.91 405.478 mo
664.533 405.478 663.507 406.153 662.805 407.503 cv
662.103 408.853 661.779 410.878 661.779 413.578 cv
661.779 416.278 662.103 418.303 662.805 419.653 cv
663.507 421.003 664.533 421.678 665.91 421.678 cv
667.287 421.678 668.313 421.003 669.015 419.653 cv
669.69 418.303 670.041 416.278 670.041 413.578 cv
670.041 410.878 669.69 408.853 669.015 407.503 cv
668.313 406.153 667.287 405.478 665.91 405.478 cv
665.91 403.372 mo
668.097 403.372 669.771 404.263 670.959 405.991 cv
672.12 407.746 672.714 410.284 672.714 413.578 cv
672.714 416.899 672.12 419.437 670.959 421.165 cv
669.771 422.893 668.097 423.757 665.91 423.757 cv
663.696 423.757 661.995 422.893 660.834 421.165 cv
659.673 419.437 659.106 416.899 659.106 413.578 cv
659.106 410.284 659.673 407.746 660.834 405.991 cv
661.995 404.263 663.696 403.372 665.91 403.372 cv
f
677.385 420.058 mo
680.166 420.058 li
680.166 423.406 li
677.385 423.406 li
677.385 420.058 li
f
685.998 403.723 mo
696.447 403.723 li
696.447 405.964 li
688.428 405.964 li
688.428 410.797 li
688.806 410.662 689.211 410.554 689.589 410.5 cv
689.967 410.446 690.372 410.392 690.75 410.392 cv
692.937 410.392 694.665 411.013 695.961 412.201 cv
697.257 413.416 697.905 415.036 697.905 417.088 cv
697.905 419.221 697.23 420.868 695.907 422.029 cv
694.584 423.19 692.721 423.757 690.345 423.757 cv
689.508 423.757 688.671 423.676 687.807 423.568 cv
686.943 423.433 686.079 423.244 685.161 422.947 cv
685.161 420.274 li
685.944 420.706 686.754 421.03 687.618 421.246 cv
688.455 421.462 689.346 421.543 690.291 421.543 cv
691.803 421.543 693.018 421.165 693.909 420.355 cv
694.773 419.545 695.232 418.465 695.232 417.088 cv
695.232 415.738 694.773 414.658 693.909 413.848 cv
693.018 413.038 691.803 412.633 690.291 412.633 cv
689.589 412.633 688.86 412.714 688.158 412.876 cv
687.456 413.038 686.727 413.281 685.998 413.605 cv
685.998 403.723 li
f
740.7 395.89 mo
740.7 399.39 li
f
740.7 395.89 mo
740.7 399.39 li
@
735.462 421.165 mo
739.809 421.165 li
739.809 406.153 li
735.084 407.098 li
735.084 404.668 li
739.782 403.723 li
742.455 403.723 li
742.455 421.165 li
746.802 421.165 li
746.802 423.406 li
735.462 423.406 li
735.462 421.165 li
f
802.615 395.89 mo
802.615 399.39 li
f
802.615 395.89 mo
802.615 399.39 li
@
784.503 421.165 mo
788.85 421.165 li
788.85 406.153 li
784.125 407.098 li
784.125 404.668 li
788.823 403.723 li
791.496 403.723 li
791.496 421.165 li
795.843 421.165 li
795.843 423.406 li
784.503 423.406 li
784.503 421.165 li
f
801.216 420.058 mo
803.997 420.058 li
803.997 423.406 li
801.216 423.406 li
801.216 420.058 li
f
809.829 403.723 mo
820.278 403.723 li
820.278 405.964 li
812.259 405.964 li
812.259 410.797 li
812.637 410.662 813.042 410.554 813.42 410.5 cv
813.798 410.446 814.203 410.392 814.581 410.392 cv
816.768 410.392 818.496 411.013 819.792 412.201 cv
821.088 413.416 821.736 415.036 821.736 417.088 cv
821.736 419.221 821.061 420.868 819.738 422.029 cv
818.415 423.19 816.552 423.757 814.176 423.757 cv
813.339 423.757 812.502 423.676 811.638 423.568 cv
810.774 423.433 809.91 423.244 808.992 422.947 cv
808.992 420.274 li
809.775 420.706 810.585 421.03 811.449 421.246 cv
812.286 421.462 813.177 421.543 814.122 421.543 cv
815.634 421.543 816.849 421.165 817.74 420.355 cv
818.604 419.545 819.063 418.465 819.063 417.088 cv
819.063 415.738 818.604 414.658 817.74 413.848 cv
816.849 413.038 815.634 412.633 814.122 412.633 cv
813.42 412.633 812.691 412.714 811.989 412.876 cv
811.287 413.038 810.558 413.281 809.829 413.605 cv
809.829 403.723 li
f
864.531 395.89 mo
864.531 399.39 li
f
864.531 395.89 mo
864.531 399.39 li
@
866.907 412.795 mo
868.176 413.065 869.175 413.632 869.877 414.496 cv
870.579 415.36 870.957 416.44 870.957 417.682 cv
870.957 419.626 870.282 421.138 868.959 422.191 cv
867.609 423.244 865.719 423.757 863.262 423.757 cv
862.425 423.757 861.561 423.676 860.697 423.514 cv
859.833 423.379 858.915 423.136 857.997 422.812 cv
857.997 420.247 li
858.726 420.679 859.536 421.003 860.427 421.219 cv
861.291 421.435 862.209 421.543 863.181 421.543 cv
864.855 421.543 866.124 421.219 866.988 420.571 cv
867.852 419.923 868.311 418.951 868.311 417.682 cv
868.311 416.548 867.906 415.63 867.096 414.982 cv
866.286 414.334 865.152 413.983 863.694 413.983 cv
861.399 413.983 li
861.399 411.796 li
863.802 411.796 li
865.098 411.796 866.097 411.553 866.799 411.013 cv
867.501 410.5 867.852 409.744 867.852 408.745 cv
867.852 407.746 867.474 406.963 866.772 406.423 cv
866.043 405.883 865.017 405.613 863.694 405.613 cv
862.965 405.613 862.182 405.694 861.345 405.856 cv
860.508 406.018 859.59 406.261 858.591 406.585 cv
858.591 404.209 li
859.59 403.939 860.535 403.723 861.426 403.588 cv
862.29 403.453 863.127 403.372 863.937 403.372 cv
865.935 403.372 867.528 403.831 868.716 404.749 cv
869.904 405.667 870.498 406.909 870.498 408.475 cv
870.498 409.555 870.174 410.473 869.553 411.229 cv
868.932 411.985 868.041 412.525 866.907 412.795 cv
f
926.446 395.89 mo
926.446 399.39 li
f
926.446 395.89 mo
926.446 399.39 li
@
920.776 403.723 mo
931.225 403.723 li
931.225 405.964 li
923.206 405.964 li
923.206 410.797 li
923.584 410.662 923.989 410.554 924.367 410.5 cv
924.745 410.446 925.15 410.392 925.528 410.392 cv
927.715 410.392 929.443 411.013 930.739 412.201 cv
932.035 413.416 932.683 415.036 932.683 417.088 cv
932.683 419.221 932.008 420.868 930.685 422.029 cv
929.362 423.19 927.499 423.757 925.123 423.757 cv
924.286 423.757 923.449 423.676 922.585 423.568 cv
921.721 423.433 920.857 423.244 919.939 422.947 cv
919.939 420.274 li
920.722 420.706 921.532 421.03 922.396 421.246 cv
923.233 421.462 924.124 421.543 925.069 421.543 cv
926.581 421.543 927.796 421.165 928.687 420.355 cv
929.551 419.545 930.01 418.465 930.01 417.088 cv
930.01 415.738 929.551 414.658 928.687 413.848 cv
927.796 413.038 926.581 412.633 925.069 412.633 cv
924.367 412.633 923.638 412.714 922.936 412.876 cv
922.234 413.038 921.505 413.281 920.776 413.605 cv
920.776 403.723 li
f
988.361 395.89 mo
988.361 399.39 li
f
988.361 395.89 mo
988.361 399.39 li
@
974.537 421.165 mo
978.884 421.165 li
978.884 406.153 li
974.159 407.098 li
974.159 404.668 li
978.857 403.723 li
981.53 403.723 li
981.53 421.165 li
985.877 421.165 li
985.877 423.406 li
974.537 423.406 li
974.537 421.165 li
f
996.947 405.478 mo
995.57 405.478 994.544 406.153 993.842 407.503 cv
993.14 408.853 992.816 410.878 992.816 413.578 cv
992.816 416.278 993.14 418.303 993.842 419.653 cv
994.544 421.003 995.57 421.678 996.947 421.678 cv
998.324 421.678 999.35 421.003 1000.05 419.653 cv
1000.73 418.303 1001.08 416.278 1001.08 413.578 cv
1001.08 410.878 1000.73 408.853 1000.05 407.503 cv
999.35 406.153 998.324 405.478 996.947 405.478 cv
996.947 403.372 mo
999.134 403.372 1000.81 404.263 1002 405.991 cv
1003.16 407.746 1003.75 410.284 1003.75 413.578 cv
1003.75 416.899 1003.16 419.437 1002 421.165 cv
1000.81 422.893 999.134 423.757 996.947 423.757 cv
994.733 423.757 993.032 422.893 991.871 421.165 cv
990.71 419.437 990.143 416.899 990.143 413.578 cv
990.143 410.284 990.71 407.746 991.871 405.991 cv
993.032 404.263 994.733 403.372 996.947 403.372 cv
f
1050.28 395.89 mo
1050.28 399.39 li
f
1050.28 395.89 mo
1050.28 399.39 li
@
1044.07 412.795 mo
1045.33 413.065 1046.33 413.632 1047.04 414.496 cv
1047.74 415.36 1048.12 416.44 1048.12 417.682 cv
1048.12 419.626 1047.44 421.138 1046.12 422.191 cv
1044.77 423.244 1042.88 423.757 1040.42 423.757 cv
1039.58 423.757 1038.72 423.676 1037.86 423.514 cv
1036.99 423.379 1036.07 423.136 1035.16 422.812 cv
1035.16 420.247 li
1035.89 420.679 1036.69 421.003 1037.59 421.219 cv
1038.45 421.435 1039.37 421.543 1040.34 421.543 cv
1042.01 421.543 1043.28 421.219 1044.15 420.571 cv
1045.01 419.923 1045.47 418.951 1045.47 417.682 cv
1045.47 416.548 1045.07 415.63 1044.26 414.982 cv
1043.44 414.334 1042.31 413.983 1040.85 413.983 cv
1038.56 413.983 li
1038.56 411.796 li
1040.96 411.796 li
1042.26 411.796 1043.26 411.553 1043.96 411.013 cv
1044.66 410.5 1045.01 409.744 1045.01 408.745 cv
1045.01 407.746 1044.63 406.963 1043.93 406.423 cv
1043.2 405.883 1042.18 405.613 1040.85 405.613 cv
1040.12 405.613 1039.34 405.694 1038.5 405.856 cv
1037.67 406.018 1036.75 406.261 1035.75 406.585 cv
1035.75 404.209 li
1036.75 403.939 1037.69 403.723 1038.58 403.588 cv
1039.45 403.453 1040.29 403.372 1041.1 403.372 cv
1043.09 403.372 1044.69 403.831 1045.88 404.749 cv
1047.06 405.667 1047.66 406.909 1047.66 408.475 cv
1047.66 409.555 1047.33 410.473 1046.71 411.229 cv
1046.09 411.985 1045.2 412.525 1044.07 412.795 cv
f
1058.86 405.478 mo
1057.48 405.478 1056.46 406.153 1055.76 407.503 cv
1055.06 408.853 1054.73 410.878 1054.73 413.578 cv
1054.73 416.278 1055.06 418.303 1055.76 419.653 cv
1056.46 421.003 1057.48 421.678 1058.86 421.678 cv
1060.24 421.678 1061.27 421.003 1061.97 419.653 cv
1062.64 418.303 1062.99 416.278 1062.99 413.578 cv
1062.99 410.878 1062.64 408.853 1061.97 407.503 cv
1061.27 406.153 1060.24 405.478 1058.86 405.478 cv
1058.86 403.372 mo
1061.05 403.372 1062.72 404.263 1063.91 405.991 cv
1065.07 407.746 1065.67 410.284 1065.67 413.578 cv
1065.67 416.899 1065.07 419.437 1063.91 421.165 cv
1062.72 422.893 1061.05 423.757 1058.86 423.757 cv
1056.65 423.757 1054.95 422.893 1053.79 421.165 cv
1052.63 419.437 1052.06 416.899 1052.06 413.578 cv
1052.06 410.284 1052.63 407.746 1053.79 405.991 cv
1054.95 404.263 1056.65 403.372 1058.86 403.372 cv
f
1112.19 395.89 mo
1112.19 399.39 li
f
1112.19 395.89 mo
1112.19 399.39 li
@
1089.78 421.165 mo
1094.13 421.165 li
1094.13 406.153 li
1089.4 407.098 li
1089.4 404.668 li
1094.1 403.723 li
1096.77 403.723 li
1096.77 421.165 li
1101.12 421.165 li
1101.12 423.406 li
1089.78 423.406 li
1089.78 421.165 li
f
1112.19 405.478 mo
1110.81 405.478 1109.79 406.153 1109.09 407.503 cv
1108.38 408.853 1108.06 410.878 1108.06 413.578 cv
1108.06 416.278 1108.38 418.303 1109.09 419.653 cv
1109.79 421.003 1110.81 421.678 1112.19 421.678 cv
1113.57 421.678 1114.59 421.003 1115.3 419.653 cv
1115.97 418.303 1116.32 416.278 1116.32 413.578 cv
1116.32 410.878 1115.97 408.853 1115.3 407.503 cv
1114.59 406.153 1113.57 405.478 1112.19 405.478 cv
1112.19 403.372 mo
1114.38 403.372 1116.05 404.263 1117.24 405.991 cv
1118.4 407.746 1118.99 410.284 1118.99 413.578 cv
1118.99 416.899 1118.4 419.437 1117.24 421.165 cv
1116.05 422.893 1114.38 423.757 1112.19 423.757 cv
1109.98 423.757 1108.28 422.893 1107.11 421.165 cv
1105.95 419.437 1105.39 416.899 1105.39 413.578 cv
1105.39 410.284 1105.95 407.746 1107.11 405.991 cv
1108.28 404.263 1109.98 403.372 1112.19 403.372 cv
f
1129.36 405.478 mo
1127.99 405.478 1126.96 406.153 1126.26 407.503 cv
1125.56 408.853 1125.23 410.878 1125.23 413.578 cv
1125.23 416.278 1125.56 418.303 1126.26 419.653 cv
1126.96 421.003 1127.99 421.678 1129.36 421.678 cv
1130.74 421.678 1131.77 421.003 1132.47 419.653 cv
1133.14 418.303 1133.49 416.278 1133.49 413.578 cv
1133.49 410.878 1133.14 408.853 1132.47 407.503 cv
1131.77 406.153 1130.74 405.478 1129.36 405.478 cv
1129.36 403.372 mo
1131.55 403.372 1133.22 404.263 1134.41 405.991 cv
1135.57 407.746 1136.17 410.284 1136.17 413.578 cv
1136.17 416.899 1135.57 419.437 1134.41 421.165 cv
1133.22 422.893 1131.55 423.757 1129.36 423.757 cv
1127.15 423.757 1125.45 422.893 1124.29 421.165 cv
1123.13 419.437 1122.56 416.899 1122.56 413.578 cv
1122.56 410.284 1123.13 407.746 1124.29 405.991 cv
1125.45 404.263 1127.15 403.372 1129.36 403.372 cv
f
809.863 433.045 mo
808.631 435.173 807.735 437.245 807.147 439.289 cv
806.531 441.333 806.251 443.405 806.251 445.505 cv
806.251 447.633 806.531 449.705 807.147 451.749 cv
807.735 453.821 808.631 455.865 809.863 457.965 cv
807.679 457.965 li
806.307 455.809 805.271 453.737 804.599 451.665 cv
803.927 449.593 803.591 447.549 803.591 445.505 cv
803.591 443.489 803.927 441.445 804.599 439.373 cv
805.271 437.301 806.279 435.201 807.679 433.045 cv
809.863 433.045 li
f
825.739 446.653 mo
825.739 444.805 825.347 443.377 824.591 442.313 cv
823.807 441.249 822.771 440.717 821.455 440.717 cv
820.111 440.717 819.075 441.249 818.319 442.313 cv
817.535 443.377 817.171 444.805 817.171 446.653 cv
817.171 448.501 817.535 449.957 818.319 451.021 cv
819.075 452.085 820.111 452.589 821.455 452.589 cv
822.771 452.589 823.807 452.085 824.591 451.021 cv
825.347 449.957 825.739 448.501 825.739 446.653 cv
817.171 441.305 mo
817.675 440.409 818.347 439.737 819.159 439.289 cv
819.971 438.841 820.951 438.617 822.071 438.617 cv
823.919 438.617 825.431 439.373 826.607 440.829 cv
827.755 442.313 828.343 444.245 828.343 446.653 cv
828.343 449.061 827.755 451.021 826.607 452.477 cv
825.431 453.933 823.919 454.661 822.071 454.661 cv
820.951 454.661 819.971 454.437 819.159 454.017 cv
818.347 453.597 817.675 452.925 817.171 452.001 cv
817.171 454.297 li
814.651 454.297 li
814.651 433.017 li
817.171 433.017 li
817.171 441.305 li
f
832.123 433.045 mo
834.307 433.045 li
835.651 435.201 836.687 437.301 837.359 439.373 cv
838.031 441.445 838.395 443.489 838.395 445.505 cv
838.395 447.549 838.031 449.593 837.359 451.665 cv
836.687 453.737 835.651 455.809 834.307 457.965 cv
832.123 457.965 li
833.327 455.865 834.223 453.821 834.839 451.749 cv
835.427 449.705 835.735 447.633 835.735 445.505 cv
835.735 443.405 835.427 441.333 834.839 439.289 cv
834.223 437.245 833.327 435.173 832.123 433.045 cv
f
843.547 433.885 mo
855.279 433.885 li
855.279 436.209 li
846.319 436.209 li
846.319 442.229 li
854.411 442.229 li
854.411 444.553 li
846.319 444.553 li
846.319 454.297 li
843.547 454.297 li
843.547 433.885 li
f
858.275 445.505 mo
865.639 445.505 li
865.639 447.745 li
858.275 447.745 li
858.275 445.505 li
f
881.57 441.921 mo
882.187 440.801 882.943 439.989 883.81 439.429 cv
884.679 438.897 885.714 438.617 886.919 438.617 cv
888.487 438.617 889.719 439.177 890.586 440.297 cv
891.454 441.417 891.903 443.013 891.903 445.057 cv
891.903 454.297 li
889.383 454.297 li
889.383 445.141 li
889.383 443.685 889.102 442.593 888.599 441.865 cv
888.067 441.165 887.282 440.801 886.219 440.801 cv
884.903 440.801 883.867 441.249 883.11 442.117 cv
882.354 442.985 881.99 444.161 881.99 445.645 cv
881.99 454.297 li
879.471 454.297 li
879.471 445.141 li
879.471 443.685 879.19 442.593 878.687 441.865 cv
878.154 441.165 877.343 440.801 876.279 440.801 cv
874.99 440.801 873.954 441.249 873.198 442.117 cv
872.443 442.985 872.078 444.161 872.078 445.645 cv
872.078 454.297 li
869.558 454.297 li
869.558 438.981 li
872.078 438.981 li
872.078 441.361 li
872.638 440.437 873.339 439.737 874.151 439.289 cv
874.935 438.841 875.886 438.617 877.006 438.617 cv
878.127 438.617 879.05 438.897 879.834 439.457 cv
880.618 440.017 881.179 440.857 881.57 441.921 cv
f
910.018 446.009 mo
910.018 447.241 li
898.454 447.241 li
898.566 448.977 899.07 450.321 900.022 451.217 cv
900.946 452.113 902.234 452.561 903.914 452.561 cv
904.866 452.561 905.818 452.449 906.714 452.225 cv
907.61 452.001 908.534 451.637 909.43 451.133 cv
909.43 453.513 li
908.534 453.905 907.61 454.213 906.658 454.381 cv
905.706 454.549 904.726 454.661 903.774 454.661 cv
901.31 454.661 899.378 453.961 897.951 452.561 cv
896.522 451.161 895.822 449.229 895.822 446.793 cv
895.822 444.301 896.494 442.313 897.839 440.829 cv
899.182 439.373 901.03 438.617 903.326 438.617 cv
905.398 438.617 907.022 439.289 908.226 440.605 cv
909.402 441.949 910.018 443.741 910.018 446.009 cv
907.498 445.281 mo
907.47 443.909 907.078 442.817 906.35 441.977 cv
905.594 441.165 904.586 440.745 903.354 440.745 cv
901.954 440.745 900.834 441.165 899.994 441.949 cv
899.154 442.733 898.65 443.853 898.538 445.281 cv
907.498 445.281 li
f
921.107 446.597 mo
919.063 446.597 917.663 446.849 916.879 447.297 cv
916.095 447.773 915.703 448.557 915.703 449.677 cv
915.703 450.573 915.983 451.301 916.571 451.805 cv
917.159 452.337 917.971 452.589 918.979 452.589 cv
920.379 452.589 921.499 452.113 922.339 451.105 cv
923.179 450.125 923.599 448.809 923.599 447.157 cv
923.599 446.597 li
921.107 446.597 li
926.119 445.561 mo
926.119 454.297 li
923.599 454.297 li
923.599 451.973 li
923.011 452.925 922.283 453.597 921.443 454.017 cv
920.603 454.437 919.539 454.661 918.307 454.661 cv
916.739 454.661 915.479 454.241 914.555 453.373 cv
913.631 452.505 913.183 451.329 913.183 449.845 cv
913.183 448.137 913.743 446.849 914.919 445.953 cv
916.067 445.085 917.775 444.637 920.071 444.637 cv
923.599 444.637 li
923.599 444.385 li
923.599 443.237 923.207 442.341 922.451 441.697 cv
921.695 441.081 920.631 440.745 919.259 440.745 cv
918.363 440.745 917.523 440.857 916.683 441.081 cv
915.843 441.305 915.059 441.613 914.303 442.005 cv
914.303 439.681 li
915.199 439.345 916.095 439.065 916.963 438.897 cv
917.831 438.729 918.671 438.617 919.511 438.617 cv
921.723 438.617 923.375 439.205 924.467 440.353 cv
925.559 441.501 926.119 443.237 926.119 445.561 cv
f
941.071 439.429 mo
941.071 441.809 li
940.343 441.473 939.615 441.193 938.859 440.997 cv
938.075 440.829 937.291 440.717 936.479 440.717 cv
935.219 440.717 934.267 440.913 933.651 441.305 cv
933.035 441.697 932.727 442.257 932.727 443.013 cv
932.727 443.601 932.951 444.049 933.399 444.385 cv
933.847 444.721 934.743 445.057 936.087 445.337 cv
936.955 445.533 li
938.747 445.925 940.007 446.485 940.763 447.157 cv
941.491 447.857 941.883 448.837 941.883 450.069 cv
941.883 451.497 941.323 452.617 940.203 453.429 cv
939.083 454.269 937.515 454.661 935.555 454.661 cv
934.715 454.661 933.875 454.577 932.979 454.437 cv
932.083 454.297 931.159 454.073 930.179 453.737 cv
930.179 451.133 li
931.103 451.637 932.027 452.001 932.923 452.225 cv
933.819 452.477 934.715 452.589 935.611 452.589 cv
936.787 452.589 937.711 452.393 938.355 452.001 cv
938.971 451.609 939.307 451.021 939.307 450.265 cv
939.307 449.593 939.055 449.061 938.607 448.697 cv
938.159 448.333 937.151 447.969 935.583 447.633 cv
934.715 447.437 li
933.147 447.101 931.999 446.597 931.327 445.925 cv
930.627 445.253 930.291 444.329 930.291 443.125 cv
930.291 441.697 930.795 440.577 931.803 439.793 cv
932.811 439.009 934.267 438.617 936.171 438.617 cv
937.095 438.617 937.963 438.701 938.803 438.841 cv
939.615 438.981 940.371 439.177 941.071 439.429 cv
f
945.635 448.249 mo
945.635 438.981 li
948.155 438.981 li
948.155 448.165 li
948.155 449.621 948.435 450.685 948.995 451.413 cv
949.555 452.141 950.395 452.505 951.543 452.505 cv
952.887 452.505 953.979 452.085 954.763 451.217 cv
955.547 450.349 955.939 449.173 955.939 447.661 cv
955.939 438.981 li
958.459 438.981 li
958.459 454.297 li
955.939 454.297 li
955.939 451.945 li
955.323 452.897 954.595 453.569 953.811 454.017 cv
952.999 454.437 952.075 454.661 951.011 454.661 cv
949.247 454.661 947.903 454.129 947.007 453.037 cv
946.083 451.973 945.635 450.377 945.635 448.249 cv
951.963 438.617 mo
951.963 438.617 li
f
972.515 441.333 mo
972.235 441.165 971.927 441.053 971.591 440.969 cv
971.255 440.913 970.891 440.857 970.499 440.857 cv
969.071 440.857 967.979 441.333 967.223 442.257 cv
966.439 443.181 966.075 444.497 966.075 446.233 cv
966.075 454.297 li
963.555 454.297 li
963.555 438.981 li
966.075 438.981 li
966.075 441.361 li
966.579 440.437 967.279 439.737 968.119 439.289 cv
968.959 438.841 969.995 438.617 971.227 438.617 cv
971.395 438.617 971.591 438.645 971.815 438.645 cv
972.011 438.673 972.235 438.701 972.515 438.757 cv
972.515 441.333 li
f
988.251 446.009 mo
988.251 447.241 li
976.687 447.241 li
976.799 448.977 977.303 450.321 978.255 451.217 cv
979.179 452.113 980.467 452.561 982.147 452.561 cv
983.099 452.561 984.051 452.449 984.947 452.225 cv
985.843 452.001 986.767 451.637 987.663 451.133 cv
987.663 453.513 li
986.767 453.905 985.843 454.213 984.891 454.381 cv
983.939 454.549 982.959 454.661 982.007 454.661 cv
979.543 454.661 977.611 453.961 976.183 452.561 cv
974.755 451.161 974.055 449.229 974.055 446.793 cv
974.055 444.301 974.727 442.313 976.071 440.829 cv
977.415 439.373 979.263 438.617 981.559 438.617 cv
983.631 438.617 985.255 439.289 986.459 440.605 cv
987.635 441.949 988.251 443.741 988.251 446.009 cv
985.731 445.281 mo
985.703 443.909 985.311 442.817 984.583 441.977 cv
983.827 441.165 982.819 440.745 981.587 440.745 cv
980.187 440.745 979.067 441.165 978.227 441.949 cv
977.387 442.733 976.883 443.853 976.771 445.281 cv
985.731 445.281 li
f
657.115 395.89 mo
653.615 395.89 li
f
657.115 395.89 mo
653.615 395.89 li
@
598.607 388.22 mo
597.23 388.22 596.204 388.895 595.502 390.245 cv
594.8 391.595 594.476 393.62 594.476 396.32 cv
594.476 399.02 594.8 401.045 595.502 402.395 cv
596.204 403.745 597.23 404.42 598.607 404.42 cv
599.984 404.42 601.01 403.745 601.712 402.395 cv
602.387 401.045 602.738 399.02 602.738 396.32 cv
602.738 393.62 602.387 391.595 601.712 390.245 cv
601.01 388.895 599.984 388.22 598.607 388.22 cv
598.607 386.114 mo
600.794 386.114 602.468 387.005 603.656 388.733 cv
604.817 390.488 605.411 393.026 605.411 396.32 cv
605.411 399.641 604.817 402.179 603.656 403.907 cv
602.468 405.635 600.794 406.499 598.607 406.499 cv
596.393 406.499 594.692 405.635 593.531 403.907 cv
592.37 402.179 591.803 399.641 591.803 396.32 cv
591.803 393.026 592.37 390.488 593.531 388.733 cv
594.692 387.005 596.393 386.114 598.607 386.114 cv
f
610.082 402.8 mo
612.863 402.8 li
612.863 406.148 li
610.082 406.148 li
610.082 402.8 li
f
617.993 386.465 mo
630.656 386.465 li
630.656 387.599 li
623.501 406.148 li
620.72 406.148 li
627.443 388.706 li
617.993 388.706 li
617.993 386.465 li
f
635.867 386.465 mo
646.316 386.465 li
646.316 388.706 li
638.297 388.706 li
638.297 393.539 li
638.675 393.404 639.08 393.296 639.458 393.242 cv
639.836 393.188 640.241 393.134 640.619 393.134 cv
642.806 393.134 644.534 393.755 645.83 394.943 cv
647.126 396.158 647.774 397.778 647.774 399.83 cv
647.774 401.963 647.099 403.61 645.776 404.771 cv
644.453 405.932 642.59 406.499 640.214 406.499 cv
639.377 406.499 638.54 406.418 637.676 406.31 cv
636.812 406.175 635.948 405.986 635.03 405.689 cv
635.03 403.016 li
635.813 403.448 636.623 403.772 637.487 403.988 cv
638.324 404.204 639.215 404.285 640.16 404.285 cv
641.672 404.285 642.887 403.907 643.778 403.097 cv
644.642 402.287 645.101 401.207 645.101 399.83 cv
645.101 398.48 644.642 397.4 643.778 396.59 cv
642.887 395.78 641.672 395.375 640.16 395.375 cv
639.458 395.375 638.729 395.456 638.027 395.618 cv
637.325 395.78 636.596 396.023 635.867 396.347 cv
635.867 386.465 li
f
657.115 334.316 mo
653.615 334.316 li
f
657.115 334.316 mo
653.615 334.316 li
@
598.607 326.646 mo
597.23 326.646 596.204 327.321 595.502 328.671 cv
594.8 330.021 594.476 332.046 594.476 334.746 cv
594.476 337.446 594.8 339.471 595.502 340.821 cv
596.204 342.171 597.23 342.846 598.607 342.846 cv
599.984 342.846 601.01 342.171 601.712 340.821 cv
602.387 339.471 602.738 337.446 602.738 334.746 cv
602.738 332.046 602.387 330.021 601.712 328.671 cv
601.01 327.321 599.984 326.646 598.607 326.646 cv
598.607 324.54 mo
600.794 324.54 602.468 325.431 603.656 327.159 cv
604.817 328.914 605.411 331.452 605.411 334.746 cv
605.411 338.067 604.817 340.605 603.656 342.333 cv
602.468 344.061 600.794 344.925 598.607 344.925 cv
596.393 344.925 594.692 344.061 593.531 342.333 cv
592.37 340.605 591.803 338.067 591.803 334.746 cv
591.803 331.452 592.37 328.914 593.531 327.159 cv
594.692 325.431 596.393 324.54 598.607 324.54 cv
f
610.082 341.226 mo
612.863 341.226 li
612.863 344.574 li
610.082 344.574 li
610.082 341.226 li
f
624.365 335.232 mo
623.096 335.232 622.097 335.583 621.368 336.258 cv
620.639 336.933 620.288 337.851 620.288 339.039 cv
620.288 340.227 620.639 341.172 621.368 341.847 cv
622.097 342.522 623.096 342.846 624.365 342.846 cv
625.607 342.846 626.606 342.522 627.335 341.82 cv
628.064 341.145 628.442 340.227 628.442 339.039 cv
628.442 337.851 628.064 336.933 627.362 336.258 cv
626.633 335.583 625.634 335.232 624.365 335.232 cv
621.692 334.098 mo
620.558 333.828 619.667 333.288 619.019 332.505 cv
618.371 331.722 618.074 330.777 618.074 329.643 cv
618.074 328.077 618.614 326.835 619.748 325.917 cv
620.855 324.999 622.394 324.54 624.365 324.54 cv
626.309 324.54 627.848 324.999 628.982 325.917 cv
630.089 326.835 630.656 328.077 630.656 329.643 cv
630.656 330.777 630.332 331.722 629.684 332.505 cv
629.036 333.288 628.172 333.828 627.038 334.098 cv
628.307 334.395 629.306 334.989 630.035 335.853 cv
630.737 336.717 631.115 337.797 631.115 339.039 cv
631.115 340.956 630.521 342.414 629.36 343.413 cv
628.172 344.439 626.525 344.925 624.365 344.925 cv
622.178 344.925 620.504 344.439 619.343 343.413 cv
618.182 342.414 617.615 340.956 617.615 339.039 cv
617.615 337.797 617.966 336.717 618.695 335.853 cv
619.397 334.989 620.396 334.395 621.692 334.098 cv
620.72 329.886 mo
620.72 330.912 621.017 331.722 621.665 332.289 cv
622.313 332.856 623.204 333.126 624.365 333.126 cv
625.499 333.126 626.39 332.856 627.038 332.289 cv
627.686 331.722 628.01 330.912 628.01 329.886 cv
628.01 328.86 627.686 328.077 627.038 327.51 cv
626.39 326.943 625.499 326.646 624.365 326.646 cv
623.204 326.646 622.313 326.943 621.665 327.51 cv
621.017 328.077 620.72 328.86 620.72 329.886 cv
f
641.537 326.646 mo
640.16 326.646 639.134 327.321 638.432 328.671 cv
637.73 330.021 637.406 332.046 637.406 334.746 cv
637.406 337.446 637.73 339.471 638.432 340.821 cv
639.134 342.171 640.16 342.846 641.537 342.846 cv
642.914 342.846 643.94 342.171 644.642 340.821 cv
645.317 339.471 645.668 337.446 645.668 334.746 cv
645.668 332.046 645.317 330.021 644.642 328.671 cv
643.94 327.321 642.914 326.646 641.537 326.646 cv
641.537 324.54 mo
643.724 324.54 645.398 325.431 646.586 327.159 cv
647.747 328.914 648.341 331.452 648.341 334.746 cv
648.341 338.067 647.747 340.605 646.586 342.333 cv
645.398 344.061 643.724 344.925 641.537 344.925 cv
639.323 344.925 637.622 344.061 636.461 342.333 cv
635.3 340.605 634.733 338.067 634.733 334.746 cv
634.733 331.452 635.3 328.914 636.461 327.159 cv
637.622 325.431 639.323 324.54 641.537 324.54 cv
f
657.115 272.742 mo
653.615 272.742 li
f
657.115 272.742 mo
653.615 272.742 li
@
598.607 265.072 mo
597.23 265.072 596.204 265.747 595.502 267.097 cv
594.8 268.447 594.476 270.472 594.476 273.172 cv
594.476 275.872 594.8 277.897 595.502 279.247 cv
596.204 280.597 597.23 281.272 598.607 281.272 cv
599.984 281.272 601.01 280.597 601.712 279.247 cv
602.387 277.897 602.738 275.872 602.738 273.172 cv
602.738 270.472 602.387 268.447 601.712 267.097 cv
601.01 265.747 599.984 265.072 598.607 265.072 cv
598.607 262.966 mo
600.794 262.966 602.468 263.857 603.656 265.585 cv
604.817 267.34 605.411 269.878 605.411 273.172 cv
605.411 276.493 604.817 279.031 603.656 280.759 cv
602.468 282.487 600.794 283.351 598.607 283.351 cv
596.393 283.351 594.692 282.487 593.531 280.759 cv
592.37 279.031 591.803 276.493 591.803 273.172 cv
591.803 269.878 592.37 267.34 593.531 265.585 cv
594.692 263.857 596.393 262.966 598.607 262.966 cv
f
610.082 279.652 mo
612.863 279.652 li
612.863 283 li
610.082 283 li
610.082 279.652 li
f
624.365 273.658 mo
623.096 273.658 622.097 274.009 621.368 274.684 cv
620.639 275.359 620.288 276.277 620.288 277.465 cv
620.288 278.653 620.639 279.598 621.368 280.273 cv
622.097 280.948 623.096 281.272 624.365 281.272 cv
625.607 281.272 626.606 280.948 627.335 280.246 cv
628.064 279.571 628.442 278.653 628.442 277.465 cv
628.442 276.277 628.064 275.359 627.362 274.684 cv
626.633 274.009 625.634 273.658 624.365 273.658 cv
621.692 272.524 mo
620.558 272.254 619.667 271.714 619.019 270.931 cv
618.371 270.148 618.074 269.203 618.074 268.069 cv
618.074 266.503 618.614 265.261 619.748 264.343 cv
620.855 263.425 622.394 262.966 624.365 262.966 cv
626.309 262.966 627.848 263.425 628.982 264.343 cv
630.089 265.261 630.656 266.503 630.656 268.069 cv
630.656 269.203 630.332 270.148 629.684 270.931 cv
629.036 271.714 628.172 272.254 627.038 272.524 cv
628.307 272.821 629.306 273.415 630.035 274.279 cv
630.737 275.143 631.115 276.223 631.115 277.465 cv
631.115 279.382 630.521 280.84 629.36 281.839 cv
628.172 282.865 626.525 283.351 624.365 283.351 cv
622.178 283.351 620.504 282.865 619.343 281.839 cv
618.182 280.84 617.615 279.382 617.615 277.465 cv
617.615 276.223 617.966 275.143 618.695 274.279 cv
619.397 273.415 620.396 272.821 621.692 272.524 cv
620.72 268.312 mo
620.72 269.338 621.017 270.148 621.665 270.715 cv
622.313 271.282 623.204 271.552 624.365 271.552 cv
625.499 271.552 626.39 271.282 627.038 270.715 cv
627.686 270.148 628.01 269.338 628.01 268.312 cv
628.01 267.286 627.686 266.503 627.038 265.936 cv
626.39 265.369 625.499 265.072 624.365 265.072 cv
623.204 265.072 622.313 265.369 621.665 265.936 cv
621.017 266.503 620.72 267.286 620.72 268.312 cv
f
635.867 263.317 mo
646.316 263.317 li
646.316 265.558 li
638.297 265.558 li
638.297 270.391 li
638.675 270.256 639.08 270.148 639.458 270.094 cv
639.836 270.04 640.241 269.986 640.619 269.986 cv
642.806 269.986 644.534 270.607 645.83 271.795 cv
647.126 273.01 647.774 274.63 647.774 276.682 cv
647.774 278.815 647.099 280.462 645.776 281.623 cv
644.453 282.784 642.59 283.351 640.214 283.351 cv
639.377 283.351 638.54 283.27 637.676 283.162 cv
636.812 283.027 635.948 282.838 635.03 282.541 cv
635.03 279.868 li
635.813 280.3 636.623 280.624 637.487 280.84 cv
638.324 281.056 639.215 281.137 640.16 281.137 cv
641.672 281.137 642.887 280.759 643.778 279.949 cv
644.642 279.139 645.101 278.059 645.101 276.682 cv
645.101 275.332 644.642 274.252 643.778 273.442 cv
642.887 272.632 641.672 272.227 640.16 272.227 cv
639.458 272.227 638.729 272.308 638.027 272.47 cv
637.325 272.632 636.596 272.875 635.867 273.199 cv
635.867 263.317 li
f
657.115 211.168 mo
653.615 211.168 li
f
657.115 211.168 mo
653.615 211.168 li
@
598.607 203.498 mo
597.23 203.498 596.204 204.173 595.502 205.523 cv
594.8 206.873 594.476 208.898 594.476 211.598 cv
594.476 214.298 594.8 216.323 595.502 217.673 cv
596.204 219.023 597.23 219.698 598.607 219.698 cv
599.984 219.698 601.01 219.023 601.712 217.673 cv
602.387 216.323 602.738 214.298 602.738 211.598 cv
602.738 208.898 602.387 206.873 601.712 205.523 cv
601.01 204.173 599.984 203.498 598.607 203.498 cv
598.607 201.392 mo
600.794 201.392 602.468 202.283 603.656 204.011 cv
604.817 205.766 605.411 208.304 605.411 211.598 cv
605.411 214.919 604.817 217.457 603.656 219.185 cv
602.468 220.913 600.794 221.777 598.607 221.777 cv
596.393 221.777 594.692 220.913 593.531 219.185 cv
592.37 217.457 591.803 214.919 591.803 211.598 cv
591.803 208.304 592.37 205.766 593.531 204.011 cv
594.692 202.283 596.393 201.392 598.607 201.392 cv
f
610.082 218.078 mo
612.863 218.078 li
612.863 221.426 li
610.082 221.426 li
610.082 218.078 li
f
618.749 221.021 mo
618.749 218.591 li
619.397 218.915 620.072 219.158 620.774 219.32 cv
621.449 219.482 622.124 219.563 622.799 219.563 cv
624.527 219.563 625.877 218.996 626.795 217.808 cv
627.713 216.62 628.253 214.838 628.415 212.408 cv
627.875 213.164 627.227 213.758 626.471 214.163 cv
625.688 214.568 624.824 214.757 623.879 214.757 cv
621.881 214.757 620.315 214.163 619.181 212.975 cv
618.047 211.787 617.48 210.167 617.48 208.088 cv
617.48 206.09 618.074 204.47 619.262 203.228 cv
620.45 202.013 622.043 201.392 624.041 201.392 cv
626.309 201.392 628.064 202.283 629.252 204.011 cv
630.44 205.766 631.061 208.304 631.061 211.598 cv
631.061 214.73 630.305 217.187 628.847 219.023 cv
627.362 220.859 625.391 221.777 622.907 221.777 cv
622.232 221.777 621.557 221.696 620.882 221.588 cv
620.18 221.48 619.478 221.291 618.749 221.021 cv
624.041 212.678 mo
625.229 212.678 626.174 212.273 626.876 211.463 cv
627.578 210.653 627.929 209.519 627.929 208.088 cv
627.929 206.684 627.578 205.55 626.876 204.74 cv
626.174 203.93 625.229 203.498 624.041 203.498 cv
622.853 203.498 621.908 203.93 621.206 204.74 cv
620.504 205.55 620.153 206.684 620.153 208.088 cv
620.153 209.519 620.504 210.653 621.206 211.463 cv
621.908 212.273 622.853 212.678 624.041 212.678 cv
f
641.537 203.498 mo
640.16 203.498 639.134 204.173 638.432 205.523 cv
637.73 206.873 637.406 208.898 637.406 211.598 cv
637.406 214.298 637.73 216.323 638.432 217.673 cv
639.134 219.023 640.16 219.698 641.537 219.698 cv
642.914 219.698 643.94 219.023 644.642 217.673 cv
645.317 216.323 645.668 214.298 645.668 211.598 cv
645.668 208.898 645.317 206.873 644.642 205.523 cv
643.94 204.173 642.914 203.498 641.537 203.498 cv
641.537 201.392 mo
643.724 201.392 645.398 202.283 646.586 204.011 cv
647.747 205.766 648.341 208.304 648.341 211.598 cv
648.341 214.919 647.747 217.457 646.586 219.185 cv
645.398 220.913 643.724 221.777 641.537 221.777 cv
639.323 221.777 637.622 220.913 636.461 219.185 cv
635.3 217.457 634.733 214.919 634.733 211.598 cv
634.733 208.304 635.3 205.766 636.461 204.011 cv
637.622 202.283 639.323 201.392 641.537 201.392 cv
f
657.115 149.594 mo
653.615 149.594 li
f
657.115 149.594 mo
653.615 149.594 li
@
598.607 141.924 mo
597.23 141.924 596.204 142.599 595.502 143.949 cv
594.8 145.299 594.476 147.324 594.476 150.024 cv
594.476 152.724 594.8 154.749 595.502 156.099 cv
596.204 157.449 597.23 158.124 598.607 158.124 cv
599.984 158.124 601.01 157.449 601.712 156.099 cv
602.387 154.749 602.738 152.724 602.738 150.024 cv
602.738 147.324 602.387 145.299 601.712 143.949 cv
601.01 142.599 599.984 141.924 598.607 141.924 cv
598.607 139.818 mo
600.794 139.818 602.468 140.709 603.656 142.437 cv
604.817 144.192 605.411 146.73 605.411 150.024 cv
605.411 153.345 604.817 155.883 603.656 157.611 cv
602.468 159.339 600.794 160.203 598.607 160.203 cv
596.393 160.203 594.692 159.339 593.531 157.611 cv
592.37 155.883 591.803 153.345 591.803 150.024 cv
591.803 146.73 592.37 144.192 593.531 142.437 cv
594.692 140.709 596.393 139.818 598.607 139.818 cv
f
610.082 156.504 mo
612.863 156.504 li
612.863 159.852 li
610.082 159.852 li
610.082 156.504 li
f
618.749 159.447 mo
618.749 157.017 li
619.397 157.341 620.072 157.584 620.774 157.746 cv
621.449 157.908 622.124 157.989 622.799 157.989 cv
624.527 157.989 625.877 157.422 626.795 156.234 cv
627.713 155.046 628.253 153.264 628.415 150.834 cv
627.875 151.59 627.227 152.184 626.471 152.589 cv
625.688 152.994 624.824 153.183 623.879 153.183 cv
621.881 153.183 620.315 152.589 619.181 151.401 cv
618.047 150.213 617.48 148.593 617.48 146.514 cv
617.48 144.516 618.074 142.896 619.262 141.654 cv
620.45 140.439 622.043 139.818 624.041 139.818 cv
626.309 139.818 628.064 140.709 629.252 142.437 cv
630.44 144.192 631.061 146.73 631.061 150.024 cv
631.061 153.156 630.305 155.613 628.847 157.449 cv
627.362 159.285 625.391 160.203 622.907 160.203 cv
622.232 160.203 621.557 160.122 620.882 160.014 cv
620.18 159.906 619.478 159.717 618.749 159.447 cv
624.041 151.104 mo
625.229 151.104 626.174 150.699 626.876 149.889 cv
627.578 149.079 627.929 147.945 627.929 146.514 cv
627.929 145.11 627.578 143.976 626.876 143.166 cv
626.174 142.356 625.229 141.924 624.041 141.924 cv
622.853 141.924 621.908 142.356 621.206 143.166 cv
620.504 143.976 620.153 145.11 620.153 146.514 cv
620.153 147.945 620.504 149.079 621.206 149.889 cv
621.908 150.699 622.853 151.104 624.041 151.104 cv
f
635.867 140.169 mo
646.316 140.169 li
646.316 142.41 li
638.297 142.41 li
638.297 147.243 li
638.675 147.108 639.08 147 639.458 146.946 cv
639.836 146.892 640.241 146.838 640.619 146.838 cv
642.806 146.838 644.534 147.459 645.83 148.647 cv
647.126 149.862 647.774 151.482 647.774 153.534 cv
647.774 155.667 647.099 157.314 645.776 158.475 cv
644.453 159.636 642.59 160.203 640.214 160.203 cv
639.377 160.203 638.54 160.122 637.676 160.014 cv
636.812 159.879 635.948 159.69 635.03 159.393 cv
635.03 156.72 li
635.813 157.152 636.623 157.476 637.487 157.692 cv
638.324 157.908 639.215 157.989 640.16 157.989 cv
641.672 157.989 642.887 157.611 643.778 156.801 cv
644.642 155.991 645.101 154.911 645.101 153.534 cv
645.101 152.184 644.642 151.104 643.778 150.294 cv
642.887 149.484 641.672 149.079 640.16 149.079 cv
639.458 149.079 638.729 149.16 638.027 149.322 cv
637.325 149.484 636.596 149.727 635.867 150.051 cv
635.867 140.169 li
f
657.115 88.02 mo
653.615 88.02 li
f
657.115 88.02 mo
653.615 88.02 li
@
593.369 96.037 mo
597.716 96.037 li
597.716 81.025 li
592.991 81.97 li
592.991 79.54 li
597.689 78.595 li
600.362 78.595 li
600.362 96.037 li
604.709 96.037 li
604.709 98.278 li
593.369 98.278 li
593.369 96.037 li
f
610.082 94.93 mo
612.863 94.93 li
612.863 98.278 li
610.082 98.278 li
610.082 94.93 li
f
624.365 80.35 mo
622.988 80.35 621.962 81.025 621.26 82.375 cv
620.558 83.725 620.234 85.75 620.234 88.45 cv
620.234 91.15 620.558 93.175 621.26 94.525 cv
621.962 95.875 622.988 96.55 624.365 96.55 cv
625.742 96.55 626.768 95.875 627.47 94.525 cv
628.145 93.175 628.496 91.15 628.496 88.45 cv
628.496 85.75 628.145 83.725 627.47 82.375 cv
626.768 81.025 625.742 80.35 624.365 80.35 cv
624.365 78.244 mo
626.552 78.244 628.226 79.135 629.414 80.863 cv
630.575 82.618 631.169 85.156 631.169 88.45 cv
631.169 91.771 630.575 94.309 629.414 96.037 cv
628.226 97.765 626.552 98.629 624.365 98.629 cv
622.151 98.629 620.45 97.765 619.289 96.037 cv
618.128 94.309 617.561 91.771 617.561 88.45 cv
617.561 85.156 618.128 82.618 619.289 80.863 cv
620.45 79.135 622.151 78.244 624.365 78.244 cv
f
641.537 80.35 mo
640.16 80.35 639.134 81.025 638.432 82.375 cv
637.73 83.725 637.406 85.75 637.406 88.45 cv
637.406 91.15 637.73 93.175 638.432 94.525 cv
639.134 95.875 640.16 96.55 641.537 96.55 cv
642.914 96.55 643.94 95.875 644.642 94.525 cv
645.317 93.175 645.668 91.15 645.668 88.45 cv
645.668 85.75 645.317 83.725 644.642 82.375 cv
643.94 81.025 642.914 80.35 641.537 80.35 cv
641.537 78.244 mo
643.724 78.244 645.398 79.135 646.586 80.863 cv
647.747 82.618 648.341 85.156 648.341 88.45 cv
648.341 91.771 647.747 94.309 646.586 96.037 cv
645.398 97.765 643.724 98.629 641.537 98.629 cv
639.323 98.629 637.622 97.765 636.461 96.037 cv
635.3 94.309 634.733 91.771 634.733 88.45 cv
634.733 85.156 635.3 82.618 636.461 80.863 cv
637.622 79.135 639.323 78.244 641.537 78.244 cv
f
2.5 lw
2 lc
678.785 376.847 mo
740.7 96.3732 li
802.615 103.131 li
864.53 91.1722 li
926.445 94.2782 li
988.361 91.1532 li
1050.28 93.6172 li
1112.19 93.2612 li
@
gsave
657.115 395.89 mo
1133.86 395.89 li
1133.86 88.0202 li
657.115 88.0202 li
657.115 395.89 li
clp
0 lc
[9.25 4 ] 0 dsh
678.785 330.177 mo
740.7 90.7214 li
802.615 93.9274 li
864.53 91.5614 li
926.445 90.6694 li
988.361 91.1064 li
1050.28 89.0894 li
1112.19 88.7664 li
@
grestore
.8 lw
0 lj
657.115 395.89 mo
657.115 88.02 li
@
1133.86 395.89 mo
1133.86 88.02 li
@
657.115 395.89 mo
1133.86 395.89 li
@
657.115 88.02 mo
1133.86 88.02 li
@
764.527 57.1496 mo
404.449 57.1496 li
402.726 57.1479 401.528 56.7222 400.753 55.9462 cv
399.976 55.1701 399.551 53.9727 399.549 52.2496 cv
399.549 14.5586 li
399.551 12.8354 399.976 11.638 400.753 10.8623 cv
401.528 10.0859 402.726 9.66053 404.449 9.65851 cv
764.527 9.65851 li
766.25 9.66053 767.448 10.0859 768.224 10.8623 cv
769 11.638 769.425 12.8354 769.427 14.5586 cv
769.427 52.2496 li
769.425 53.9727 769 55.1701 768.224 55.9462 cv
767.448 56.7222 766.25 57.1479 764.527 57.1496 cv
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
764.539 58.1495 mo
764.535 58.1495 764.531 58.1495 764.527 58.1495 cv
404.449 58.1495 li
404.445 58.1495 404.441 58.1495 404.437 58.1495 cv
402.566 58.1495 401.068 57.675 400.046 56.653 cv
399.022 55.6289 398.547 54.1264 398.549 52.2496 cv
398.549 14.5586 li
398.547 12.6817 399.022 11.1792 400.046 10.1551 cv
401.067 9.13323 402.566 8.65865 404.437 8.65865 cv
404.441 8.65865 404.445 8.65865 404.449 8.65866 cv
764.527 8.65866 li
764.531 8.65865 764.535 8.65865 764.539 8.65865 cv
766.41 8.65865 767.909 9.13317 768.931 10.1551 cv
769.955 11.1792 770.429 12.6817 770.427 14.5586 cv
770.427 52.2496 li
770.429 54.1264 769.955 55.6289 768.931 56.653 cv
767.909 57.6749 766.41 58.1495 764.539 58.1495 cv
404.449 57.1496 mo
764.527 57.1496 li
766.25 57.1479 767.448 56.7222 768.224 55.9462 cv
769 55.1701 769.425 53.9727 769.427 52.2496 cv
769.427 14.5586 li
769.425 12.8354 769 11.638 768.224 10.8623 cv
767.448 10.0859 766.25 9.66053 764.527 9.65851 cv
404.449 9.65851 li
402.726 9.66053 401.528 10.0859 400.753 10.8623 cv
399.976 11.638 399.551 12.8354 399.549 14.5586 cv
399.549 52.2496 li
399.551 53.9727 399.976 55.1701 400.753 55.9462 cv
401.528 56.7222 402.726 57.1479 404.449 57.1496 cv
404.449 57.1496 li
.723903 .663935 .650507 .76965 cmyk
f
2.5 lw
1 lj
409.849 31.0246 mo
463.849 31.0246 li
1 /0 /CSD get_res sepcs
1 sep
@
488.095 20.792 mo
500.542 20.792 li
500.542 23.033 li
490.768 23.033 li
490.768 28.865 li
500.137 28.865 li
500.137 31.106 li
490.768 31.106 li
490.768 38.234 li
500.785 38.234 li
500.785 40.475 li
488.095 40.475 li
488.095 20.792 li
f
505.159 20.792 mo
507.832 20.792 li
507.832 38.234 li
517.417 38.234 li
517.417 40.475 li
505.159 40.475 li
505.159 20.792 li
f
522.871 22.979 mo
522.871 30.377 li
526.219 30.377 li
527.461 30.377 528.406 30.08 529.081 29.432 cv
529.756 28.784 530.107 27.866 530.107 26.678 cv
530.107 25.49 529.756 24.599 529.081 23.951 cv
528.406 23.303 527.461 22.979 526.219 22.979 cv
522.871 22.979 li
520.198 20.792 mo
526.219 20.792 li
528.406 20.792 530.08 21.305 531.214 22.304 cv
532.348 23.303 532.915 24.761 532.915 26.678 cv
532.915 28.622 532.348 30.107 531.214 31.079 cv
530.08 32.078 528.406 32.564 526.219 32.564 cv
522.871 32.564 li
522.871 40.475 li
520.198 40.475 li
520.198 20.792 li
f
0 lc
[9.25 4 ] 0 dsh
587.84 31.0246 mo
641.84 31.0246 li
@
666.086 20.792 mo
678.533 20.792 li
678.533 23.033 li
668.759 23.033 li
668.759 28.865 li
678.128 28.865 li
678.128 31.106 li
668.759 31.106 li
668.759 38.234 li
678.776 38.234 li
678.776 40.475 li
666.086 40.475 li
666.086 20.792 li
f
683.15 20.792 mo
685.823 20.792 li
685.823 38.234 li
695.408 38.234 li
695.408 40.475 li
683.15 40.475 li
683.15 20.792 li
f
700.862 22.979 mo
700.862 30.377 li
704.21 30.377 li
705.452 30.377 706.397 30.08 707.072 29.432 cv
707.747 28.784 708.098 27.866 708.098 26.678 cv
708.098 25.49 707.747 24.599 707.072 23.951 cv
706.397 23.303 705.452 22.979 704.21 22.979 cv
700.862 22.979 li
698.189 20.792 mo
704.21 20.792 li
706.397 20.792 708.071 21.305 709.205 22.304 cv
710.339 23.303 710.906 24.761 710.906 26.678 cv
710.906 28.622 710.339 30.107 709.205 31.079 cv
708.071 32.078 706.397 32.564 704.21 32.564 cv
700.862 32.564 li
700.862 40.475 li
698.189 40.475 li
698.189 20.792 li
f
725.594 44.93 mo
725.594 46.82 li
711.581 46.82 li
711.581 44.93 li
725.594 44.93 li
f
727.862 25.706 mo
730.292 25.706 li
730.292 40.475 li
727.862 40.475 li
727.862 25.706 li
727.862 19.955 mo
730.292 19.955 li
730.292 23.033 li
727.862 23.033 li
727.862 19.955 li
f
746.87 28.541 mo
747.464 27.461 748.193 26.678 749.03 26.138 cv
749.867 25.625 750.866 25.355 752.027 25.355 cv
753.539 25.355 754.727 25.895 755.564 26.975 cv
756.401 28.055 756.833 29.594 756.833 31.565 cv
756.833 40.475 li
754.403 40.475 li
754.403 31.646 li
754.403 30.242 754.133 29.189 753.647 28.487 cv
753.134 27.812 752.378 27.461 751.352 27.461 cv
750.083 27.461 749.084 27.893 748.355 28.73 cv
747.626 29.567 747.275 30.701 747.275 32.132 cv
747.275 40.475 li
744.845 40.475 li
744.845 31.646 li
744.845 30.242 744.575 29.189 744.089 28.487 cv
743.576 27.812 742.793 27.461 741.767 27.461 cv
740.525 27.461 739.526 27.893 738.797 28.73 cv
738.068 29.567 737.717 30.701 737.717 32.132 cv
737.717 40.475 li
735.287 40.475 li
735.287 25.706 li
737.717 25.706 li
737.717 28.001 li
738.257 27.11 738.932 26.435 739.715 26.003 cv
740.471 25.571 741.389 25.355 742.469 25.355 cv
743.549 25.355 744.44 25.625 745.196 26.165 cv
745.952 26.705 746.492 27.515 746.87 28.541 cv
f
77.92 788.92 mo
554.666 788.92 li
554.666 481.05 li
77.92 481.05 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
99.5903 788.92 mo
99.5903 792.42 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
[] 0 dsh
99.5903 788.92 mo
99.5903 792.42 li
@
86.715 798.508 mo
85.338 798.508 84.312 799.183 83.61 800.533 cv
82.908 801.883 82.584 803.908 82.584 806.608 cv
82.584 809.308 82.908 811.333 83.61 812.683 cv
84.312 814.033 85.338 814.708 86.715 814.708 cv
88.092 814.708 89.118 814.033 89.82 812.683 cv
90.495 811.333 90.846 809.308 90.846 806.608 cv
90.846 803.908 90.495 801.883 89.82 800.533 cv
89.118 799.183 88.092 798.508 86.715 798.508 cv
86.715 796.402 mo
88.902 796.402 90.576 797.293 91.764 799.021 cv
92.925 800.776 93.519 803.314 93.519 806.608 cv
93.519 809.929 92.925 812.467 91.764 814.195 cv
90.576 815.923 88.902 816.787 86.715 816.787 cv
84.501 816.787 82.8 815.923 81.639 814.195 cv
80.478 812.467 79.911 809.929 79.911 806.608 cv
79.911 803.314 80.478 800.776 81.639 799.021 cv
82.8 797.293 84.501 796.402 86.715 796.402 cv
f
98.19 813.088 mo
100.971 813.088 li
100.971 816.436 li
98.19 816.436 li
98.19 813.088 li
f
106.803 796.753 mo
117.252 796.753 li
117.252 798.994 li
109.233 798.994 li
109.233 803.827 li
109.611 803.692 110.016 803.584 110.394 803.53 cv
110.772 803.476 111.177 803.422 111.555 803.422 cv
113.742 803.422 115.47 804.043 116.766 805.231 cv
118.062 806.446 118.71 808.066 118.71 810.118 cv
118.71 812.251 118.035 813.898 116.712 815.059 cv
115.389 816.22 113.526 816.787 111.15 816.787 cv
110.313 816.787 109.476 816.706 108.612 816.598 cv
107.748 816.463 106.884 816.274 105.966 815.977 cv
105.966 813.304 li
106.749 813.736 107.559 814.06 108.423 814.276 cv
109.26 814.492 110.151 814.573 111.096 814.573 cv
112.608 814.573 113.823 814.195 114.714 813.385 cv
115.578 812.575 116.037 811.495 116.037 810.118 cv
116.037 808.768 115.578 807.688 114.714 806.878 cv
113.823 806.068 112.608 805.663 111.096 805.663 cv
110.394 805.663 109.665 805.744 108.963 805.906 cv
108.261 806.068 107.532 806.311 106.803 806.635 cv
106.803 796.753 li
f
161.505 788.92 mo
161.505 792.42 li
f
161.505 788.92 mo
161.505 792.42 li
@
156.267 814.195 mo
160.614 814.195 li
160.614 799.183 li
155.889 800.128 li
155.889 797.698 li
160.587 796.753 li
163.26 796.753 li
163.26 814.195 li
167.607 814.195 li
167.607 816.436 li
156.267 816.436 li
156.267 814.195 li
f
223.421 788.92 mo
223.421 792.42 li
f
223.421 788.92 mo
223.421 792.42 li
@
205.308 814.195 mo
209.655 814.195 li
209.655 799.183 li
204.93 800.128 li
204.93 797.698 li
209.628 796.753 li
212.301 796.753 li
212.301 814.195 li
216.648 814.195 li
216.648 816.436 li
205.308 816.436 li
205.308 814.195 li
f
222.021 813.088 mo
224.802 813.088 li
224.802 816.436 li
222.021 816.436 li
222.021 813.088 li
f
230.634 796.753 mo
241.083 796.753 li
241.083 798.994 li
233.064 798.994 li
233.064 803.827 li
233.442 803.692 233.847 803.584 234.225 803.53 cv
234.603 803.476 235.008 803.422 235.386 803.422 cv
237.573 803.422 239.301 804.043 240.597 805.231 cv
241.893 806.446 242.541 808.066 242.541 810.118 cv
242.541 812.251 241.866 813.898 240.543 815.059 cv
239.22 816.22 237.357 816.787 234.981 816.787 cv
234.144 816.787 233.307 816.706 232.443 816.598 cv
231.579 816.463 230.715 816.274 229.797 815.977 cv
229.797 813.304 li
230.58 813.736 231.39 814.06 232.254 814.276 cv
233.091 814.492 233.982 814.573 234.927 814.573 cv
236.439 814.573 237.654 814.195 238.545 813.385 cv
239.409 812.575 239.868 811.495 239.868 810.118 cv
239.868 808.768 239.409 807.688 238.545 806.878 cv
237.654 806.068 236.439 805.663 234.927 805.663 cv
234.225 805.663 233.496 805.744 232.794 805.906 cv
232.092 806.068 231.363 806.311 230.634 806.635 cv
230.634 796.753 li
f
285.336 788.92 mo
285.336 792.42 li
f
285.336 788.92 mo
285.336 792.42 li
@
287.712 805.825 mo
288.981 806.095 289.98 806.662 290.682 807.526 cv
291.384 808.39 291.762 809.47 291.762 810.712 cv
291.762 812.656 291.087 814.168 289.764 815.221 cv
288.414 816.274 286.524 816.787 284.067 816.787 cv
283.23 816.787 282.366 816.706 281.502 816.544 cv
280.638 816.409 279.72 816.166 278.802 815.842 cv
278.802 813.277 li
279.531 813.709 280.341 814.033 281.232 814.249 cv
282.096 814.465 283.014 814.573 283.986 814.573 cv
285.66 814.573 286.929 814.249 287.793 813.601 cv
288.657 812.953 289.116 811.981 289.116 810.712 cv
289.116 809.578 288.711 808.66 287.901 808.012 cv
287.091 807.364 285.957 807.013 284.499 807.013 cv
282.204 807.013 li
282.204 804.826 li
284.607 804.826 li
285.903 804.826 286.902 804.583 287.604 804.043 cv
288.306 803.53 288.657 802.774 288.657 801.775 cv
288.657 800.776 288.279 799.993 287.577 799.453 cv
286.848 798.913 285.822 798.643 284.499 798.643 cv
283.77 798.643 282.987 798.724 282.15 798.886 cv
281.313 799.048 280.395 799.291 279.396 799.615 cv
279.396 797.239 li
280.395 796.969 281.34 796.753 282.231 796.618 cv
283.095 796.483 283.932 796.402 284.742 796.402 cv
286.74 796.402 288.333 796.861 289.521 797.779 cv
290.709 798.697 291.303 799.939 291.303 801.505 cv
291.303 802.585 290.979 803.503 290.358 804.259 cv
289.737 805.015 288.846 805.555 287.712 805.825 cv
f
347.251 788.92 mo
347.251 792.42 li
f
347.251 788.92 mo
347.251 792.42 li
@
341.581 796.753 mo
352.03 796.753 li
352.03 798.994 li
344.011 798.994 li
344.011 803.827 li
344.389 803.692 344.794 803.584 345.172 803.53 cv
345.55 803.476 345.955 803.422 346.333 803.422 cv
348.52 803.422 350.248 804.043 351.544 805.231 cv
352.84 806.446 353.488 808.066 353.488 810.118 cv
353.488 812.251 352.813 813.898 351.49 815.059 cv
350.167 816.22 348.304 816.787 345.928 816.787 cv
345.091 816.787 344.254 816.706 343.39 816.598 cv
342.526 816.463 341.662 816.274 340.744 815.977 cv
340.744 813.304 li
341.527 813.736 342.337 814.06 343.201 814.276 cv
344.038 814.492 344.929 814.573 345.874 814.573 cv
347.386 814.573 348.601 814.195 349.492 813.385 cv
350.356 812.575 350.815 811.495 350.815 810.118 cv
350.815 808.768 350.356 807.688 349.492 806.878 cv
348.601 806.068 347.386 805.663 345.874 805.663 cv
345.172 805.663 344.443 805.744 343.741 805.906 cv
343.039 806.068 342.31 806.311 341.581 806.635 cv
341.581 796.753 li
f
409.166 788.92 mo
409.166 792.42 li
f
409.166 788.92 mo
409.166 792.42 li
@
395.342 814.195 mo
399.689 814.195 li
399.689 799.183 li
394.964 800.128 li
394.964 797.698 li
399.662 796.753 li
402.335 796.753 li
402.335 814.195 li
406.682 814.195 li
406.682 816.436 li
395.342 816.436 li
395.342 814.195 li
f
417.752 798.508 mo
416.375 798.508 415.349 799.183 414.647 800.533 cv
413.945 801.883 413.621 803.908 413.621 806.608 cv
413.621 809.308 413.945 811.333 414.647 812.683 cv
415.349 814.033 416.375 814.708 417.752 814.708 cv
419.129 814.708 420.155 814.033 420.857 812.683 cv
421.532 811.333 421.883 809.308 421.883 806.608 cv
421.883 803.908 421.532 801.883 420.857 800.533 cv
420.155 799.183 419.129 798.508 417.752 798.508 cv
417.752 796.402 mo
419.939 796.402 421.613 797.293 422.801 799.021 cv
423.962 800.776 424.556 803.314 424.556 806.608 cv
424.556 809.929 423.962 812.467 422.801 814.195 cv
421.613 815.923 419.939 816.787 417.752 816.787 cv
415.538 816.787 413.837 815.923 412.676 814.195 cv
411.515 812.467 410.948 809.929 410.948 806.608 cv
410.948 803.314 411.515 800.776 412.676 799.021 cv
413.837 797.293 415.538 796.402 417.752 796.402 cv
f
471.081 788.92 mo
471.081 792.42 li
f
471.081 788.92 mo
471.081 792.42 li
@
464.871 805.825 mo
466.14 806.095 467.139 806.662 467.841 807.526 cv
468.543 808.39 468.921 809.47 468.921 810.712 cv
468.921 812.656 468.246 814.168 466.923 815.221 cv
465.573 816.274 463.683 816.787 461.226 816.787 cv
460.389 816.787 459.525 816.706 458.661 816.544 cv
457.797 816.409 456.879 816.166 455.961 815.842 cv
455.961 813.277 li
456.69 813.709 457.5 814.033 458.391 814.249 cv
459.255 814.465 460.173 814.573 461.145 814.573 cv
462.819 814.573 464.088 814.249 464.952 813.601 cv
465.816 812.953 466.275 811.981 466.275 810.712 cv
466.275 809.578 465.87 808.66 465.06 808.012 cv
464.25 807.364 463.116 807.013 461.658 807.013 cv
459.363 807.013 li
459.363 804.826 li
461.766 804.826 li
463.062 804.826 464.061 804.583 464.763 804.043 cv
465.465 803.53 465.816 802.774 465.816 801.775 cv
465.816 800.776 465.438 799.993 464.736 799.453 cv
464.007 798.913 462.981 798.643 461.658 798.643 cv
460.929 798.643 460.146 798.724 459.309 798.886 cv
458.472 799.048 457.554 799.291 456.555 799.615 cv
456.555 797.239 li
457.554 796.969 458.499 796.753 459.39 796.618 cv
460.254 796.483 461.091 796.402 461.901 796.402 cv
463.899 796.402 465.492 796.861 466.68 797.779 cv
467.868 798.697 468.462 799.939 468.462 801.505 cv
468.462 802.585 468.138 803.503 467.517 804.259 cv
466.896 805.015 466.005 805.555 464.871 805.825 cv
f
479.667 798.508 mo
478.29 798.508 477.264 799.183 476.562 800.533 cv
475.86 801.883 475.536 803.908 475.536 806.608 cv
475.536 809.308 475.86 811.333 476.562 812.683 cv
477.264 814.033 478.29 814.708 479.667 814.708 cv
481.044 814.708 482.07 814.033 482.772 812.683 cv
483.447 811.333 483.798 809.308 483.798 806.608 cv
483.798 803.908 483.447 801.883 482.772 800.533 cv
482.07 799.183 481.044 798.508 479.667 798.508 cv
479.667 796.402 mo
481.854 796.402 483.528 797.293 484.716 799.021 cv
485.877 800.776 486.471 803.314 486.471 806.608 cv
486.471 809.929 485.877 812.467 484.716 814.195 cv
483.528 815.923 481.854 816.787 479.667 816.787 cv
477.453 816.787 475.752 815.923 474.591 814.195 cv
473.43 812.467 472.863 809.929 472.863 806.608 cv
472.863 803.314 473.43 800.776 474.591 799.021 cv
475.752 797.293 477.453 796.402 479.667 796.402 cv
f
532.996 788.92 mo
532.996 792.42 li
f
532.996 788.92 mo
532.996 792.42 li
@
510.586 814.195 mo
514.933 814.195 li
514.933 799.183 li
510.208 800.128 li
510.208 797.698 li
514.906 796.753 li
517.579 796.753 li
517.579 814.195 li
521.926 814.195 li
521.926 816.436 li
510.586 816.436 li
510.586 814.195 li
f
532.996 798.508 mo
531.619 798.508 530.593 799.183 529.891 800.533 cv
529.189 801.883 528.865 803.908 528.865 806.608 cv
528.865 809.308 529.189 811.333 529.891 812.683 cv
530.593 814.033 531.619 814.708 532.996 814.708 cv
534.373 814.708 535.399 814.033 536.101 812.683 cv
536.776 811.333 537.127 809.308 537.127 806.608 cv
537.127 803.908 536.776 801.883 536.101 800.533 cv
535.399 799.183 534.373 798.508 532.996 798.508 cv
532.996 796.402 mo
535.183 796.402 536.857 797.293 538.045 799.021 cv
539.206 800.776 539.8 803.314 539.8 806.608 cv
539.8 809.929 539.206 812.467 538.045 814.195 cv
536.857 815.923 535.183 816.787 532.996 816.787 cv
530.782 816.787 529.081 815.923 527.92 814.195 cv
526.759 812.467 526.192 809.929 526.192 806.608 cv
526.192 803.314 526.759 800.776 527.92 799.021 cv
529.081 797.293 530.782 796.402 532.996 796.402 cv
f
550.168 798.508 mo
548.791 798.508 547.765 799.183 547.063 800.533 cv
546.361 801.883 546.037 803.908 546.037 806.608 cv
546.037 809.308 546.361 811.333 547.063 812.683 cv
547.765 814.033 548.791 814.708 550.168 814.708 cv
551.545 814.708 552.571 814.033 553.273 812.683 cv
553.948 811.333 554.299 809.308 554.299 806.608 cv
554.299 803.908 553.948 801.883 553.273 800.533 cv
552.571 799.183 551.545 798.508 550.168 798.508 cv
550.168 796.402 mo
552.355 796.402 554.029 797.293 555.217 799.021 cv
556.378 800.776 556.972 803.314 556.972 806.608 cv
556.972 809.929 556.378 812.467 555.217 814.195 cv
554.029 815.923 552.355 816.787 550.168 816.787 cv
547.954 816.787 546.253 815.923 545.092 814.195 cv
543.931 812.467 543.364 809.929 543.364 806.608 cv
543.364 803.314 543.931 800.776 545.092 799.021 cv
546.253 797.293 547.954 796.402 550.168 796.402 cv
f
242.192 826.075 mo
240.96 828.203 240.064 830.275 239.476 832.319 cv
238.86 834.363 238.58 836.435 238.58 838.535 cv
238.58 840.663 238.86 842.735 239.476 844.779 cv
240.064 846.851 240.96 848.895 242.192 850.995 cv
240.008 850.995 li
238.636 848.839 237.6 846.767 236.928 844.695 cv
236.256 842.623 235.92 840.579 235.92 838.535 cv
235.92 836.519 236.256 834.475 236.928 832.403 cv
237.6 830.331 238.608 828.231 240.008 826.075 cv
242.192 826.075 li
f
258.096 832.599 mo
258.096 834.951 li
257.368 834.559 256.668 834.279 255.94 834.083 cv
255.212 833.887 254.512 833.775 253.784 833.775 cv
252.16 833.775 250.872 834.307 249.976 835.343 cv
249.08 836.379 248.632 837.835 248.632 839.683 cv
248.632 841.559 249.08 843.015 249.976 844.051 cv
250.872 845.087 252.16 845.591 253.784 845.591 cv
254.512 845.591 255.212 845.507 255.94 845.311 cv
256.668 845.115 257.368 844.807 258.096 844.415 cv
258.096 846.739 li
257.368 847.075 256.64 847.327 255.912 847.467 cv
255.156 847.607 254.344 847.691 253.504 847.691 cv
251.208 847.691 249.36 846.991 248.016 845.535 cv
246.644 844.107 245.972 842.147 245.972 839.683 cv
245.972 837.191 246.644 835.231 248.016 833.803 cv
249.388 832.375 251.264 831.647 253.672 831.647 cv
254.456 831.647 255.212 831.731 255.94 831.899 cv
256.668 832.067 257.396 832.291 258.096 832.599 cv
f
262.072 826.075 mo
264.256 826.075 li
265.6 828.231 266.636 830.331 267.308 832.403 cv
267.98 834.475 268.344 836.519 268.344 838.535 cv
268.344 840.579 267.98 842.623 267.308 844.695 cv
266.636 846.767 265.6 848.839 264.256 850.995 cv
262.072 850.995 li
263.276 848.895 264.172 846.851 264.788 844.779 cv
265.376 842.735 265.684 840.663 265.684 838.535 cv
265.684 836.435 265.376 834.363 264.788 832.319 cv
264.172 830.275 263.276 828.203 262.072 826.075 cv
f
280.328 829.631 mo
276.576 839.795 li
284.08 839.795 li
280.328 829.631 li
278.76 826.915 mo
281.896 826.915 li
289.68 847.327 li
286.796 847.327 li
284.948 842.091 li
275.736 842.091 li
273.888 847.327 li
270.976 847.327 li
278.76 826.915 li
f
303.568 832.599 mo
303.568 834.951 li
302.84 834.559 302.14 834.279 301.412 834.083 cv
300.684 833.887 299.984 833.775 299.256 833.775 cv
297.632 833.775 296.344 834.307 295.448 835.343 cv
294.552 836.379 294.104 837.835 294.104 839.683 cv
294.104 841.559 294.552 843.015 295.448 844.051 cv
296.344 845.087 297.632 845.591 299.256 845.591 cv
299.984 845.591 300.684 845.507 301.412 845.311 cv
302.14 845.115 302.84 844.807 303.568 844.415 cv
303.568 846.739 li
302.84 847.075 302.112 847.327 301.384 847.467 cv
300.628 847.607 299.816 847.691 298.976 847.691 cv
296.68 847.691 294.832 846.991 293.488 845.535 cv
292.116 844.107 291.444 842.147 291.444 839.683 cv
291.444 837.191 292.116 835.231 293.488 833.803 cv
294.86 832.375 296.736 831.647 299.144 831.647 cv
299.928 831.647 300.684 831.731 301.412 831.899 cv
302.14 832.067 302.868 832.291 303.568 832.599 cv
f
318.968 832.599 mo
318.968 834.951 li
318.24 834.559 317.54 834.279 316.812 834.083 cv
316.084 833.887 315.384 833.775 314.656 833.775 cv
313.032 833.775 311.744 834.307 310.848 835.343 cv
309.952 836.379 309.504 837.835 309.504 839.683 cv
309.504 841.559 309.952 843.015 310.848 844.051 cv
311.744 845.087 313.032 845.591 314.656 845.591 cv
315.384 845.591 316.084 845.507 316.812 845.311 cv
317.54 845.115 318.24 844.807 318.968 844.415 cv
318.968 846.739 li
318.24 847.075 317.512 847.327 316.784 847.467 cv
316.028 847.607 315.216 847.691 314.376 847.691 cv
312.08 847.691 310.232 846.991 308.888 845.535 cv
307.516 844.107 306.844 842.147 306.844 839.683 cv
306.844 837.191 307.516 835.231 308.888 833.803 cv
310.26 832.375 312.136 831.647 314.544 831.647 cv
315.328 831.647 316.084 831.731 316.812 831.899 cv
317.54 832.067 318.268 832.291 318.968 832.599 cv
f
323.084 841.279 mo
323.084 832.011 li
325.604 832.011 li
325.604 841.195 li
325.604 842.651 325.884 843.715 326.444 844.443 cv
327.004 845.171 327.844 845.535 328.992 845.535 cv
330.336 845.535 331.428 845.115 332.212 844.247 cv
332.996 843.379 333.388 842.203 333.388 840.691 cv
333.388 832.011 li
335.908 832.011 li
335.908 847.327 li
333.388 847.327 li
333.388 844.975 li
332.772 845.927 332.044 846.599 331.26 847.047 cv
330.448 847.467 329.524 847.691 328.46 847.691 cv
326.696 847.691 325.352 847.159 324.456 846.067 cv
323.532 845.003 323.084 843.407 323.084 841.279 cv
329.412 831.647 mo
329.412 831.647 li
f
349.964 834.363 mo
349.684 834.195 349.376 834.083 349.04 833.999 cv
348.704 833.943 348.34 833.887 347.948 833.887 cv
346.52 833.887 345.428 834.363 344.672 835.287 cv
343.888 836.211 343.524 837.527 343.524 839.263 cv
343.524 847.327 li
341.004 847.327 li
341.004 832.011 li
343.524 832.011 li
343.524 834.391 li
344.028 833.467 344.728 832.767 345.568 832.319 cv
346.408 831.871 347.444 831.647 348.676 831.647 cv
348.844 831.647 349.04 831.675 349.264 831.675 cv
349.46 831.703 349.684 831.731 349.964 831.787 cv
349.964 834.363 li
f
359.568 839.627 mo
357.524 839.627 356.124 839.879 355.34 840.327 cv
354.556 840.803 354.164 841.587 354.164 842.707 cv
354.164 843.603 354.444 844.331 355.032 844.835 cv
355.62 845.367 356.432 845.619 357.44 845.619 cv
358.84 845.619 359.96 845.143 360.8 844.135 cv
361.64 843.155 362.06 841.839 362.06 840.187 cv
362.06 839.627 li
359.568 839.627 li
364.58 838.591 mo
364.58 847.327 li
362.06 847.327 li
362.06 845.003 li
361.472 845.955 360.744 846.627 359.904 847.047 cv
359.064 847.467 358 847.691 356.768 847.691 cv
355.2 847.691 353.94 847.271 353.016 846.403 cv
352.092 845.535 351.644 844.359 351.644 842.875 cv
351.644 841.167 352.204 839.879 353.38 838.983 cv
354.528 838.115 356.236 837.667 358.532 837.667 cv
362.06 837.667 li
362.06 837.415 li
362.06 836.267 361.668 835.371 360.912 834.727 cv
360.156 834.111 359.092 833.775 357.72 833.775 cv
356.824 833.775 355.984 833.887 355.144 834.111 cv
354.304 834.335 353.52 834.643 352.764 835.035 cv
352.764 832.711 li
353.66 832.375 354.556 832.095 355.424 831.927 cv
356.292 831.759 357.132 831.647 357.972 831.647 cv
360.184 831.647 361.836 832.235 362.928 833.383 cv
364.02 834.531 364.58 836.267 364.58 838.591 cv
f
380.793 832.599 mo
380.793 834.951 li
380.065 834.559 379.365 834.279 378.637 834.083 cv
377.909 833.887 377.208 833.775 376.48 833.775 cv
374.857 833.775 373.569 834.307 372.673 835.343 cv
371.777 836.379 371.329 837.835 371.329 839.683 cv
371.329 841.559 371.777 843.015 372.673 844.051 cv
373.569 845.087 374.857 845.591 376.48 845.591 cv
377.208 845.591 377.909 845.507 378.637 845.311 cv
379.365 845.115 380.065 844.807 380.793 844.415 cv
380.793 846.739 li
380.065 847.075 379.337 847.327 378.609 847.467 cv
377.853 847.607 377.04 847.691 376.201 847.691 cv
373.905 847.691 372.057 846.991 370.713 845.535 cv
369.341 844.107 368.669 842.147 368.669 839.683 cv
368.669 837.191 369.341 835.231 370.713 833.803 cv
372.085 832.375 373.961 831.647 376.368 831.647 cv
377.152 831.647 377.909 831.731 378.637 831.899 cv
379.365 832.067 380.092 832.291 380.793 832.599 cv
f
391.545 848.727 mo
390.817 850.519 390.117 851.723 389.445 852.283 cv
388.773 852.843 387.877 853.123 386.757 853.123 cv
384.741 853.123 li
384.741 851.023 li
386.225 851.023 li
386.897 851.023 387.429 850.855 387.821 850.519 cv
388.213 850.183 388.633 849.427 389.109 848.195 cv
389.557 847.075 li
383.369 832.011 li
386.029 832.011 li
390.817 843.995 li
395.605 832.011 li
398.265 832.011 li
391.545 848.727 li
f
77.92 788.92 mo
74.42 788.92 li
f
77.92 788.92 mo
74.42 788.92 li
@
36.584 781.25 mo
35.207 781.25 34.181 781.925 33.479 783.275 cv
32.777 784.625 32.453 786.65 32.453 789.35 cv
32.453 792.05 32.777 794.075 33.479 795.425 cv
34.181 796.775 35.207 797.45 36.584 797.45 cv
37.961 797.45 38.987 796.775 39.689 795.425 cv
40.364 794.075 40.715 792.05 40.715 789.35 cv
40.715 786.65 40.364 784.625 39.689 783.275 cv
38.987 781.925 37.961 781.25 36.584 781.25 cv
36.584 779.144 mo
38.771 779.144 40.445 780.035 41.633 781.763 cv
42.794 783.518 43.388 786.056 43.388 789.35 cv
43.388 792.671 42.794 795.209 41.633 796.937 cv
40.445 798.665 38.771 799.529 36.584 799.529 cv
34.37 799.529 32.669 798.665 31.508 796.937 cv
30.347 795.209 29.78 792.671 29.78 789.35 cv
29.78 786.056 30.347 783.518 31.508 781.763 cv
32.669 780.035 34.37 779.144 36.584 779.144 cv
f
48.059 795.83 mo
50.84 795.83 li
50.84 799.178 li
48.059 799.178 li
48.059 795.83 li
f
62.6659 788.27 mo
61.4779 788.27 60.5329 788.702 59.8309 789.512 cv
59.1289 790.322 58.7779 791.456 58.7779 792.86 cv
58.7779 794.291 59.1289 795.425 59.8309 796.235 cv
60.5329 797.045 61.4779 797.45 62.6659 797.45 cv
63.8539 797.45 64.7989 797.045 65.5009 796.235 cv
66.2029 795.425 66.5539 794.291 66.5539 792.86 cv
66.5539 791.456 66.2029 790.322 65.5009 789.512 cv
64.7989 788.702 63.8539 788.27 62.6659 788.27 cv
67.9579 779.927 mo
67.9579 782.357 li
67.2829 782.033 66.6079 781.79 65.9329 781.628 cv
65.2309 781.466 64.5559 781.385 63.9079 781.385 cv
62.1259 781.385 60.7759 781.979 59.8579 783.167 cv
58.9399 784.355 58.3999 786.164 58.2919 788.54 cv
58.8049 787.784 59.4529 787.19 60.2359 786.785 cv
61.0189 786.38 61.8829 786.164 62.8279 786.164 cv
64.7989 786.164 66.3649 786.785 67.4989 787.973 cv
68.6329 789.161 69.2269 790.808 69.2269 792.86 cv
69.2269 794.885 68.6059 796.505 67.4179 797.72 cv
66.2299 798.935 64.6369 799.529 62.6659 799.529 cv
60.3979 799.529 58.6429 798.665 57.4549 796.937 cv
56.2399 795.209 55.6459 792.671 55.6459 789.35 cv
55.6459 786.245 56.3749 783.761 57.8599 781.925 cv
59.3179 780.089 61.3159 779.144 63.7999 779.144 cv
64.4479 779.144 65.1229 779.225 65.8249 779.333 cv
66.4999 779.468 67.2019 779.657 67.9579 779.927 cv
f
77.92 711.953 mo
74.42 711.953 li
f
77.92 711.953 mo
74.42 711.953 li
@
36.584 704.282 mo
35.207 704.282 34.181 704.957 33.479 706.307 cv
32.777 707.657 32.453 709.682 32.453 712.382 cv
32.453 715.082 32.777 717.107 33.479 718.457 cv
34.181 719.807 35.207 720.482 36.584 720.482 cv
37.961 720.482 38.987 719.807 39.689 718.457 cv
40.364 717.107 40.715 715.082 40.715 712.382 cv
40.715 709.682 40.364 707.657 39.689 706.307 cv
38.987 704.957 37.961 704.282 36.584 704.282 cv
36.584 702.176 mo
38.771 702.176 40.445 703.067 41.633 704.795 cv
42.794 706.55 43.388 709.088 43.388 712.382 cv
43.388 715.703 42.794 718.241 41.633 719.969 cv
40.445 721.697 38.771 722.561 36.584 722.561 cv
34.37 722.561 32.669 721.697 31.508 719.969 cv
30.347 718.241 29.78 715.703 29.78 712.382 cv
29.78 709.088 30.347 706.55 31.508 704.795 cv
32.669 703.067 34.37 702.176 36.584 702.176 cv
f
48.059 718.862 mo
50.84 718.862 li
50.84 722.21 li
48.059 722.21 li
48.059 718.862 li
f
55.9699 702.527 mo
68.6329 702.527 li
68.6329 703.661 li
61.4779 722.21 li
58.6969 722.21 li
65.4199 704.768 li
55.9699 704.768 li
55.9699 702.527 li
f
77.92 634.985 mo
74.42 634.985 li
f
77.92 634.985 mo
74.42 634.985 li
@
36.584 627.315 mo
35.207 627.315 34.181 627.99 33.479 629.34 cv
32.777 630.69 32.453 632.715 32.453 635.415 cv
32.453 638.115 32.777 640.14 33.479 641.49 cv
34.181 642.84 35.207 643.515 36.584 643.515 cv
37.961 643.515 38.987 642.84 39.689 641.49 cv
40.364 640.14 40.715 638.115 40.715 635.415 cv
40.715 632.715 40.364 630.69 39.689 629.34 cv
38.987 627.99 37.961 627.315 36.584 627.315 cv
36.584 625.209 mo
38.771 625.209 40.445 626.1 41.633 627.828 cv
42.794 629.583 43.388 632.121 43.388 635.415 cv
43.388 638.736 42.794 641.274 41.633 643.002 cv
40.445 644.73 38.771 645.594 36.584 645.594 cv
34.37 645.594 32.669 644.73 31.508 643.002 cv
30.347 641.274 29.78 638.736 29.78 635.415 cv
29.78 632.121 30.347 629.583 31.508 627.828 cv
32.669 626.1 34.37 625.209 36.584 625.209 cv
f
48.059 641.895 mo
50.84 641.895 li
50.84 645.243 li
48.059 645.243 li
48.059 641.895 li
f
62.3419 635.901 mo
61.0729 635.901 60.0739 636.252 59.3449 636.927 cv
58.6159 637.602 58.2649 638.52 58.2649 639.708 cv
58.2649 640.896 58.6159 641.841 59.3449 642.516 cv
60.0739 643.191 61.0729 643.515 62.3419 643.515 cv
63.5839 643.515 64.5829 643.191 65.3119 642.489 cv
66.0409 641.814 66.4189 640.896 66.4189 639.708 cv
66.4189 638.52 66.0409 637.602 65.3389 636.927 cv
64.6099 636.252 63.6109 635.901 62.3419 635.901 cv
59.6689 634.767 mo
58.5349 634.497 57.6439 633.957 56.9959 633.174 cv
56.3479 632.391 56.0509 631.446 56.0509 630.312 cv
56.0509 628.746 56.5909 627.504 57.7249 626.586 cv
58.8319 625.668 60.3709 625.209 62.3419 625.209 cv
64.2859 625.209 65.8249 625.668 66.9589 626.586 cv
68.0659 627.504 68.6329 628.746 68.6329 630.312 cv
68.6329 631.446 68.3089 632.391 67.6609 633.174 cv
67.0129 633.957 66.1489 634.497 65.0149 634.767 cv
66.2839 635.064 67.2829 635.658 68.0119 636.522 cv
68.7139 637.386 69.0919 638.466 69.0919 639.708 cv
69.0919 641.625 68.4979 643.083 67.3369 644.082 cv
66.1489 645.108 64.5019 645.594 62.3419 645.594 cv
60.1549 645.594 58.4809 645.108 57.3199 644.082 cv
56.1589 643.083 55.5919 641.625 55.5919 639.708 cv
55.5919 638.466 55.9429 637.386 56.6719 636.522 cv
57.3739 635.658 58.3729 635.064 59.6689 634.767 cv
58.6969 630.555 mo
58.6969 631.581 58.9939 632.391 59.6419 632.958 cv
60.2899 633.525 61.1809 633.795 62.3419 633.795 cv
63.4759 633.795 64.3669 633.525 65.0149 632.958 cv
65.6629 632.391 65.9869 631.581 65.9869 630.555 cv
65.9869 629.529 65.6629 628.746 65.0149 628.179 cv
64.3669 627.612 63.4759 627.315 62.3419 627.315 cv
61.1809 627.315 60.2899 627.612 59.6419 628.179 cv
58.9939 628.746 58.6969 629.529 58.6969 630.555 cv
f
77.92 558.017 mo
74.42 558.017 li
f
77.92 558.017 mo
74.42 558.017 li
@
36.584 550.347 mo
35.207 550.347 34.181 551.022 33.479 552.372 cv
32.777 553.722 32.453 555.747 32.453 558.447 cv
32.453 561.147 32.777 563.172 33.479 564.522 cv
34.181 565.872 35.207 566.547 36.584 566.547 cv
37.961 566.547 38.987 565.872 39.689 564.522 cv
40.364 563.172 40.715 561.147 40.715 558.447 cv
40.715 555.747 40.364 553.722 39.689 552.372 cv
38.987 551.022 37.961 550.347 36.584 550.347 cv
36.584 548.241 mo
38.771 548.241 40.445 549.132 41.633 550.86 cv
42.794 552.615 43.388 555.153 43.388 558.447 cv
43.388 561.768 42.794 564.306 41.633 566.034 cv
40.445 567.762 38.771 568.626 36.584 568.626 cv
34.37 568.626 32.669 567.762 31.508 566.034 cv
30.347 564.306 29.78 561.768 29.78 558.447 cv
29.78 555.153 30.347 552.615 31.508 550.86 cv
32.669 549.132 34.37 548.241 36.584 548.241 cv
f
48.059 564.927 mo
50.84 564.927 li
50.84 568.275 li
48.059 568.275 li
48.059 564.927 li
f
56.7259 567.87 mo
56.7259 565.44 li
57.3739 565.764 58.0489 566.007 58.7509 566.169 cv
59.4259 566.331 60.1009 566.412 60.7759 566.412 cv
62.5039 566.412 63.8539 565.845 64.7719 564.657 cv
65.6899 563.469 66.2299 561.687 66.3919 559.257 cv
65.8519 560.013 65.2039 560.607 64.4479 561.012 cv
63.6649 561.417 62.8009 561.606 61.8559 561.606 cv
59.8579 561.606 58.2919 561.012 57.1579 559.824 cv
56.0239 558.636 55.4569 557.016 55.4569 554.937 cv
55.4569 552.939 56.0509 551.319 57.2389 550.077 cv
58.4269 548.862 60.0199 548.241 62.0179 548.241 cv
64.2859 548.241 66.0409 549.132 67.2289 550.86 cv
68.4169 552.615 69.0379 555.153 69.0379 558.447 cv
69.0379 561.579 68.2819 564.036 66.8239 565.872 cv
65.3389 567.708 63.3679 568.626 60.8839 568.626 cv
60.2089 568.626 59.5339 568.545 58.8589 568.437 cv
58.1569 568.329 57.4549 568.14 56.7259 567.87 cv
62.0179 559.527 mo
63.2059 559.527 64.1509 559.122 64.8529 558.312 cv
65.5549 557.502 65.9059 556.368 65.9059 554.937 cv
65.9059 553.533 65.5549 552.399 64.8529 551.589 cv
64.1509 550.779 63.2059 550.347 62.0179 550.347 cv
60.8299 550.347 59.8849 550.779 59.1829 551.589 cv
58.4809 552.399 58.1299 553.533 58.1299 554.937 cv
58.1299 556.368 58.4809 557.502 59.1829 558.312 cv
59.8849 559.122 60.8299 559.527 62.0179 559.527 cv
f
77.92 481.05 mo
74.42 481.05 li
f
77.92 481.05 mo
74.42 481.05 li
@
31.346 489.067 mo
35.693 489.067 li
35.693 474.055 li
30.968 475 li
30.968 472.57 li
35.666 471.625 li
38.339 471.625 li
38.339 489.067 li
42.686 489.067 li
42.686 491.308 li
31.346 491.308 li
31.346 489.067 li
f
48.059 487.96 mo
50.84 487.96 li
50.84 491.308 li
48.059 491.308 li
48.059 487.96 li
f
62.3419 473.38 mo
60.9649 473.38 59.9389 474.055 59.2369 475.405 cv
58.5349 476.755 58.2109 478.78 58.2109 481.48 cv
58.2109 484.18 58.5349 486.205 59.2369 487.555 cv
59.9389 488.905 60.9649 489.58 62.3419 489.58 cv
63.7189 489.58 64.7449 488.905 65.4469 487.555 cv
66.1219 486.205 66.4729 484.18 66.4729 481.48 cv
66.4729 478.78 66.1219 476.755 65.4469 475.405 cv
64.7449 474.055 63.7189 473.38 62.3419 473.38 cv
62.3419 471.274 mo
64.5289 471.274 66.2029 472.165 67.3909 473.893 cv
68.5519 475.648 69.1459 478.186 69.1459 481.48 cv
69.1459 484.801 68.5519 487.339 67.3909 489.067 cv
66.2029 490.795 64.5289 491.659 62.3419 491.659 cv
60.1279 491.659 58.4269 490.795 57.2659 489.067 cv
56.1049 487.339 55.5379 484.801 55.5379 481.48 cv
55.5379 478.186 56.1049 475.648 57.2659 473.893 cv
58.4269 472.165 60.1279 471.274 62.3419 471.274 cv
f
2.5 lw
2 lc
99.5903 769.909 mo
161.505 490.837 li
223.42 497.523 li
285.335 484.977 li
347.25 488.786 li
409.166 484.933 li
471.081 487.985 li
532.996 487.561 li
@
gsave
77.9201 788.92 mo
554.666 788.92 li
554.666 481.05 li
77.9201 481.05 li
77.9201 788.92 li
clp
0 lc
[9.25 4 ] 0 dsh
99.5903 728.194 mo
161.505 484.419 li
223.42 486.348 li
285.335 485.462 li
347.25 484.362 li
409.166 484.894 li
471.081 482.386 li
532.996 481.976 li
@
grestore
.8 lw
0 lj
77.92 788.92 mo
77.92 481.05 li
@
554.666 788.92 mo
554.666 481.05 li
@
77.92 788.92 mo
554.666 788.92 li
@
77.92 481.05 mo
554.666 481.05 li
@
657.115 788.92 mo
1133.86 788.92 li
1133.86 481.05 li
657.115 481.05 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
678.785 788.92 mo
678.785 792.42 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
678.785 788.92 mo
678.785 792.42 li
@
665.91 798.508 mo
664.533 798.508 663.507 799.183 662.805 800.533 cv
662.103 801.883 661.779 803.908 661.779 806.608 cv
661.779 809.308 662.103 811.333 662.805 812.683 cv
663.507 814.033 664.533 814.708 665.91 814.708 cv
667.287 814.708 668.313 814.033 669.015 812.683 cv
669.69 811.333 670.041 809.308 670.041 806.608 cv
670.041 803.908 669.69 801.883 669.015 800.533 cv
668.313 799.183 667.287 798.508 665.91 798.508 cv
665.91 796.402 mo
668.097 796.402 669.771 797.293 670.959 799.021 cv
672.12 800.776 672.714 803.314 672.714 806.608 cv
672.714 809.929 672.12 812.467 670.959 814.195 cv
669.771 815.923 668.097 816.787 665.91 816.787 cv
663.696 816.787 661.995 815.923 660.834 814.195 cv
659.673 812.467 659.106 809.929 659.106 806.608 cv
659.106 803.314 659.673 800.776 660.834 799.021 cv
661.995 797.293 663.696 796.402 665.91 796.402 cv
f
677.385 813.088 mo
680.166 813.088 li
680.166 816.436 li
677.385 816.436 li
677.385 813.088 li
f
685.998 796.753 mo
696.447 796.753 li
696.447 798.994 li
688.428 798.994 li
688.428 803.827 li
688.806 803.692 689.211 803.584 689.589 803.53 cv
689.967 803.476 690.372 803.422 690.75 803.422 cv
692.937 803.422 694.665 804.043 695.961 805.231 cv
697.257 806.446 697.905 808.066 697.905 810.118 cv
697.905 812.251 697.23 813.898 695.907 815.059 cv
694.584 816.22 692.721 816.787 690.345 816.787 cv
689.508 816.787 688.671 816.706 687.807 816.598 cv
686.943 816.463 686.079 816.274 685.161 815.977 cv
685.161 813.304 li
685.944 813.736 686.754 814.06 687.618 814.276 cv
688.455 814.492 689.346 814.573 690.291 814.573 cv
691.803 814.573 693.018 814.195 693.909 813.385 cv
694.773 812.575 695.232 811.495 695.232 810.118 cv
695.232 808.768 694.773 807.688 693.909 806.878 cv
693.018 806.068 691.803 805.663 690.291 805.663 cv
689.589 805.663 688.86 805.744 688.158 805.906 cv
687.456 806.068 686.727 806.311 685.998 806.635 cv
685.998 796.753 li
f
740.7 788.92 mo
740.7 792.42 li
f
740.7 788.92 mo
740.7 792.42 li
@
735.462 814.195 mo
739.809 814.195 li
739.809 799.183 li
735.084 800.128 li
735.084 797.698 li
739.782 796.753 li
742.455 796.753 li
742.455 814.195 li
746.802 814.195 li
746.802 816.436 li
735.462 816.436 li
735.462 814.195 li
f
802.615 788.92 mo
802.615 792.42 li
f
802.615 788.92 mo
802.615 792.42 li
@
784.503 814.195 mo
788.85 814.195 li
788.85 799.183 li
784.125 800.128 li
784.125 797.698 li
788.823 796.753 li
791.496 796.753 li
791.496 814.195 li
795.843 814.195 li
795.843 816.436 li
784.503 816.436 li
784.503 814.195 li
f
801.216 813.088 mo
803.997 813.088 li
803.997 816.436 li
801.216 816.436 li
801.216 813.088 li
f
809.829 796.753 mo
820.278 796.753 li
820.278 798.994 li
812.259 798.994 li
812.259 803.827 li
812.637 803.692 813.042 803.584 813.42 803.53 cv
813.798 803.476 814.203 803.422 814.581 803.422 cv
816.768 803.422 818.496 804.043 819.792 805.231 cv
821.088 806.446 821.736 808.066 821.736 810.118 cv
821.736 812.251 821.061 813.898 819.738 815.059 cv
818.415 816.22 816.552 816.787 814.176 816.787 cv
813.339 816.787 812.502 816.706 811.638 816.598 cv
810.774 816.463 809.91 816.274 808.992 815.977 cv
808.992 813.304 li
809.775 813.736 810.585 814.06 811.449 814.276 cv
812.286 814.492 813.177 814.573 814.122 814.573 cv
815.634 814.573 816.849 814.195 817.74 813.385 cv
818.604 812.575 819.063 811.495 819.063 810.118 cv
819.063 808.768 818.604 807.688 817.74 806.878 cv
816.849 806.068 815.634 805.663 814.122 805.663 cv
813.42 805.663 812.691 805.744 811.989 805.906 cv
811.287 806.068 810.558 806.311 809.829 806.635 cv
809.829 796.753 li
f
864.531 788.92 mo
864.531 792.42 li
f
864.531 788.92 mo
864.531 792.42 li
@
866.907 805.825 mo
868.176 806.095 869.175 806.662 869.877 807.526 cv
870.579 808.39 870.957 809.47 870.957 810.712 cv
870.957 812.656 870.282 814.168 868.959 815.221 cv
867.609 816.274 865.719 816.787 863.262 816.787 cv
862.425 816.787 861.561 816.706 860.697 816.544 cv
859.833 816.409 858.915 816.166 857.997 815.842 cv
857.997 813.277 li
858.726 813.709 859.536 814.033 860.427 814.249 cv
861.291 814.465 862.209 814.573 863.181 814.573 cv
864.855 814.573 866.124 814.249 866.988 813.601 cv
867.852 812.953 868.311 811.981 868.311 810.712 cv
868.311 809.578 867.906 808.66 867.096 808.012 cv
866.286 807.364 865.152 807.013 863.694 807.013 cv
861.399 807.013 li
861.399 804.826 li
863.802 804.826 li
865.098 804.826 866.097 804.583 866.799 804.043 cv
867.501 803.53 867.852 802.774 867.852 801.775 cv
867.852 800.776 867.474 799.993 866.772 799.453 cv
866.043 798.913 865.017 798.643 863.694 798.643 cv
862.965 798.643 862.182 798.724 861.345 798.886 cv
860.508 799.048 859.59 799.291 858.591 799.615 cv
858.591 797.239 li
859.59 796.969 860.535 796.753 861.426 796.618 cv
862.29 796.483 863.127 796.402 863.937 796.402 cv
865.935 796.402 867.528 796.861 868.716 797.779 cv
869.904 798.697 870.498 799.939 870.498 801.505 cv
870.498 802.585 870.174 803.503 869.553 804.259 cv
868.932 805.015 868.041 805.555 866.907 805.825 cv
f
926.446 788.92 mo
926.446 792.42 li
f
926.446 788.92 mo
926.446 792.42 li
@
920.776 796.753 mo
931.225 796.753 li
931.225 798.994 li
923.206 798.994 li
923.206 803.827 li
923.584 803.692 923.989 803.584 924.367 803.53 cv
924.745 803.476 925.15 803.422 925.528 803.422 cv
927.715 803.422 929.443 804.043 930.739 805.231 cv
932.035 806.446 932.683 808.066 932.683 810.118 cv
932.683 812.251 932.008 813.898 930.685 815.059 cv
929.362 816.22 927.499 816.787 925.123 816.787 cv
924.286 816.787 923.449 816.706 922.585 816.598 cv
921.721 816.463 920.857 816.274 919.939 815.977 cv
919.939 813.304 li
920.722 813.736 921.532 814.06 922.396 814.276 cv
923.233 814.492 924.124 814.573 925.069 814.573 cv
926.581 814.573 927.796 814.195 928.687 813.385 cv
929.551 812.575 930.01 811.495 930.01 810.118 cv
930.01 808.768 929.551 807.688 928.687 806.878 cv
927.796 806.068 926.581 805.663 925.069 805.663 cv
924.367 805.663 923.638 805.744 922.936 805.906 cv
922.234 806.068 921.505 806.311 920.776 806.635 cv
920.776 796.753 li
f
988.361 788.92 mo
988.361 792.42 li
f
988.361 788.92 mo
988.361 792.42 li
@
974.537 814.195 mo
978.884 814.195 li
978.884 799.183 li
974.159 800.128 li
974.159 797.698 li
978.857 796.753 li
981.53 796.753 li
981.53 814.195 li
985.877 814.195 li
985.877 816.436 li
974.537 816.436 li
974.537 814.195 li
f
996.947 798.508 mo
995.57 798.508 994.544 799.183 993.842 800.533 cv
993.14 801.883 992.816 803.908 992.816 806.608 cv
992.816 809.308 993.14 811.333 993.842 812.683 cv
994.544 814.033 995.57 814.708 996.947 814.708 cv
998.324 814.708 999.35 814.033 1000.05 812.683 cv
1000.73 811.333 1001.08 809.308 1001.08 806.608 cv
1001.08 803.908 1000.73 801.883 1000.05 800.533 cv
999.35 799.183 998.324 798.508 996.947 798.508 cv
996.947 796.402 mo
999.134 796.402 1000.81 797.293 1002 799.021 cv
1003.16 800.776 1003.75 803.314 1003.75 806.608 cv
1003.75 809.929 1003.16 812.467 1002 814.195 cv
1000.81 815.923 999.134 816.787 996.947 816.787 cv
994.733 816.787 993.032 815.923 991.871 814.195 cv
990.71 812.467 990.143 809.929 990.143 806.608 cv
990.143 803.314 990.71 800.776 991.871 799.021 cv
993.032 797.293 994.733 796.402 996.947 796.402 cv
f
1050.28 788.92 mo
1050.28 792.42 li
f
1050.28 788.92 mo
1050.28 792.42 li
@
1044.07 805.825 mo
1045.33 806.095 1046.33 806.662 1047.04 807.526 cv
1047.74 808.39 1048.12 809.47 1048.12 810.712 cv
1048.12 812.656 1047.44 814.168 1046.12 815.221 cv
1044.77 816.274 1042.88 816.787 1040.42 816.787 cv
1039.58 816.787 1038.72 816.706 1037.86 816.544 cv
1036.99 816.409 1036.07 816.166 1035.16 815.842 cv
1035.16 813.277 li
1035.89 813.709 1036.69 814.033 1037.59 814.249 cv
1038.45 814.465 1039.37 814.573 1040.34 814.573 cv
1042.01 814.573 1043.28 814.249 1044.15 813.601 cv
1045.01 812.953 1045.47 811.981 1045.47 810.712 cv
1045.47 809.578 1045.07 808.66 1044.26 808.012 cv
1043.44 807.364 1042.31 807.013 1040.85 807.013 cv
1038.56 807.013 li
1038.56 804.826 li
1040.96 804.826 li
1042.26 804.826 1043.26 804.583 1043.96 804.043 cv
1044.66 803.53 1045.01 802.774 1045.01 801.775 cv
1045.01 800.776 1044.63 799.993 1043.93 799.453 cv
1043.2 798.913 1042.18 798.643 1040.85 798.643 cv
1040.12 798.643 1039.34 798.724 1038.5 798.886 cv
1037.67 799.048 1036.75 799.291 1035.75 799.615 cv
1035.75 797.239 li
1036.75 796.969 1037.69 796.753 1038.58 796.618 cv
1039.45 796.483 1040.29 796.402 1041.1 796.402 cv
1043.09 796.402 1044.69 796.861 1045.88 797.779 cv
1047.06 798.697 1047.66 799.939 1047.66 801.505 cv
1047.66 802.585 1047.33 803.503 1046.71 804.259 cv
1046.09 805.015 1045.2 805.555 1044.07 805.825 cv
f
1058.86 798.508 mo
1057.48 798.508 1056.46 799.183 1055.76 800.533 cv
1055.06 801.883 1054.73 803.908 1054.73 806.608 cv
1054.73 809.308 1055.06 811.333 1055.76 812.683 cv
1056.46 814.033 1057.48 814.708 1058.86 814.708 cv
1060.24 814.708 1061.27 814.033 1061.97 812.683 cv
1062.64 811.333 1062.99 809.308 1062.99 806.608 cv
1062.99 803.908 1062.64 801.883 1061.97 800.533 cv
1061.27 799.183 1060.24 798.508 1058.86 798.508 cv
1058.86 796.402 mo
1061.05 796.402 1062.72 797.293 1063.91 799.021 cv
1065.07 800.776 1065.67 803.314 1065.67 806.608 cv
1065.67 809.929 1065.07 812.467 1063.91 814.195 cv
1062.72 815.923 1061.05 816.787 1058.86 816.787 cv
1056.65 816.787 1054.95 815.923 1053.79 814.195 cv
1052.63 812.467 1052.06 809.929 1052.06 806.608 cv
1052.06 803.314 1052.63 800.776 1053.79 799.021 cv
1054.95 797.293 1056.65 796.402 1058.86 796.402 cv
f
1112.19 788.92 mo
1112.19 792.42 li
f
1112.19 788.92 mo
1112.19 792.42 li
@
1089.78 814.195 mo
1094.13 814.195 li
1094.13 799.183 li
1089.4 800.128 li
1089.4 797.698 li
1094.1 796.753 li
1096.77 796.753 li
1096.77 814.195 li
1101.12 814.195 li
1101.12 816.436 li
1089.78 816.436 li
1089.78 814.195 li
f
1112.19 798.508 mo
1110.81 798.508 1109.79 799.183 1109.09 800.533 cv
1108.38 801.883 1108.06 803.908 1108.06 806.608 cv
1108.06 809.308 1108.38 811.333 1109.09 812.683 cv
1109.79 814.033 1110.81 814.708 1112.19 814.708 cv
1113.57 814.708 1114.59 814.033 1115.3 812.683 cv
1115.97 811.333 1116.32 809.308 1116.32 806.608 cv
1116.32 803.908 1115.97 801.883 1115.3 800.533 cv
1114.59 799.183 1113.57 798.508 1112.19 798.508 cv
1112.19 796.402 mo
1114.38 796.402 1116.05 797.293 1117.24 799.021 cv
1118.4 800.776 1118.99 803.314 1118.99 806.608 cv
1118.99 809.929 1118.4 812.467 1117.24 814.195 cv
1116.05 815.923 1114.38 816.787 1112.19 816.787 cv
1109.98 816.787 1108.28 815.923 1107.11 814.195 cv
1105.95 812.467 1105.39 809.929 1105.39 806.608 cv
1105.39 803.314 1105.95 800.776 1107.11 799.021 cv
1108.28 797.293 1109.98 796.402 1112.19 796.402 cv
f
1129.36 798.508 mo
1127.99 798.508 1126.96 799.183 1126.26 800.533 cv
1125.56 801.883 1125.23 803.908 1125.23 806.608 cv
1125.23 809.308 1125.56 811.333 1126.26 812.683 cv
1126.96 814.033 1127.99 814.708 1129.36 814.708 cv
1130.74 814.708 1131.77 814.033 1132.47 812.683 cv
1133.14 811.333 1133.49 809.308 1133.49 806.608 cv
1133.49 803.908 1133.14 801.883 1132.47 800.533 cv
1131.77 799.183 1130.74 798.508 1129.36 798.508 cv
1129.36 796.402 mo
1131.55 796.402 1133.22 797.293 1134.41 799.021 cv
1135.57 800.776 1136.17 803.314 1136.17 806.608 cv
1136.17 809.929 1135.57 812.467 1134.41 814.195 cv
1133.22 815.923 1131.55 816.787 1129.36 816.787 cv
1127.15 816.787 1125.45 815.923 1124.29 814.195 cv
1123.13 812.467 1122.56 809.929 1122.56 806.608 cv
1122.56 803.314 1123.13 800.776 1124.29 799.021 cv
1125.45 797.293 1127.15 796.402 1129.36 796.402 cv
f
823.738 826.075 mo
822.506 828.203 821.61 830.275 821.022 832.319 cv
820.406 834.363 820.126 836.435 820.126 838.535 cv
820.126 840.663 820.406 842.735 821.022 844.779 cv
821.61 846.851 822.506 848.895 823.738 850.995 cv
821.554 850.995 li
820.182 848.839 819.146 846.767 818.474 844.695 cv
817.802 842.623 817.466 840.579 817.466 838.535 cv
817.466 836.519 817.802 834.475 818.474 832.403 cv
819.146 830.331 820.154 828.231 821.554 826.075 cv
823.738 826.075 li
f
838.69 834.335 mo
838.69 826.047 li
841.21 826.047 li
841.21 847.327 li
838.69 847.327 li
838.69 845.031 li
838.158 845.955 837.486 846.627 836.674 847.047 cv
835.862 847.467 834.91 847.691 833.79 847.691 cv
831.942 847.691 830.43 846.963 829.254 845.507 cv
828.078 844.051 827.518 842.091 827.518 839.683 cv
827.518 837.275 828.078 835.343 829.254 833.859 cv
830.43 832.403 831.942 831.647 833.79 831.647 cv
834.91 831.647 835.862 831.871 836.674 832.319 cv
837.486 832.767 838.158 833.439 838.69 834.335 cv
830.122 839.683 mo
830.122 841.531 830.486 842.987 831.242 844.051 cv
831.998 845.115 833.062 845.619 834.406 845.619 cv
835.722 845.619 836.758 845.115 837.542 844.051 cv
838.298 842.987 838.69 841.531 838.69 839.683 cv
838.69 837.835 838.298 836.407 837.542 835.343 cv
836.758 834.279 835.722 833.747 834.406 833.747 cv
833.062 833.747 831.998 834.279 831.242 835.343 cv
830.486 836.407 830.122 837.835 830.122 839.683 cv
f
845.998 826.075 mo
848.182 826.075 li
849.526 828.231 850.562 830.331 851.234 832.403 cv
851.906 834.475 852.27 836.519 852.27 838.535 cv
852.27 840.579 851.906 842.623 851.234 844.695 cv
850.562 846.767 849.526 848.839 848.182 850.995 cv
845.998 850.995 li
847.202 848.895 848.098 846.851 848.714 844.779 cv
849.302 842.735 849.61 840.663 849.61 838.535 cv
849.61 836.435 849.302 834.363 848.714 832.319 cv
848.098 830.275 847.202 828.203 845.998 826.075 cv
f
857.422 826.915 mo
860.194 826.915 li
860.194 835.287 li
870.218 835.287 li
870.218 826.915 li
872.99 826.915 li
872.99 847.327 li
870.218 847.327 li
870.218 837.611 li
860.194 837.611 li
860.194 847.327 li
857.422 847.327 li
857.422 826.915 li
f
878.366 832.011 mo
880.886 832.011 li
880.886 847.327 li
878.366 847.327 li
878.366 832.011 li
878.366 826.047 mo
880.886 826.047 li
880.886 829.239 li
878.366 829.239 li
878.366 826.047 li
f
888.642 827.671 mo
888.642 832.011 li
893.822 832.011 li
893.822 833.971 li
888.642 833.971 li
888.642 842.287 li
888.642 843.547 888.81 844.359 889.146 844.695 cv
889.482 845.059 890.182 845.227 891.246 845.227 cv
893.822 845.227 li
893.822 847.327 li
891.246 847.327 li
889.286 847.327 887.942 846.963 887.214 846.235 cv
886.486 845.507 886.122 844.191 886.122 842.287 cv
886.122 833.971 li
884.274 833.971 li
884.274 832.011 li
886.122 832.011 li
886.122 827.671 li
888.642 827.671 li
f
915.83 837.751 mo
916.418 837.975 917.005 838.395 917.566 839.039 cv
918.126 839.711 918.686 840.607 919.246 841.755 cv
922.046 847.327 li
919.078 847.327 li
916.474 842.091 li
915.802 840.747 915.13 839.823 914.514 839.375 cv
913.87 838.927 913.002 838.703 911.91 838.703 cv
908.914 838.703 li
908.914 847.327 li
906.142 847.327 li
906.142 826.915 li
912.385 826.915 li
914.71 826.915 916.445 827.419 917.594 828.371 cv
918.742 829.351 919.33 830.835 919.33 832.795 cv
919.33 834.083 919.022 835.175 918.434 836.015 cv
917.818 836.855 916.95 837.443 915.83 837.751 cv
908.914 829.183 mo
908.914 836.435 li
912.385 836.435 li
913.702 836.435 914.71 836.127 915.382 835.511 cv
916.054 834.895 916.418 833.999 916.418 832.795 cv
916.418 831.619 916.054 830.723 915.382 830.107 cv
914.71 829.491 913.702 829.183 912.385 829.183 cv
908.914 829.183 li
f
932.462 839.627 mo
930.418 839.627 929.018 839.879 928.234 840.327 cv
927.45 840.803 927.058 841.587 927.058 842.707 cv
927.058 843.603 927.338 844.331 927.926 844.835 cv
928.514 845.367 929.326 845.619 930.334 845.619 cv
931.734 845.619 932.854 845.143 933.694 844.135 cv
934.534 843.155 934.954 841.839 934.954 840.187 cv
934.954 839.627 li
932.462 839.627 li
937.474 838.591 mo
937.474 847.327 li
934.954 847.327 li
934.954 845.003 li
934.366 845.955 933.638 846.627 932.798 847.047 cv
931.958 847.467 930.894 847.691 929.662 847.691 cv
928.094 847.691 926.834 847.271 925.91 846.403 cv
924.986 845.535 924.538 844.359 924.538 842.875 cv
924.538 841.167 925.098 839.879 926.274 838.983 cv
927.422 838.115 929.13 837.667 931.426 837.667 cv
934.954 837.667 li
934.954 837.415 li
934.954 836.267 934.562 835.371 933.806 834.727 cv
933.05 834.111 931.986 833.775 930.614 833.775 cv
929.718 833.775 928.878 833.887 928.038 834.111 cv
927.198 834.335 926.414 834.643 925.658 835.035 cv
925.658 832.711 li
926.554 832.375 927.45 832.095 928.318 831.927 cv
929.186 831.759 930.026 831.647 930.866 831.647 cv
933.078 831.647 934.73 832.235 935.822 833.383 cv
936.914 834.531 937.474 836.267 937.474 838.591 cv
f
945.146 827.671 mo
945.146 832.011 li
950.326 832.011 li
950.326 833.971 li
945.146 833.971 li
945.146 842.287 li
945.146 843.547 945.314 844.359 945.65 844.695 cv
945.986 845.059 946.686 845.227 947.75 845.227 cv
950.326 845.227 li
950.326 847.327 li
947.75 847.327 li
945.79 847.327 944.446 846.963 943.718 846.235 cv
942.99 845.507 942.626 844.191 942.626 842.287 cv
942.626 833.971 li
940.778 833.971 li
940.778 832.011 li
942.626 832.011 li
942.626 827.671 li
945.146 827.671 li
f
953.63 832.011 mo
956.15 832.011 li
956.15 847.327 li
953.63 847.327 li
953.63 832.011 li
953.63 826.047 mo
956.15 826.047 li
956.15 829.239 li
953.63 829.239 li
953.63 826.047 li
f
967.35 833.775 mo
966.006 833.775 964.942 834.307 964.158 835.371 cv
963.374 836.435 962.982 837.863 962.982 839.683 cv
962.982 841.531 963.346 842.959 964.13 844.023 cv
964.914 845.087 965.978 845.591 967.35 845.591 cv
968.694 845.591 969.758 845.087 970.542 844.023 cv
971.326 842.959 971.718 841.531 971.718 839.683 cv
971.718 837.891 971.326 836.435 970.542 835.371 cv
969.758 834.307 968.694 833.775 967.35 833.775 cv
967.35 831.647 mo
969.534 831.647 971.242 832.375 972.502 833.775 cv
973.734 835.203 974.378 837.163 974.378 839.683 cv
974.378 842.203 973.734 844.163 972.502 845.563 cv
971.242 846.991 969.534 847.691 967.35 847.691 cv
965.138 847.691 963.402 846.991 962.17 845.563 cv
960.938 844.163 960.322 842.203 960.322 839.683 cv
960.322 837.163 960.938 835.203 962.17 833.775 cv
963.402 832.375 965.138 831.647 967.35 831.647 cv
f
657.115 788.92 mo
653.615 788.92 li
f
657.115 788.92 mo
653.615 788.92 li
@
581.435 781.25 mo
580.058 781.25 579.032 781.925 578.33 783.275 cv
577.628 784.625 577.304 786.65 577.304 789.35 cv
577.304 792.05 577.628 794.075 578.33 795.425 cv
579.032 796.775 580.058 797.45 581.435 797.45 cv
582.812 797.45 583.838 796.775 584.54 795.425 cv
585.215 794.075 585.566 792.05 585.566 789.35 cv
585.566 786.65 585.215 784.625 584.54 783.275 cv
583.838 781.925 582.812 781.25 581.435 781.25 cv
581.435 779.144 mo
583.622 779.144 585.296 780.035 586.484 781.763 cv
587.645 783.518 588.239 786.056 588.239 789.35 cv
588.239 792.671 587.645 795.209 586.484 796.937 cv
585.296 798.665 583.622 799.529 581.435 799.529 cv
579.221 799.529 577.52 798.665 576.359 796.937 cv
575.198 795.209 574.631 792.671 574.631 789.35 cv
574.631 786.056 575.198 783.518 576.359 781.763 cv
577.52 780.035 579.221 779.144 581.435 779.144 cv
f
592.91 795.83 mo
595.691 795.83 li
595.691 799.178 li
592.91 799.178 li
592.91 795.83 li
f
601.577 798.773 mo
601.577 796.343 li
602.225 796.667 602.9 796.91 603.602 797.072 cv
604.277 797.234 604.952 797.315 605.627 797.315 cv
607.355 797.315 608.705 796.748 609.623 795.56 cv
610.541 794.372 611.081 792.59 611.243 790.16 cv
610.703 790.916 610.055 791.51 609.299 791.915 cv
608.516 792.32 607.652 792.509 606.707 792.509 cv
604.709 792.509 603.143 791.915 602.009 790.727 cv
600.875 789.539 600.308 787.919 600.308 785.84 cv
600.308 783.842 600.902 782.222 602.09 780.98 cv
603.278 779.765 604.871 779.144 606.869 779.144 cv
609.137 779.144 610.892 780.035 612.08 781.763 cv
613.268 783.518 613.889 786.056 613.889 789.35 cv
613.889 792.482 613.133 794.939 611.675 796.775 cv
610.19 798.611 608.219 799.529 605.735 799.529 cv
605.06 799.529 604.385 799.448 603.71 799.34 cv
603.008 799.232 602.306 799.043 601.577 798.773 cv
606.869 790.43 mo
608.057 790.43 609.002 790.025 609.704 789.215 cv
610.406 788.405 610.757 787.271 610.757 785.84 cv
610.757 784.436 610.406 783.302 609.704 782.492 cv
609.002 781.682 608.057 781.25 606.869 781.25 cv
605.681 781.25 604.736 781.682 604.034 782.492 cv
603.332 783.302 602.981 784.436 602.981 785.84 cv
602.981 787.271 603.332 788.405 604.034 789.215 cv
604.736 790.025 605.681 790.43 606.869 790.43 cv
f
624.365 789.836 mo
623.096 789.836 622.097 790.187 621.368 790.862 cv
620.639 791.537 620.288 792.455 620.288 793.643 cv
620.288 794.831 620.639 795.776 621.368 796.451 cv
622.097 797.126 623.096 797.45 624.365 797.45 cv
625.607 797.45 626.606 797.126 627.335 796.424 cv
628.064 795.749 628.442 794.831 628.442 793.643 cv
628.442 792.455 628.064 791.537 627.362 790.862 cv
626.633 790.187 625.634 789.836 624.365 789.836 cv
621.692 788.702 mo
620.558 788.432 619.667 787.892 619.019 787.109 cv
618.371 786.326 618.074 785.381 618.074 784.247 cv
618.074 782.681 618.614 781.439 619.748 780.521 cv
620.855 779.603 622.394 779.144 624.365 779.144 cv
626.309 779.144 627.848 779.603 628.982 780.521 cv
630.089 781.439 630.656 782.681 630.656 784.247 cv
630.656 785.381 630.332 786.326 629.684 787.109 cv
629.036 787.892 628.172 788.432 627.038 788.702 cv
628.307 788.999 629.306 789.593 630.035 790.457 cv
630.737 791.321 631.115 792.401 631.115 793.643 cv
631.115 795.56 630.521 797.018 629.36 798.017 cv
628.172 799.043 626.525 799.529 624.365 799.529 cv
622.178 799.529 620.504 799.043 619.343 798.017 cv
618.182 797.018 617.615 795.56 617.615 793.643 cv
617.615 792.401 617.966 791.321 618.695 790.457 cv
619.397 789.593 620.396 788.999 621.692 788.702 cv
620.72 784.49 mo
620.72 785.516 621.017 786.326 621.665 786.893 cv
622.313 787.46 623.204 787.73 624.365 787.73 cv
625.499 787.73 626.39 787.46 627.038 786.893 cv
627.686 786.326 628.01 785.516 628.01 784.49 cv
628.01 783.464 627.686 782.681 627.038 782.114 cv
626.39 781.547 625.499 781.25 624.365 781.25 cv
623.204 781.25 622.313 781.547 621.665 782.114 cv
621.017 782.681 620.72 783.464 620.72 784.49 cv
f
641.537 781.25 mo
640.16 781.25 639.134 781.925 638.432 783.275 cv
637.73 784.625 637.406 786.65 637.406 789.35 cv
637.406 792.05 637.73 794.075 638.432 795.425 cv
639.134 796.775 640.16 797.45 641.537 797.45 cv
642.914 797.45 643.94 796.775 644.642 795.425 cv
645.317 794.075 645.668 792.05 645.668 789.35 cv
645.668 786.65 645.317 784.625 644.642 783.275 cv
643.94 781.925 642.914 781.25 641.537 781.25 cv
641.537 779.144 mo
643.724 779.144 645.398 780.035 646.586 781.763 cv
647.747 783.518 648.341 786.056 648.341 789.35 cv
648.341 792.671 647.747 795.209 646.586 796.937 cv
645.398 798.665 643.724 799.529 641.537 799.529 cv
639.323 799.529 637.622 798.665 636.461 796.937 cv
635.3 795.209 634.733 792.671 634.733 789.35 cv
634.733 786.056 635.3 783.518 636.461 781.763 cv
637.622 780.035 639.323 779.144 641.537 779.144 cv
f
657.115 711.953 mo
653.615 711.953 li
f
657.115 711.953 mo
653.615 711.953 li
@
581.435 704.282 mo
580.058 704.282 579.032 704.957 578.33 706.307 cv
577.628 707.657 577.304 709.682 577.304 712.382 cv
577.304 715.082 577.628 717.107 578.33 718.457 cv
579.032 719.807 580.058 720.482 581.435 720.482 cv
582.812 720.482 583.838 719.807 584.54 718.457 cv
585.215 717.107 585.566 715.082 585.566 712.382 cv
585.566 709.682 585.215 707.657 584.54 706.307 cv
583.838 704.957 582.812 704.282 581.435 704.282 cv
581.435 702.176 mo
583.622 702.176 585.296 703.067 586.484 704.795 cv
587.645 706.55 588.239 709.088 588.239 712.382 cv
588.239 715.703 587.645 718.241 586.484 719.969 cv
585.296 721.697 583.622 722.561 581.435 722.561 cv
579.221 722.561 577.52 721.697 576.359 719.969 cv
575.198 718.241 574.631 715.703 574.631 712.382 cv
574.631 709.088 575.198 706.55 576.359 704.795 cv
577.52 703.067 579.221 702.176 581.435 702.176 cv
f
592.91 718.862 mo
595.691 718.862 li
595.691 722.21 li
592.91 722.21 li
592.91 718.862 li
f
601.577 721.805 mo
601.577 719.375 li
602.225 719.699 602.9 719.942 603.602 720.104 cv
604.277 720.266 604.952 720.347 605.627 720.347 cv
607.355 720.347 608.705 719.78 609.623 718.592 cv
610.541 717.404 611.081 715.622 611.243 713.192 cv
610.703 713.948 610.055 714.542 609.299 714.947 cv
608.516 715.352 607.652 715.541 606.707 715.541 cv
604.709 715.541 603.143 714.947 602.009 713.759 cv
600.875 712.571 600.308 710.951 600.308 708.872 cv
600.308 706.874 600.902 705.254 602.09 704.012 cv
603.278 702.797 604.871 702.176 606.869 702.176 cv
609.137 702.176 610.892 703.067 612.08 704.795 cv
613.268 706.55 613.889 709.088 613.889 712.382 cv
613.889 715.514 613.133 717.971 611.675 719.807 cv
610.19 721.643 608.219 722.561 605.735 722.561 cv
605.06 722.561 604.385 722.48 603.71 722.372 cv
603.008 722.264 602.306 722.075 601.577 721.805 cv
606.869 713.462 mo
608.057 713.462 609.002 713.057 609.704 712.247 cv
610.406 711.437 610.757 710.303 610.757 708.872 cv
610.757 707.468 610.406 706.334 609.704 705.524 cv
609.002 704.714 608.057 704.282 606.869 704.282 cv
605.681 704.282 604.736 704.714 604.034 705.524 cv
603.332 706.334 602.981 707.468 602.981 708.872 cv
602.981 710.303 603.332 711.437 604.034 712.247 cv
604.736 713.057 605.681 713.462 606.869 713.462 cv
f
624.365 712.868 mo
623.096 712.868 622.097 713.219 621.368 713.894 cv
620.639 714.569 620.288 715.487 620.288 716.675 cv
620.288 717.863 620.639 718.808 621.368 719.483 cv
622.097 720.158 623.096 720.482 624.365 720.482 cv
625.607 720.482 626.606 720.158 627.335 719.456 cv
628.064 718.781 628.442 717.863 628.442 716.675 cv
628.442 715.487 628.064 714.569 627.362 713.894 cv
626.633 713.219 625.634 712.868 624.365 712.868 cv
621.692 711.734 mo
620.558 711.464 619.667 710.924 619.019 710.141 cv
618.371 709.358 618.074 708.413 618.074 707.279 cv
618.074 705.713 618.614 704.471 619.748 703.553 cv
620.855 702.635 622.394 702.176 624.365 702.176 cv
626.309 702.176 627.848 702.635 628.982 703.553 cv
630.089 704.471 630.656 705.713 630.656 707.279 cv
630.656 708.413 630.332 709.358 629.684 710.141 cv
629.036 710.924 628.172 711.464 627.038 711.734 cv
628.307 712.031 629.306 712.625 630.035 713.489 cv
630.737 714.353 631.115 715.433 631.115 716.675 cv
631.115 718.592 630.521 720.05 629.36 721.049 cv
628.172 722.075 626.525 722.561 624.365 722.561 cv
622.178 722.561 620.504 722.075 619.343 721.049 cv
618.182 720.05 617.615 718.592 617.615 716.675 cv
617.615 715.433 617.966 714.353 618.695 713.489 cv
619.397 712.625 620.396 712.031 621.692 711.734 cv
620.72 707.522 mo
620.72 708.548 621.017 709.358 621.665 709.925 cv
622.313 710.492 623.204 710.762 624.365 710.762 cv
625.499 710.762 626.39 710.492 627.038 709.925 cv
627.686 709.358 628.01 708.548 628.01 707.522 cv
628.01 706.496 627.686 705.713 627.038 705.146 cv
626.39 704.579 625.499 704.282 624.365 704.282 cv
623.204 704.282 622.313 704.579 621.665 705.146 cv
621.017 705.713 620.72 706.496 620.72 707.522 cv
f
635.867 702.527 mo
646.316 702.527 li
646.316 704.768 li
638.297 704.768 li
638.297 709.601 li
638.675 709.466 639.08 709.358 639.458 709.304 cv
639.836 709.25 640.241 709.196 640.619 709.196 cv
642.806 709.196 644.534 709.817 645.83 711.005 cv
647.126 712.22 647.774 713.84 647.774 715.892 cv
647.774 718.025 647.099 719.672 645.776 720.833 cv
644.453 721.994 642.59 722.561 640.214 722.561 cv
639.377 722.561 638.54 722.48 637.676 722.372 cv
636.812 722.237 635.948 722.048 635.03 721.751 cv
635.03 719.078 li
635.813 719.51 636.623 719.834 637.487 720.05 cv
638.324 720.266 639.215 720.347 640.16 720.347 cv
641.672 720.347 642.887 719.969 643.778 719.159 cv
644.642 718.349 645.101 717.269 645.101 715.892 cv
645.101 714.542 644.642 713.462 643.778 712.652 cv
642.887 711.842 641.672 711.437 640.16 711.437 cv
639.458 711.437 638.729 711.518 638.027 711.68 cv
637.325 711.842 636.596 712.085 635.867 712.409 cv
635.867 702.527 li
f
657.115 634.985 mo
653.615 634.985 li
f
657.115 634.985 mo
653.615 634.985 li
@
581.435 627.315 mo
580.058 627.315 579.032 627.99 578.33 629.34 cv
577.628 630.69 577.304 632.715 577.304 635.415 cv
577.304 638.115 577.628 640.14 578.33 641.49 cv
579.032 642.84 580.058 643.515 581.435 643.515 cv
582.812 643.515 583.838 642.84 584.54 641.49 cv
585.215 640.14 585.566 638.115 585.566 635.415 cv
585.566 632.715 585.215 630.69 584.54 629.34 cv
583.838 627.99 582.812 627.315 581.435 627.315 cv
581.435 625.209 mo
583.622 625.209 585.296 626.1 586.484 627.828 cv
587.645 629.583 588.239 632.121 588.239 635.415 cv
588.239 638.736 587.645 641.274 586.484 643.002 cv
585.296 644.73 583.622 645.594 581.435 645.594 cv
579.221 645.594 577.52 644.73 576.359 643.002 cv
575.198 641.274 574.631 638.736 574.631 635.415 cv
574.631 632.121 575.198 629.583 576.359 627.828 cv
577.52 626.1 579.221 625.209 581.435 625.209 cv
f
592.91 641.895 mo
595.691 641.895 li
595.691 645.243 li
592.91 645.243 li
592.91 641.895 li
f
601.577 644.838 mo
601.577 642.408 li
602.225 642.732 602.9 642.975 603.602 643.137 cv
604.277 643.299 604.952 643.38 605.627 643.38 cv
607.355 643.38 608.705 642.813 609.623 641.625 cv
610.541 640.437 611.081 638.655 611.243 636.225 cv
610.703 636.981 610.055 637.575 609.299 637.98 cv
608.516 638.385 607.652 638.574 606.707 638.574 cv
604.709 638.574 603.143 637.98 602.009 636.792 cv
600.875 635.604 600.308 633.984 600.308 631.905 cv
600.308 629.907 600.902 628.287 602.09 627.045 cv
603.278 625.83 604.871 625.209 606.869 625.209 cv
609.137 625.209 610.892 626.1 612.08 627.828 cv
613.268 629.583 613.889 632.121 613.889 635.415 cv
613.889 638.547 613.133 641.004 611.675 642.84 cv
610.19 644.676 608.219 645.594 605.735 645.594 cv
605.06 645.594 604.385 645.513 603.71 645.405 cv
603.008 645.297 602.306 645.108 601.577 644.838 cv
606.869 636.495 mo
608.057 636.495 609.002 636.09 609.704 635.28 cv
610.406 634.47 610.757 633.336 610.757 631.905 cv
610.757 630.501 610.406 629.367 609.704 628.557 cv
609.002 627.747 608.057 627.315 606.869 627.315 cv
605.681 627.315 604.736 627.747 604.034 628.557 cv
603.332 629.367 602.981 630.501 602.981 631.905 cv
602.981 633.336 603.332 634.47 604.034 635.28 cv
604.736 636.09 605.681 636.495 606.869 636.495 cv
f
618.749 644.838 mo
618.749 642.408 li
619.397 642.732 620.072 642.975 620.774 643.137 cv
621.449 643.299 622.124 643.38 622.799 643.38 cv
624.527 643.38 625.877 642.813 626.795 641.625 cv
627.713 640.437 628.253 638.655 628.415 636.225 cv
627.875 636.981 627.227 637.575 626.471 637.98 cv
625.688 638.385 624.824 638.574 623.879 638.574 cv
621.881 638.574 620.315 637.98 619.181 636.792 cv
618.047 635.604 617.48 633.984 617.48 631.905 cv
617.48 629.907 618.074 628.287 619.262 627.045 cv
620.45 625.83 622.043 625.209 624.041 625.209 cv
626.309 625.209 628.064 626.1 629.252 627.828 cv
630.44 629.583 631.061 632.121 631.061 635.415 cv
631.061 638.547 630.305 641.004 628.847 642.84 cv
627.362 644.676 625.391 645.594 622.907 645.594 cv
622.232 645.594 621.557 645.513 620.882 645.405 cv
620.18 645.297 619.478 645.108 618.749 644.838 cv
624.041 636.495 mo
625.229 636.495 626.174 636.09 626.876 635.28 cv
627.578 634.47 627.929 633.336 627.929 631.905 cv
627.929 630.501 627.578 629.367 626.876 628.557 cv
626.174 627.747 625.229 627.315 624.041 627.315 cv
622.853 627.315 621.908 627.747 621.206 628.557 cv
620.504 629.367 620.153 630.501 620.153 631.905 cv
620.153 633.336 620.504 634.47 621.206 635.28 cv
621.908 636.09 622.853 636.495 624.041 636.495 cv
f
641.537 627.315 mo
640.16 627.315 639.134 627.99 638.432 629.34 cv
637.73 630.69 637.406 632.715 637.406 635.415 cv
637.406 638.115 637.73 640.14 638.432 641.49 cv
639.134 642.84 640.16 643.515 641.537 643.515 cv
642.914 643.515 643.94 642.84 644.642 641.49 cv
645.317 640.14 645.668 638.115 645.668 635.415 cv
645.668 632.715 645.317 630.69 644.642 629.34 cv
643.94 627.99 642.914 627.315 641.537 627.315 cv
641.537 625.209 mo
643.724 625.209 645.398 626.1 646.586 627.828 cv
647.747 629.583 648.341 632.121 648.341 635.415 cv
648.341 638.736 647.747 641.274 646.586 643.002 cv
645.398 644.73 643.724 645.594 641.537 645.594 cv
639.323 645.594 637.622 644.73 636.461 643.002 cv
635.3 641.274 634.733 638.736 634.733 635.415 cv
634.733 632.121 635.3 629.583 636.461 627.828 cv
637.622 626.1 639.323 625.209 641.537 625.209 cv
f
657.115 558.017 mo
653.615 558.017 li
f
657.115 558.017 mo
653.615 558.017 li
@
581.435 550.347 mo
580.058 550.347 579.032 551.022 578.33 552.372 cv
577.628 553.722 577.304 555.747 577.304 558.447 cv
577.304 561.147 577.628 563.172 578.33 564.522 cv
579.032 565.872 580.058 566.547 581.435 566.547 cv
582.812 566.547 583.838 565.872 584.54 564.522 cv
585.215 563.172 585.566 561.147 585.566 558.447 cv
585.566 555.747 585.215 553.722 584.54 552.372 cv
583.838 551.022 582.812 550.347 581.435 550.347 cv
581.435 548.241 mo
583.622 548.241 585.296 549.132 586.484 550.86 cv
587.645 552.615 588.239 555.153 588.239 558.447 cv
588.239 561.768 587.645 564.306 586.484 566.034 cv
585.296 567.762 583.622 568.626 581.435 568.626 cv
579.221 568.626 577.52 567.762 576.359 566.034 cv
575.198 564.306 574.631 561.768 574.631 558.447 cv
574.631 555.153 575.198 552.615 576.359 550.86 cv
577.52 549.132 579.221 548.241 581.435 548.241 cv
f
592.91 564.927 mo
595.691 564.927 li
595.691 568.275 li
592.91 568.275 li
592.91 564.927 li
f
601.577 567.87 mo
601.577 565.44 li
602.225 565.764 602.9 566.007 603.602 566.169 cv
604.277 566.331 604.952 566.412 605.627 566.412 cv
607.355 566.412 608.705 565.845 609.623 564.657 cv
610.541 563.469 611.081 561.687 611.243 559.257 cv
610.703 560.013 610.055 560.607 609.299 561.012 cv
608.516 561.417 607.652 561.606 606.707 561.606 cv
604.709 561.606 603.143 561.012 602.009 559.824 cv
600.875 558.636 600.308 557.016 600.308 554.937 cv
600.308 552.939 600.902 551.319 602.09 550.077 cv
603.278 548.862 604.871 548.241 606.869 548.241 cv
609.137 548.241 610.892 549.132 612.08 550.86 cv
613.268 552.615 613.889 555.153 613.889 558.447 cv
613.889 561.579 613.133 564.036 611.675 565.872 cv
610.19 567.708 608.219 568.626 605.735 568.626 cv
605.06 568.626 604.385 568.545 603.71 568.437 cv
603.008 568.329 602.306 568.14 601.577 567.87 cv
606.869 559.527 mo
608.057 559.527 609.002 559.122 609.704 558.312 cv
610.406 557.502 610.757 556.368 610.757 554.937 cv
610.757 553.533 610.406 552.399 609.704 551.589 cv
609.002 550.779 608.057 550.347 606.869 550.347 cv
605.681 550.347 604.736 550.779 604.034 551.589 cv
603.332 552.399 602.981 553.533 602.981 554.937 cv
602.981 556.368 603.332 557.502 604.034 558.312 cv
604.736 559.122 605.681 559.527 606.869 559.527 cv
f
618.749 567.87 mo
618.749 565.44 li
619.397 565.764 620.072 566.007 620.774 566.169 cv
621.449 566.331 622.124 566.412 622.799 566.412 cv
624.527 566.412 625.877 565.845 626.795 564.657 cv
627.713 563.469 628.253 561.687 628.415 559.257 cv
627.875 560.013 627.227 560.607 626.471 561.012 cv
625.688 561.417 624.824 561.606 623.879 561.606 cv
621.881 561.606 620.315 561.012 619.181 559.824 cv
618.047 558.636 617.48 557.016 617.48 554.937 cv
617.48 552.939 618.074 551.319 619.262 550.077 cv
620.45 548.862 622.043 548.241 624.041 548.241 cv
626.309 548.241 628.064 549.132 629.252 550.86 cv
630.44 552.615 631.061 555.153 631.061 558.447 cv
631.061 561.579 630.305 564.036 628.847 565.872 cv
627.362 567.708 625.391 568.626 622.907 568.626 cv
622.232 568.626 621.557 568.545 620.882 568.437 cv
620.18 568.329 619.478 568.14 618.749 567.87 cv
624.041 559.527 mo
625.229 559.527 626.174 559.122 626.876 558.312 cv
627.578 557.502 627.929 556.368 627.929 554.937 cv
627.929 553.533 627.578 552.399 626.876 551.589 cv
626.174 550.779 625.229 550.347 624.041 550.347 cv
622.853 550.347 621.908 550.779 621.206 551.589 cv
620.504 552.399 620.153 553.533 620.153 554.937 cv
620.153 556.368 620.504 557.502 621.206 558.312 cv
621.908 559.122 622.853 559.527 624.041 559.527 cv
f
635.867 548.592 mo
646.316 548.592 li
646.316 550.833 li
638.297 550.833 li
638.297 555.666 li
638.675 555.531 639.08 555.423 639.458 555.369 cv
639.836 555.315 640.241 555.261 640.619 555.261 cv
642.806 555.261 644.534 555.882 645.83 557.07 cv
647.126 558.285 647.774 559.905 647.774 561.957 cv
647.774 564.09 647.099 565.737 645.776 566.898 cv
644.453 568.059 642.59 568.626 640.214 568.626 cv
639.377 568.626 638.54 568.545 637.676 568.437 cv
636.812 568.302 635.948 568.113 635.03 567.816 cv
635.03 565.143 li
635.813 565.575 636.623 565.899 637.487 566.115 cv
638.324 566.331 639.215 566.412 640.16 566.412 cv
641.672 566.412 642.887 566.034 643.778 565.224 cv
644.642 564.414 645.101 563.334 645.101 561.957 cv
645.101 560.607 644.642 559.527 643.778 558.717 cv
642.887 557.907 641.672 557.502 640.16 557.502 cv
639.458 557.502 638.729 557.583 638.027 557.745 cv
637.325 557.907 636.596 558.15 635.867 558.474 cv
635.867 548.592 li
f
657.115 481.05 mo
653.615 481.05 li
f
657.115 481.05 mo
653.615 481.05 li
@
576.197 489.067 mo
580.544 489.067 li
580.544 474.055 li
575.819 475 li
575.819 472.57 li
580.517 471.625 li
583.19 471.625 li
583.19 489.067 li
587.537 489.067 li
587.537 491.308 li
576.197 491.308 li
576.197 489.067 li
f
592.91 487.96 mo
595.691 487.96 li
595.691 491.308 li
592.91 491.308 li
592.91 487.96 li
f
607.193 473.38 mo
605.816 473.38 604.79 474.055 604.088 475.405 cv
603.386 476.755 603.062 478.78 603.062 481.48 cv
603.062 484.18 603.386 486.205 604.088 487.555 cv
604.79 488.905 605.816 489.58 607.193 489.58 cv
608.57 489.58 609.596 488.905 610.298 487.555 cv
610.973 486.205 611.324 484.18 611.324 481.48 cv
611.324 478.78 610.973 476.755 610.298 475.405 cv
609.596 474.055 608.57 473.38 607.193 473.38 cv
607.193 471.274 mo
609.38 471.274 611.054 472.165 612.242 473.893 cv
613.403 475.648 613.997 478.186 613.997 481.48 cv
613.997 484.801 613.403 487.339 612.242 489.067 cv
611.054 490.795 609.38 491.659 607.193 491.659 cv
604.979 491.659 603.278 490.795 602.117 489.067 cv
600.956 487.339 600.389 484.801 600.389 481.48 cv
600.389 478.186 600.956 475.648 602.117 473.893 cv
603.278 472.165 604.979 471.274 607.193 471.274 cv
f
624.365 473.38 mo
622.988 473.38 621.962 474.055 621.26 475.405 cv
620.558 476.755 620.234 478.78 620.234 481.48 cv
620.234 484.18 620.558 486.205 621.26 487.555 cv
621.962 488.905 622.988 489.58 624.365 489.58 cv
625.742 489.58 626.768 488.905 627.47 487.555 cv
628.145 486.205 628.496 484.18 628.496 481.48 cv
628.496 478.78 628.145 476.755 627.47 475.405 cv
626.768 474.055 625.742 473.38 624.365 473.38 cv
624.365 471.274 mo
626.552 471.274 628.226 472.165 629.414 473.893 cv
630.575 475.648 631.169 478.186 631.169 481.48 cv
631.169 484.801 630.575 487.339 629.414 489.067 cv
628.226 490.795 626.552 491.659 624.365 491.659 cv
622.151 491.659 620.45 490.795 619.289 489.067 cv
618.128 487.339 617.561 484.801 617.561 481.48 cv
617.561 478.186 618.128 475.648 619.289 473.893 cv
620.45 472.165 622.151 471.274 624.365 471.274 cv
f
641.537 473.38 mo
640.16 473.38 639.134 474.055 638.432 475.405 cv
637.73 476.755 637.406 478.78 637.406 481.48 cv
637.406 484.18 637.73 486.205 638.432 487.555 cv
639.134 488.905 640.16 489.58 641.537 489.58 cv
642.914 489.58 643.94 488.905 644.642 487.555 cv
645.317 486.205 645.668 484.18 645.668 481.48 cv
645.668 478.78 645.317 476.755 644.642 475.405 cv
643.94 474.055 642.914 473.38 641.537 473.38 cv
641.537 471.274 mo
643.724 471.274 645.398 472.165 646.586 473.893 cv
647.747 475.648 648.341 478.186 648.341 481.48 cv
648.341 484.801 647.747 487.339 646.586 489.067 cv
645.398 490.795 643.724 491.659 641.537 491.659 cv
639.323 491.659 637.622 490.795 636.461 489.067 cv
635.3 487.339 634.733 484.801 634.733 481.48 cv
634.733 478.186 635.3 475.648 636.461 473.893 cv
637.622 472.165 639.323 471.274 641.537 471.274 cv
f
gsave
657.115 788.92 mo
1133.86 788.92 li
1133.86 481.05 li
657.115 481.05 li
657.115 788.92 li
clp
2.5 lw
2 lc
678.785 729.23 mo
740.7 491.447 li
802.615 522.433 li
864.53 481.049 li
926.445 481.049 li
988.361 481.049 li
1050.28 481.049 li
1112.19 481.049 li
@
grestore
gsave
657.115 788.92 mo
1133.86 788.92 li
1133.86 481.05 li
657.115 481.05 li
657.115 788.92 li
clp
2.5 lw
[9.25 4 ] 0 dsh
678.785 646.513 mo
740.7 481.05 li
802.615 522.365 li
864.53 481.05 li
926.445 481.05 li
988.361 481.05 li
1050.28 481.05 li
1112.19 481.05 li
@
grestore
2 lc
0 lj
657.115 788.92 mo
657.115 481.05 li
@
1133.86 788.92 mo
1133.86 481.05 li
@
657.115 788.92 mo
1133.86 788.92 li
@
657.115 481.05 mo
1133.86 481.05 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
