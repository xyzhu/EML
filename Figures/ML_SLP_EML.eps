%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ML_SLP_EML.pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: yingchenzhen
%%CreationDate: 2020/1/8, 15:25:12
%%BoundingBox: -1 0 600 631
%%HiResBoundingBox: 0 0 599.8111 630.9921
%%CropBox: 0 0 599.8111 630.9921
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 848 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2020-01-08T15:23:54+08:00"
   xmp:CreatorTool="matplotlib 3.1.1, http://matplotlib.org"
   xmp:ModifyDate="2020-01-08T15:25:02+08:00"
   xmp:MetadataDate="2020-01-08T15:25:02+08:00"
   pdf:Producer="matplotlib pdf backend 3.1.1"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:00476c0f-d170-4870-ac14-eeab46860d53"
   xmpMM:InstanceID="uuid:33c6bf1d-5439-4c78-8710-be0bbd87401b"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -630.992 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-5 0 mo
-1.52588e-5 630.992 li
599.811 630.992 li
599.811 0 li
cp
clp
gsave
-.669291 631.496 mo
600.331 631.496 li
600.331 -.503869 li
-.669291 -.503869 li
-.669291 631.496 li
clp
-5.66931 639.496 mo
642.331 639.496 li
642.331 -8.50401 li
-5.66931 -8.50401 li
-5.66931 639.496 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
54.4307 288.326 mo
286.104 288.326 li
286.104 62.836 li
54.4307 62.836 li
cp
f
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
64.9613 363.489 mo
74.1183 363.489 li
74.1183 74.1334 li
64.9613 74.1334 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
64.9613 363.489 mo
74.1183 363.489 li
74.1183 74.1334 li
64.9613 74.1334 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
156.532 363.489 mo
165.689 363.489 li
165.689 184.412 li
156.532 184.412 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
156.532 363.489 mo
165.689 363.489 li
165.689 184.412 li
156.532 184.412 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
248.102 363.489 mo
257.259 363.489 li
257.259 185.848 li
248.102 185.848 li
cp
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
248.102 363.489 mo
257.259 363.489 li
257.259 185.848 li
248.102 185.848 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
74.1183 363.489 mo
83.2753 363.489 li
83.2753 89.7373 li
74.1183 89.7373 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
74.1183 363.489 mo
83.2753 363.489 li
83.2753 89.7373 li
74.1183 89.7373 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
165.689 363.489 mo
174.846 363.489 li
174.846 189.749 li
165.689 189.749 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
165.689 363.489 mo
174.846 363.489 li
174.846 189.749 li
165.689 189.749 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
257.259 363.489 mo
266.416 363.489 li
266.416 189.546 li
257.259 189.546 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
257.259 363.489 mo
266.416 363.489 li
266.416 189.546 li
257.259 189.546 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
83.2754 363.489 mo
92.4324 363.489 li
92.4324 163.878 li
83.2754 163.878 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
83.2754 363.489 mo
92.4324 363.489 li
92.4324 163.878 li
83.2754 163.878 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
174.846 363.489 mo
184.003 363.489 li
184.003 209.464 li
174.846 209.464 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
174.846 363.489 mo
184.003 363.489 li
184.003 209.464 li
174.846 209.464 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 288.326 mo
286.104 288.326 li
286.104 62.8359 li
54.4308 62.8359 li
54.4308 288.326 li
clp
266.416 363.489 mo
275.573 363.489 li
275.573 211.93 li
266.416 211.93 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
266.416 363.489 mo
275.573 363.489 li
275.573 211.93 li
266.416 211.93 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
78.6969 288.326 mo
78.6969 291.826 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
78.6969 288.326 mo
78.6969 291.826 li
@
66.1337 297.622 mo
63.7217 304.156 li
68.5457 304.156 li
66.1337 297.622 li
65.1257 295.876 mo
67.1417 295.876 li
72.1457 308.998 li
70.2917 308.998 li
69.1037 305.632 li
63.1817 305.632 li
61.9937 308.998 li
60.1217 308.998 li
65.1257 295.876 li
f
83.8818 296.884 mo
83.8818 298.756 li
83.2698 298.216 82.6398 297.802 81.9558 297.514 cv
81.2718 297.244 80.5698 297.1 79.8138 297.1 cv
78.3018 297.1 77.1498 297.568 76.3578 298.486 cv
75.5658 299.404 75.1698 300.718 75.1698 302.446 cv
75.1698 304.174 75.5658 305.506 76.3578 306.424 cv
77.1498 307.342 78.3018 307.792 79.8138 307.792 cv
80.5698 307.792 81.2718 307.666 81.9558 307.378 cv
82.6398 307.108 83.2698 306.694 83.8818 306.136 cv
83.8818 307.99 li
83.2518 308.422 82.5858 308.728 81.9018 308.926 cv
81.2178 309.124 80.4798 309.232 79.7058 309.232 cv
77.7258 309.232 76.1598 308.638 75.0078 307.432 cv
73.8558 306.226 73.2978 304.57 73.2978 302.446 cv
73.2978 300.34 73.8558 298.684 75.0078 297.46 cv
76.1598 296.254 77.7258 295.642 79.7058 295.642 cv
80.4978 295.642 81.2358 295.75 81.9198 295.948 cv
82.6038 296.164 83.2698 296.47 83.8818 296.884 cv
f
96.4458 296.884 mo
96.4458 298.756 li
95.8338 298.216 95.2038 297.802 94.5198 297.514 cv
93.8358 297.244 93.1338 297.1 92.3778 297.1 cv
90.8658 297.1 89.7138 297.568 88.9218 298.486 cv
88.1298 299.404 87.7338 300.718 87.7338 302.446 cv
87.7338 304.174 88.1298 305.506 88.9218 306.424 cv
89.7138 307.342 90.8658 307.792 92.3778 307.792 cv
93.1338 307.792 93.8358 307.666 94.5198 307.378 cv
95.2038 307.108 95.8338 306.694 96.4458 306.136 cv
96.4458 307.99 li
95.8158 308.422 95.1498 308.728 94.4658 308.926 cv
93.7818 309.124 93.0438 309.232 92.2698 309.232 cv
90.2898 309.232 88.7238 308.638 87.5718 307.432 cv
86.4198 306.226 85.8618 304.57 85.8618 302.446 cv
85.8618 300.34 86.4198 298.684 87.5718 297.46 cv
88.7238 296.254 90.2898 295.642 92.2698 295.642 cv
93.0618 295.642 93.7998 295.75 94.4838 295.948 cv
95.1678 296.164 95.8338 296.47 96.4458 296.884 cv
f
170.267 288.326 mo
170.267 291.826 li
f
170.267 288.326 mo
170.267 291.826 li
@
137.713 297.622 mo
135.301 304.156 li
140.125 304.156 li
137.713 297.622 li
136.705 295.876 mo
138.721 295.876 li
143.725 308.998 li
141.871 308.998 li
140.683 305.632 li
134.761 305.632 li
133.573 308.998 li
131.701 308.998 li
136.705 295.876 li
f
151.861 302.842 mo
152.239 302.986 152.617 303.256 152.977 303.67 cv
153.337 304.102 153.697 304.678 154.057 305.416 cv
155.857 308.998 li
153.949 308.998 li
152.275 305.632 li
151.843 304.768 151.411 304.174 151.015 303.886 cv
150.601 303.598 150.043 303.454 149.341 303.454 cv
147.415 303.454 li
147.415 308.998 li
145.633 308.998 li
145.633 295.876 li
149.647 295.876 li
151.141 295.876 152.257 296.2 152.995 296.812 cv
153.733 297.442 154.111 298.396 154.111 299.656 cv
154.111 300.484 153.913 301.186 153.535 301.726 cv
153.139 302.266 152.581 302.644 151.861 302.842 cv
147.415 297.334 mo
147.415 301.996 li
149.647 301.996 li
150.493 301.996 151.141 301.798 151.573 301.402 cv
152.005 301.006 152.239 300.43 152.239 299.656 cv
152.239 298.9 152.005 298.324 151.573 297.928 cv
151.141 297.532 150.493 297.334 149.647 297.334 cv
147.415 297.334 li
f
164.371 302.842 mo
164.749 302.986 165.127 303.256 165.487 303.67 cv
165.847 304.102 166.207 304.678 166.567 305.416 cv
168.367 308.998 li
166.459 308.998 li
164.785 305.632 li
164.353 304.768 163.921 304.174 163.525 303.886 cv
163.111 303.598 162.553 303.454 161.851 303.454 cv
159.925 303.454 li
159.925 308.998 li
158.143 308.998 li
158.143 295.876 li
162.157 295.876 li
163.651 295.876 164.767 296.2 165.505 296.812 cv
166.243 297.442 166.621 298.396 166.621 299.656 cv
166.621 300.484 166.423 301.186 166.045 301.726 cv
165.649 302.266 165.091 302.644 164.371 302.842 cv
159.925 297.334 mo
159.925 301.996 li
162.157 301.996 li
163.003 301.996 163.651 301.798 164.083 301.402 cv
164.515 301.006 164.749 300.43 164.749 299.656 cv
164.749 298.9 164.515 298.324 164.083 297.928 cv
163.651 297.532 163.003 297.334 162.157 297.334 cv
159.925 297.334 li
f
174.613 297.046 mo
173.695 297.046 173.011 297.496 172.543 298.396 cv
172.075 299.296 171.859 300.646 171.859 302.446 cv
171.859 304.246 172.075 305.596 172.543 306.496 cv
173.011 307.396 173.695 307.846 174.613 307.846 cv
175.531 307.846 176.215 307.396 176.683 306.496 cv
177.133 305.596 177.367 304.246 177.367 302.446 cv
177.367 300.646 177.133 299.296 176.683 298.396 cv
176.215 297.496 175.531 297.046 174.613 297.046 cv
174.613 295.642 mo
176.071 295.642 177.187 296.236 177.979 297.388 cv
178.753 298.558 179.149 300.25 179.149 302.446 cv
179.149 304.66 178.753 306.352 177.979 307.504 cv
177.187 308.656 176.071 309.232 174.613 309.232 cv
173.137 309.232 172.003 308.656 171.229 307.504 cv
170.455 306.352 170.077 304.66 170.077 302.446 cv
170.077 300.25 170.455 298.558 171.229 297.388 cv
172.003 296.236 173.137 295.642 174.613 295.642 cv
f
182.263 306.766 mo
184.117 306.766 li
184.117 308.998 li
182.263 308.998 li
182.263 306.766 li
f
191.785 297.046 mo
190.867 297.046 190.183 297.496 189.715 298.396 cv
189.247 299.296 189.031 300.646 189.031 302.446 cv
189.031 304.246 189.247 305.596 189.715 306.496 cv
190.183 307.396 190.867 307.846 191.785 307.846 cv
192.703 307.846 193.387 307.396 193.855 306.496 cv
194.305 305.596 194.539 304.246 194.539 302.446 cv
194.539 300.646 194.305 299.296 193.855 298.396 cv
193.387 297.496 192.703 297.046 191.785 297.046 cv
191.785 295.642 mo
193.243 295.642 194.359 296.236 195.151 297.388 cv
195.925 298.558 196.321 300.25 196.321 302.446 cv
196.321 304.66 195.925 306.352 195.151 307.504 cv
194.359 308.656 193.243 309.232 191.785 309.232 cv
190.309 309.232 189.175 308.656 188.401 307.504 cv
187.627 306.352 187.249 304.66 187.249 302.446 cv
187.249 300.25 187.627 298.558 188.401 297.388 cv
189.175 296.236 190.309 295.642 191.785 295.642 cv
f
199.453 295.876 mo
206.419 295.876 li
206.419 297.37 li
201.073 297.37 li
201.073 300.592 li
201.325 300.502 201.595 300.43 201.847 300.394 cv
202.099 300.358 202.369 300.322 202.621 300.322 cv
204.079 300.322 205.231 300.736 206.095 301.528 cv
206.959 302.338 207.391 303.418 207.391 304.786 cv
207.391 306.208 206.941 307.306 206.059 308.08 cv
205.177 308.854 203.935 309.232 202.351 309.232 cv
201.793 309.232 201.235 309.178 200.659 309.106 cv
200.083 309.016 199.507 308.89 198.895 308.692 cv
198.895 306.91 li
199.417 307.198 199.957 307.414 200.533 307.558 cv
201.091 307.702 201.685 307.756 202.315 307.756 cv
203.323 307.756 204.133 307.504 204.727 306.964 cv
205.303 306.424 205.609 305.704 205.609 304.786 cv
205.609 303.886 205.303 303.166 204.727 302.626 cv
204.133 302.086 203.323 301.816 202.315 301.816 cv
201.847 301.816 201.361 301.87 200.893 301.978 cv
200.425 302.086 199.939 302.248 199.453 302.464 cv
199.453 295.876 li
f
261.838 288.326 mo
261.838 291.826 li
f
261.838 288.326 mo
261.838 291.826 li
@
235.01 297.622 mo
232.598 304.156 li
237.422 304.156 li
235.01 297.622 li
234.002 295.876 mo
236.018 295.876 li
241.022 308.998 li
239.168 308.998 li
237.98 305.632 li
232.058 305.632 li
230.87 308.998 li
228.998 308.998 li
234.002 295.876 li
f
249.158 302.842 mo
249.536 302.986 249.914 303.256 250.274 303.67 cv
250.634 304.102 250.994 304.678 251.354 305.416 cv
253.154 308.998 li
251.246 308.998 li
249.572 305.632 li
249.14 304.768 248.708 304.174 248.312 303.886 cv
247.898 303.598 247.34 303.454 246.638 303.454 cv
244.712 303.454 li
244.712 308.998 li
242.93 308.998 li
242.93 295.876 li
246.944 295.876 li
248.438 295.876 249.554 296.2 250.292 296.812 cv
251.03 297.442 251.408 298.396 251.408 299.656 cv
251.408 300.484 251.21 301.186 250.832 301.726 cv
250.436 302.266 249.878 302.644 249.158 302.842 cv
244.712 297.334 mo
244.712 301.996 li
246.944 301.996 li
247.79 301.996 248.438 301.798 248.87 301.402 cv
249.302 301.006 249.536 300.43 249.536 299.656 cv
249.536 298.9 249.302 298.324 248.87 297.928 cv
248.438 297.532 247.79 297.334 246.944 297.334 cv
244.712 297.334 li
f
261.668 302.842 mo
262.046 302.986 262.424 303.256 262.784 303.67 cv
263.144 304.102 263.504 304.678 263.864 305.416 cv
265.664 308.998 li
263.756 308.998 li
262.082 305.632 li
261.65 304.768 261.218 304.174 260.822 303.886 cv
260.408 303.598 259.85 303.454 259.148 303.454 cv
257.222 303.454 li
257.222 308.998 li
255.44 308.998 li
255.44 295.876 li
259.454 295.876 li
260.948 295.876 262.064 296.2 262.802 296.812 cv
263.54 297.442 263.918 298.396 263.918 299.656 cv
263.918 300.484 263.72 301.186 263.342 301.726 cv
262.946 302.266 262.388 302.644 261.668 302.842 cv
257.222 297.334 mo
257.222 301.996 li
259.454 301.996 li
260.3 301.996 260.948 301.798 261.38 301.402 cv
261.812 301.006 262.046 300.43 262.046 299.656 cv
262.046 298.9 261.812 298.324 261.38 297.928 cv
260.948 297.532 260.3 297.334 259.454 297.334 cv
257.222 297.334 li
f
271.91 297.046 mo
270.992 297.046 270.308 297.496 269.84 298.396 cv
269.372 299.296 269.156 300.646 269.156 302.446 cv
269.156 304.246 269.372 305.596 269.84 306.496 cv
270.308 307.396 270.992 307.846 271.91 307.846 cv
272.828 307.846 273.512 307.396 273.98 306.496 cv
274.43 305.596 274.664 304.246 274.664 302.446 cv
274.664 300.646 274.43 299.296 273.98 298.396 cv
273.512 297.496 272.828 297.046 271.91 297.046 cv
271.91 295.642 mo
273.368 295.642 274.484 296.236 275.276 297.388 cv
276.05 298.558 276.446 300.25 276.446 302.446 cv
276.446 304.66 276.05 306.352 275.276 307.504 cv
274.484 308.656 273.368 309.232 271.91 309.232 cv
270.434 309.232 269.3 308.656 268.526 307.504 cv
267.752 306.352 267.374 304.66 267.374 302.446 cv
267.374 300.25 267.752 298.558 268.526 297.388 cv
269.3 296.236 270.434 295.642 271.91 295.642 cv
f
279.56 306.766 mo
281.414 306.766 li
281.414 308.998 li
279.56 308.998 li
279.56 306.766 li
f
285.59 307.504 mo
288.488 307.504 li
288.488 297.496 li
285.338 298.126 li
285.338 296.506 li
288.47 295.876 li
290.252 295.876 li
290.252 307.504 li
293.15 307.504 li
293.15 308.998 li
285.59 308.998 li
285.59 307.504 li
f
87.9187 316.762 mo
86.9947 318.358 86.3227 319.912 85.8817 321.445 cv
85.4197 322.978 85.2097 324.532 85.2097 326.107 cv
85.2097 327.703 85.4197 329.257 85.8817 330.79 cv
86.3227 332.344 86.9947 333.877 87.9187 335.452 cv
86.2807 335.452 li
85.2517 333.835 84.4747 332.281 83.9707 330.727 cv
83.4667 329.173 83.2147 327.64 83.2147 326.107 cv
83.2147 324.595 83.4667 323.062 83.9707 321.508 cv
84.4747 319.954 85.2307 318.379 86.2807 316.762 cv
87.9187 316.762 li
f
96.8017 326.926 mo
95.2687 326.926 94.2187 327.115 93.6307 327.451 cv
93.0427 327.808 92.7487 328.396 92.7487 329.236 cv
92.7487 329.908 92.9587 330.454 93.3997 330.832 cv
93.8407 331.231 94.4497 331.42 95.2057 331.42 cv
96.2557 331.42 97.0957 331.063 97.7257 330.307 cv
98.3557 329.572 98.6707 328.585 98.6707 327.346 cv
98.6707 326.926 li
96.8017 326.926 li
100.561 326.149 mo
100.561 332.701 li
98.6707 332.701 li
98.6707 330.958 li
98.2297 331.672 97.6837 332.176 97.0537 332.491 cv
96.4237 332.806 95.6257 332.974 94.7017 332.974 cv
93.5257 332.974 92.5807 332.659 91.8877 332.008 cv
91.1947 331.357 90.8587 330.475 90.8587 329.362 cv
90.8587 328.081 91.2787 327.115 92.1607 326.443 cv
93.0217 325.792 94.3027 325.456 96.0247 325.456 cv
98.6707 325.456 li
98.6707 325.267 li
98.6707 324.406 98.3767 323.734 97.8097 323.251 cv
97.2427 322.789 96.4447 322.537 95.4157 322.537 cv
94.7437 322.537 94.1137 322.621 93.4837 322.789 cv
92.8537 322.957 92.2657 323.188 91.6987 323.482 cv
91.6987 321.739 li
92.3707 321.487 93.0427 321.277 93.6937 321.151 cv
94.3447 321.025 94.9747 320.941 95.6047 320.941 cv
97.2637 320.941 98.5027 321.382 99.3217 322.243 cv
100.141 323.104 100.561 324.406 100.561 326.149 cv
f
104.152 316.762 mo
105.79 316.762 li
106.798 318.379 107.575 319.954 108.079 321.508 cv
108.583 323.062 108.856 324.595 108.856 326.107 cv
108.856 327.64 108.583 329.173 108.079 330.727 cv
107.575 332.281 106.798 333.835 105.79 335.452 cv
104.152 335.452 li
105.055 333.877 105.727 332.344 106.189 330.79 cv
106.63 329.257 106.861 327.703 106.861 326.107 cv
106.861 324.532 106.63 322.978 106.189 321.445 cv
105.727 319.912 105.055 318.358 104.152 316.762 cv
f
112.72 317.392 mo
114.799 317.392 li
114.799 323.671 li
122.317 323.671 li
122.317 317.392 li
124.396 317.392 li
124.396 332.701 li
122.317 332.701 li
122.317 325.414 li
114.799 325.414 li
114.799 332.701 li
112.72 332.701 li
112.72 317.392 li
f
133.657 326.926 mo
132.124 326.926 131.074 327.115 130.486 327.451 cv
129.898 327.808 129.604 328.396 129.604 329.236 cv
129.604 329.908 129.814 330.454 130.255 330.832 cv
130.696 331.231 131.305 331.42 132.061 331.42 cv
133.111 331.42 133.951 331.063 134.581 330.307 cv
135.211 329.572 135.526 328.585 135.526 327.346 cv
135.526 326.926 li
133.657 326.926 li
137.416 326.149 mo
137.416 332.701 li
135.526 332.701 li
135.526 330.958 li
135.085 331.672 134.539 332.176 133.909 332.491 cv
133.279 332.806 132.481 332.974 131.557 332.974 cv
130.381 332.974 129.436 332.659 128.743 332.008 cv
128.05 331.357 127.714 330.475 127.714 329.362 cv
127.714 328.081 128.134 327.115 129.016 326.443 cv
129.877 325.792 131.158 325.456 132.88 325.456 cv
135.526 325.456 li
135.526 325.267 li
135.526 324.406 135.232 323.734 134.665 323.251 cv
134.098 322.789 133.3 322.537 132.271 322.537 cv
131.599 322.537 130.969 322.621 130.339 322.789 cv
129.709 322.957 129.121 323.188 128.554 323.482 cv
128.554 321.739 li
129.226 321.487 129.898 321.277 130.549 321.151 cv
131.2 321.025 131.83 320.941 132.46 320.941 cv
134.119 320.941 135.358 321.382 136.177 322.243 cv
136.996 323.104 137.416 324.406 137.416 326.149 cv
f
150.247 323.419 mo
150.709 322.579 151.276 321.97 151.927 321.55 cv
152.578 321.151 153.355 320.941 154.258 320.941 cv
155.434 320.941 156.358 321.361 157.009 322.201 cv
157.66 323.041 157.996 324.238 157.996 325.771 cv
157.996 332.701 li
156.106 332.701 li
156.106 325.834 li
156.106 324.742 155.896 323.923 155.518 323.377 cv
155.119 322.852 154.531 322.579 153.733 322.579 cv
152.746 322.579 151.969 322.915 151.402 323.566 cv
150.835 324.217 150.562 325.099 150.562 326.212 cv
150.562 332.701 li
148.672 332.701 li
148.672 325.834 li
148.672 324.742 148.462 323.923 148.084 323.377 cv
147.685 322.852 147.076 322.579 146.278 322.579 cv
145.312 322.579 144.535 322.915 143.968 323.566 cv
143.401 324.217 143.128 325.099 143.128 326.212 cv
143.128 332.701 li
141.238 332.701 li
141.238 321.214 li
143.128 321.214 li
143.128 322.999 li
143.548 322.306 144.073 321.781 144.682 321.445 cv
145.27 321.109 145.984 320.941 146.824 320.941 cv
147.664 320.941 148.357 321.151 148.945 321.571 cv
149.533 321.991 149.953 322.621 150.247 323.419 cv
f
170.701 323.419 mo
171.163 322.579 171.73 321.97 172.381 321.55 cv
173.032 321.151 173.809 320.941 174.712 320.941 cv
175.888 320.941 176.812 321.361 177.463 322.201 cv
178.114 323.041 178.45 324.238 178.45 325.771 cv
178.45 332.701 li
176.56 332.701 li
176.56 325.834 li
176.56 324.742 176.35 323.923 175.972 323.377 cv
175.573 322.852 174.985 322.579 174.187 322.579 cv
173.2 322.579 172.423 322.915 171.856 323.566 cv
171.289 324.217 171.016 325.099 171.016 326.212 cv
171.016 332.701 li
169.126 332.701 li
169.126 325.834 li
169.126 324.742 168.916 323.923 168.538 323.377 cv
168.139 322.852 167.53 322.579 166.732 322.579 cv
165.766 322.579 164.989 322.915 164.422 323.566 cv
163.855 324.217 163.582 325.099 163.582 326.212 cv
163.582 332.701 li
161.692 332.701 li
161.692 321.214 li
163.582 321.214 li
163.582 322.999 li
164.002 322.306 164.527 321.781 165.136 321.445 cv
165.724 321.109 166.438 320.941 167.278 320.941 cv
168.118 320.941 168.811 321.151 169.399 321.571 cv
169.987 321.991 170.407 322.621 170.701 323.419 cv
f
182.209 321.214 mo
184.099 321.214 li
184.099 332.701 li
182.209 332.701 li
182.209 321.214 li
182.209 316.741 mo
184.099 316.741 li
184.099 319.135 li
182.209 319.135 li
182.209 316.741 li
f
197.602 325.771 mo
197.602 332.701 li
195.712 332.701 li
195.712 325.834 li
195.712 324.742 195.481 323.944 195.061 323.398 cv
194.641 322.852 194.011 322.579 193.171 322.579 cv
192.142 322.579 191.344 322.915 190.756 323.566 cv
190.168 324.217 189.874 325.099 189.874 326.212 cv
189.874 332.701 li
187.984 332.701 li
187.984 321.214 li
189.874 321.214 li
189.874 322.999 li
190.315 322.327 190.84 321.802 191.47 321.466 cv
192.079 321.13 192.793 320.941 193.591 320.941 cv
194.893 320.941 195.901 321.361 196.573 322.18 cv
197.245 322.999 197.602 324.196 197.602 325.771 cv
f
208.921 326.821 mo
208.921 325.477 208.627 324.406 208.081 323.65 cv
207.514 322.894 206.716 322.516 205.708 322.516 cv
204.7 322.516 203.902 322.894 203.335 323.65 cv
202.768 324.406 202.495 325.477 202.495 326.821 cv
202.495 328.186 202.768 329.236 203.335 329.992 cv
203.902 330.748 204.7 331.126 205.708 331.126 cv
206.716 331.126 207.514 330.748 208.081 329.992 cv
208.627 329.236 208.921 328.186 208.921 326.821 cv
210.811 331.273 mo
210.811 333.205 210.37 334.654 209.509 335.62 cv
208.627 336.565 207.304 337.048 205.519 337.048 cv
204.847 337.048 204.238 336.985 203.65 336.901 cv
203.062 336.796 202.474 336.649 201.928 336.439 cv
201.928 334.612 li
202.474 334.906 203.02 335.116 203.566 335.263 cv
204.112 335.41 204.658 335.494 205.225 335.494 cv
206.443 335.494 207.367 335.158 207.997 334.528 cv
208.606 333.877 208.921 332.911 208.921 331.609 cv
208.921 330.685 li
208.522 331.357 208.018 331.861 207.409 332.197 cv
206.8 332.533 206.086 332.701 205.246 332.701 cv
203.818 332.701 202.684 332.176 201.823 331.105 cv
200.962 330.034 200.542 328.606 200.542 326.821 cv
200.542 325.057 200.962 323.629 201.823 322.558 cv
202.684 321.487 203.818 320.941 205.246 320.941 cv
206.086 320.941 206.8 321.109 207.409 321.445 cv
208.018 321.781 208.522 322.285 208.921 322.957 cv
208.921 321.214 li
210.811 321.214 li
210.811 331.273 li
f
214.78 317.392 mo
216.859 317.392 li
216.859 330.958 li
224.314 330.958 li
224.314 332.701 li
214.78 332.701 li
214.78 317.392 li
f
230.845 322.537 mo
229.837 322.537 229.039 322.936 228.451 323.734 cv
227.863 324.532 227.569 325.603 227.569 326.968 cv
227.569 328.354 227.842 329.425 228.43 330.223 cv
229.018 331.021 229.816 331.399 230.845 331.399 cv
231.853 331.399 232.651 331.021 233.239 330.223 cv
233.827 329.425 234.121 328.354 234.121 326.968 cv
234.121 325.624 233.827 324.532 233.239 323.734 cv
232.651 322.936 231.853 322.537 230.845 322.537 cv
230.845 320.941 mo
232.483 320.941 233.764 321.487 234.709 322.537 cv
235.633 323.608 236.116 325.078 236.116 326.968 cv
236.116 328.858 235.633 330.328 234.709 331.378 cv
233.764 332.449 232.483 332.974 230.845 332.974 cv
229.186 332.974 227.884 332.449 226.96 331.378 cv
226.036 330.328 225.574 328.858 225.574 326.968 cv
225.574 325.078 226.036 323.608 226.96 322.537 cv
227.884 321.487 229.186 320.941 230.845 320.941 cv
f
246.574 321.55 mo
246.574 323.335 li
246.028 323.083 245.482 322.873 244.915 322.726 cv
244.327 322.6 243.739 322.516 243.13 322.516 cv
242.185 322.516 241.471 322.663 241.009 322.957 cv
240.547 323.251 240.316 323.671 240.316 324.238 cv
240.316 324.679 240.484 325.015 240.82 325.267 cv
241.156 325.519 241.828 325.771 242.836 325.981 cv
243.487 326.128 li
244.831 326.422 245.776 326.842 246.343 327.346 cv
246.889 327.871 247.183 328.606 247.183 329.53 cv
247.183 330.601 246.763 331.441 245.923 332.05 cv
245.083 332.68 243.907 332.974 242.437 332.974 cv
241.807 332.974 241.177 332.911 240.505 332.806 cv
239.833 332.701 239.14 332.533 238.405 332.281 cv
238.405 330.328 li
239.098 330.706 239.791 330.979 240.463 331.147 cv
241.135 331.336 241.807 331.42 242.479 331.42 cv
243.361 331.42 244.054 331.273 244.537 330.979 cv
244.999 330.685 245.251 330.244 245.251 329.677 cv
245.251 329.173 245.062 328.774 244.726 328.501 cv
244.39 328.228 243.634 327.955 242.458 327.703 cv
241.807 327.556 li
240.631 327.304 239.77 326.926 239.266 326.422 cv
238.741 325.918 238.489 325.225 238.489 324.322 cv
238.489 323.251 238.867 322.411 239.623 321.823 cv
240.379 321.235 241.471 320.941 242.899 320.941 cv
243.592 320.941 244.243 321.004 244.873 321.109 cv
245.482 321.214 246.049 321.361 246.574 321.55 cv
f
257.515 321.55 mo
257.515 323.335 li
256.969 323.083 256.423 322.873 255.856 322.726 cv
255.268 322.6 254.68 322.516 254.071 322.516 cv
253.126 322.516 252.412 322.663 251.95 322.957 cv
251.488 323.251 251.257 323.671 251.257 324.238 cv
251.257 324.679 251.425 325.015 251.761 325.267 cv
252.097 325.519 252.769 325.771 253.777 325.981 cv
254.428 326.128 li
255.772 326.422 256.717 326.842 257.284 327.346 cv
257.83 327.871 258.124 328.606 258.124 329.53 cv
258.124 330.601 257.704 331.441 256.864 332.05 cv
256.024 332.68 254.848 332.974 253.378 332.974 cv
252.748 332.974 252.118 332.911 251.446 332.806 cv
250.774 332.701 250.081 332.533 249.346 332.281 cv
249.346 330.328 li
250.039 330.706 250.732 330.979 251.404 331.147 cv
252.076 331.336 252.748 331.42 253.42 331.42 cv
254.302 331.42 254.995 331.273 255.478 330.979 cv
255.94 330.685 256.192 330.244 256.192 329.677 cv
256.192 329.173 256.003 328.774 255.667 328.501 cv
255.331 328.228 254.575 327.955 253.399 327.703 cv
252.748 327.556 li
251.572 327.304 250.711 326.926 250.207 326.422 cv
249.682 325.918 249.43 325.225 249.43 324.322 cv
249.43 323.251 249.808 322.411 250.564 321.823 cv
251.32 321.235 252.412 320.941 253.84 320.941 cv
254.533 320.941 255.184 321.004 255.814 321.109 cv
256.423 321.214 256.99 321.361 257.515 321.55 cv
f
54.4307 288.326 mo
50.9307 288.326 li
f
54.4307 288.326 mo
50.9307 288.326 li
@
11.1447 282.929 mo
10.1757 282.929 9.45369 283.404 8.95969 284.354 cv
8.46569 285.304 8.23769 286.729 8.23769 288.629 cv
8.23769 290.529 8.46569 291.954 8.95969 292.904 cv
9.45369 293.854 10.1757 294.329 11.1447 294.329 cv
12.1137 294.329 12.8357 293.854 13.3297 292.904 cv
13.8047 291.954 14.0517 290.529 14.0517 288.629 cv
14.0517 286.729 13.8047 285.304 13.3297 284.354 cv
12.8357 283.404 12.1137 282.929 11.1447 282.929 cv
11.1447 281.447 mo
12.6837 281.447 13.8617 282.074 14.6977 283.29 cv
15.5147 284.525 15.9327 286.311 15.9327 288.629 cv
15.9327 290.966 15.5147 292.752 14.6977 293.968 cv
13.8617 295.184 12.6837 295.792 11.1447 295.792 cv
9.58669 295.792 8.38969 295.184 7.57269 293.968 cv
6.75569 292.752 6.35669 290.966 6.35669 288.629 cv
6.35669 286.311 6.75569 284.525 7.57269 283.29 cv
8.38969 282.074 9.58669 281.447 11.1447 281.447 cv
f
19.2197 293.189 mo
21.1767 293.189 li
21.1767 295.545 li
19.2197 295.545 li
19.2197 293.189 li
f
25.5846 293.968 mo
28.6436 293.968 li
28.6436 283.404 li
25.3186 284.069 li
25.3186 282.359 li
28.6246 281.694 li
30.5056 281.694 li
30.5056 293.968 li
33.5646 293.968 li
33.5646 295.545 li
25.5846 295.545 li
25.5846 293.968 li
f
41.3546 282.929 mo
40.3856 282.929 39.6636 283.404 39.1696 284.354 cv
38.6756 285.304 38.4476 286.729 38.4476 288.629 cv
38.4476 290.529 38.6756 291.954 39.1696 292.904 cv
39.6636 293.854 40.3856 294.329 41.3546 294.329 cv
42.3236 294.329 43.0456 293.854 43.5396 292.904 cv
44.0146 291.954 44.2616 290.529 44.2616 288.629 cv
44.2616 286.729 44.0146 285.304 43.5396 284.354 cv
43.0456 283.404 42.3236 282.929 41.3546 282.929 cv
41.3546 281.447 mo
42.8936 281.447 44.0716 282.074 44.9076 283.29 cv
45.7246 284.525 46.1426 286.311 46.1426 288.629 cv
46.1426 290.966 45.7246 292.752 44.9076 293.968 cv
44.0716 295.184 42.8936 295.792 41.3546 295.792 cv
39.7966 295.792 38.5996 295.184 37.7826 293.968 cv
36.9656 292.752 36.5666 290.966 36.5666 288.629 cv
36.5666 286.311 36.9656 284.525 37.7826 283.29 cv
38.5996 282.074 39.7966 281.447 41.3546 281.447 cv
f
54.4307 250.744 mo
50.9307 250.744 li
f
54.4307 250.744 mo
50.9307 250.744 li
@
11.1447 245.347 mo
10.1757 245.347 9.45369 245.822 8.95969 246.772 cv
8.46569 247.722 8.23769 249.147 8.23769 251.047 cv
8.23769 252.947 8.46569 254.372 8.95969 255.322 cv
9.45369 256.272 10.1757 256.747 11.1447 256.747 cv
12.1137 256.747 12.8357 256.272 13.3297 255.322 cv
13.8047 254.372 14.0517 252.947 14.0517 251.047 cv
14.0517 249.147 13.8047 247.722 13.3297 246.772 cv
12.8357 245.822 12.1137 245.347 11.1447 245.347 cv
11.1447 243.865 mo
12.6837 243.865 13.8617 244.492 14.6977 245.708 cv
15.5147 246.943 15.9327 248.729 15.9327 251.047 cv
15.9327 253.384 15.5147 255.17 14.6977 256.386 cv
13.8617 257.602 12.6837 258.21 11.1447 258.21 cv
9.58669 258.21 8.38969 257.602 7.57269 256.386 cv
6.75569 255.17 6.35669 253.384 6.35669 251.047 cv
6.35669 248.729 6.75569 246.943 7.57269 245.708 cv
8.38969 244.492 9.58669 243.865 11.1447 243.865 cv
f
19.2197 255.607 mo
21.1767 255.607 li
21.1767 257.963 li
19.2197 257.963 li
19.2197 255.607 li
f
25.5846 256.386 mo
28.6436 256.386 li
28.6436 245.822 li
25.3186 246.487 li
25.3186 244.777 li
28.6246 244.112 li
30.5056 244.112 li
30.5056 256.386 li
33.5646 256.386 li
33.5646 257.963 li
25.5846 257.963 li
25.5846 256.386 li
f
37.3646 244.112 mo
44.7176 244.112 li
44.7176 245.689 li
39.0746 245.689 li
39.0746 249.09 li
39.3406 248.995 39.6256 248.919 39.8916 248.881 cv
40.1576 248.843 40.4426 248.805 40.7086 248.805 cv
42.2476 248.805 43.4636 249.242 44.3756 250.078 cv
45.2876 250.933 45.7436 252.073 45.7436 253.517 cv
45.7436 255.018 45.2686 256.177 44.3376 256.994 cv
43.4066 257.811 42.0956 258.21 40.4236 258.21 cv
39.8346 258.21 39.2456 258.153 38.6376 258.077 cv
38.0296 257.982 37.4216 257.849 36.7756 257.64 cv
36.7756 255.759 li
37.3266 256.063 37.8966 256.291 38.5046 256.443 cv
39.0936 256.595 39.7206 256.652 40.3856 256.652 cv
41.4496 256.652 42.3046 256.386 42.9316 255.816 cv
43.5396 255.246 43.8626 254.486 43.8626 253.517 cv
43.8626 252.567 43.5396 251.807 42.9316 251.237 cv
42.3046 250.667 41.4496 250.382 40.3856 250.382 cv
39.8916 250.382 39.3786 250.439 38.8846 250.553 cv
38.3906 250.667 37.8776 250.838 37.3646 251.066 cv
37.3646 244.112 li
f
54.4307 213.163 mo
50.9307 213.163 li
f
54.4307 213.163 mo
50.9307 213.163 li
@
11.1447 207.765 mo
10.1757 207.765 9.45369 208.24 8.95969 209.19 cv
8.46569 210.14 8.23769 211.565 8.23769 213.465 cv
8.23769 215.365 8.46569 216.79 8.95969 217.74 cv
9.45369 218.69 10.1757 219.165 11.1447 219.165 cv
12.1137 219.165 12.8357 218.69 13.3297 217.74 cv
13.8047 216.79 14.0517 215.365 14.0517 213.465 cv
14.0517 211.565 13.8047 210.14 13.3297 209.19 cv
12.8357 208.24 12.1137 207.765 11.1447 207.765 cv
11.1447 206.283 mo
12.6837 206.283 13.8617 206.91 14.6977 208.126 cv
15.5147 209.361 15.9327 211.147 15.9327 213.465 cv
15.9327 215.802 15.5147 217.588 14.6977 218.804 cv
13.8617 220.02 12.6837 220.628 11.1447 220.628 cv
9.58669 220.628 8.38969 220.02 7.57269 218.804 cv
6.75569 217.588 6.35669 215.802 6.35669 213.465 cv
6.35669 211.147 6.75569 209.361 7.57269 208.126 cv
8.38969 206.91 9.58669 206.283 11.1447 206.283 cv
f
19.2197 218.025 mo
21.1767 218.025 li
21.1767 220.381 li
19.2197 220.381 li
19.2197 218.025 li
f
26.8766 218.804 mo
33.4126 218.804 li
33.4126 220.381 li
24.6156 220.381 li
24.6156 218.804 li
25.3186 218.082 26.2876 217.094 27.5226 215.84 cv
28.7386 214.605 29.5176 213.807 29.8406 213.446 cv
30.4486 212.781 30.8666 212.211 31.0946 211.736 cv
31.3226 211.28 31.4556 210.805 31.4556 210.349 cv
31.4556 209.627 31.1896 209.019 30.6766 208.563 cv
30.1636 208.107 29.4986 207.86 28.6626 207.86 cv
28.0736 207.86 27.4466 207.974 26.8006 208.164 cv
26.1546 208.373 25.4516 208.677 24.7106 209.095 cv
24.7106 207.195 li
25.4706 206.891 26.1736 206.663 26.8196 206.511 cv
27.4656 206.359 28.0736 206.283 28.6246 206.283 cv
30.0496 206.283 31.1896 206.644 32.0446 207.366 cv
32.8996 208.088 33.3366 209.038 33.3366 210.235 cv
33.3366 210.805 33.2226 211.356 33.0136 211.85 cv
32.8046 212.363 32.4246 212.971 31.8546 213.655 cv
31.7026 213.845 31.2086 214.358 30.3726 215.213 cv
29.5366 216.068 28.3776 217.265 26.8766 218.804 cv
f
41.3546 207.765 mo
40.3856 207.765 39.6636 208.24 39.1696 209.19 cv
38.6756 210.14 38.4476 211.565 38.4476 213.465 cv
38.4476 215.365 38.6756 216.79 39.1696 217.74 cv
39.6636 218.69 40.3856 219.165 41.3546 219.165 cv
42.3236 219.165 43.0456 218.69 43.5396 217.74 cv
44.0146 216.79 44.2616 215.365 44.2616 213.465 cv
44.2616 211.565 44.0146 210.14 43.5396 209.19 cv
43.0456 208.24 42.3236 207.765 41.3546 207.765 cv
41.3546 206.283 mo
42.8936 206.283 44.0716 206.91 44.9076 208.126 cv
45.7246 209.361 46.1426 211.147 46.1426 213.465 cv
46.1426 215.802 45.7246 217.588 44.9076 218.804 cv
44.0716 220.02 42.8936 220.628 41.3546 220.628 cv
39.7966 220.628 38.5996 220.02 37.7826 218.804 cv
36.9656 217.588 36.5666 215.802 36.5666 213.465 cv
36.5666 211.147 36.9656 209.361 37.7826 208.126 cv
38.5996 206.91 39.7966 206.283 41.3546 206.283 cv
f
54.4307 175.581 mo
50.9307 175.581 li
f
54.4307 175.581 mo
50.9307 175.581 li
@
11.1447 170.184 mo
10.1757 170.184 9.45369 170.659 8.95969 171.609 cv
8.46569 172.559 8.23769 173.984 8.23769 175.884 cv
8.23769 177.784 8.46569 179.209 8.95969 180.159 cv
9.45369 181.109 10.1757 181.584 11.1447 181.584 cv
12.1137 181.584 12.8357 181.109 13.3297 180.159 cv
13.8047 179.209 14.0517 177.784 14.0517 175.884 cv
14.0517 173.984 13.8047 172.559 13.3297 171.609 cv
12.8357 170.659 12.1137 170.184 11.1447 170.184 cv
11.1447 168.702 mo
12.6837 168.702 13.8617 169.329 14.6977 170.545 cv
15.5147 171.78 15.9327 173.566 15.9327 175.884 cv
15.9327 178.221 15.5147 180.007 14.6977 181.223 cv
13.8617 182.439 12.6837 183.047 11.1447 183.047 cv
9.58669 183.047 8.38969 182.439 7.57269 181.223 cv
6.75569 180.007 6.35669 178.221 6.35669 175.884 cv
6.35669 173.566 6.75569 171.78 7.57269 170.545 cv
8.38969 169.329 9.58669 168.702 11.1447 168.702 cv
f
19.2197 180.444 mo
21.1767 180.444 li
21.1767 182.8 li
19.2197 182.8 li
19.2197 180.444 li
f
26.8766 181.223 mo
33.4126 181.223 li
33.4126 182.8 li
24.6156 182.8 li
24.6156 181.223 li
25.3186 180.501 26.2876 179.513 27.5226 178.259 cv
28.7386 177.024 29.5176 176.226 29.8406 175.865 cv
30.4486 175.2 30.8666 174.63 31.0946 174.155 cv
31.3226 173.699 31.4556 173.224 31.4556 172.768 cv
31.4556 172.046 31.1896 171.438 30.6766 170.982 cv
30.1636 170.526 29.4986 170.279 28.6626 170.279 cv
28.0736 170.279 27.4466 170.393 26.8006 170.583 cv
26.1546 170.792 25.4516 171.096 24.7106 171.514 cv
24.7106 169.614 li
25.4706 169.31 26.1736 169.082 26.8196 168.93 cv
27.4656 168.778 28.0736 168.702 28.6246 168.702 cv
30.0496 168.702 31.1896 169.063 32.0446 169.785 cv
32.8996 170.507 33.3366 171.457 33.3366 172.654 cv
33.3366 173.224 33.2226 173.775 33.0136 174.269 cv
32.8046 174.782 32.4246 175.39 31.8546 176.074 cv
31.7026 176.264 31.2086 176.777 30.3726 177.632 cv
29.5366 178.487 28.3776 179.684 26.8766 181.223 cv
f
37.3646 168.949 mo
44.7176 168.949 li
44.7176 170.526 li
39.0746 170.526 li
39.0746 173.927 li
39.3406 173.832 39.6256 173.756 39.8916 173.718 cv
40.1576 173.68 40.4426 173.642 40.7086 173.642 cv
42.2476 173.642 43.4636 174.079 44.3756 174.915 cv
45.2876 175.77 45.7436 176.91 45.7436 178.354 cv
45.7436 179.855 45.2686 181.014 44.3376 181.831 cv
43.4066 182.648 42.0956 183.047 40.4236 183.047 cv
39.8346 183.047 39.2456 182.99 38.6376 182.914 cv
38.0296 182.819 37.4216 182.686 36.7756 182.477 cv
36.7756 180.596 li
37.3266 180.9 37.8966 181.128 38.5046 181.28 cv
39.0936 181.432 39.7206 181.489 40.3856 181.489 cv
41.4496 181.489 42.3046 181.223 42.9316 180.653 cv
43.5396 180.083 43.8626 179.323 43.8626 178.354 cv
43.8626 177.404 43.5396 176.644 42.9316 176.074 cv
42.3046 175.504 41.4496 175.219 40.3856 175.219 cv
39.8916 175.219 39.3786 175.276 38.8846 175.39 cv
38.3906 175.504 37.8776 175.675 37.3646 175.903 cv
37.3646 168.949 li
f
54.4307 137.999 mo
50.9307 137.999 li
f
54.4307 137.999 mo
50.9307 137.999 li
@
11.1447 132.602 mo
10.1757 132.602 9.45369 133.077 8.95969 134.027 cv
8.46569 134.977 8.23769 136.402 8.23769 138.302 cv
8.23769 140.202 8.46569 141.627 8.95969 142.577 cv
9.45369 143.527 10.1757 144.002 11.1447 144.002 cv
12.1137 144.002 12.8357 143.527 13.3297 142.577 cv
13.8047 141.627 14.0517 140.202 14.0517 138.302 cv
14.0517 136.402 13.8047 134.977 13.3297 134.027 cv
12.8357 133.077 12.1137 132.602 11.1447 132.602 cv
11.1447 131.12 mo
12.6837 131.12 13.8617 131.747 14.6977 132.963 cv
15.5147 134.198 15.9327 135.984 15.9327 138.302 cv
15.9327 140.639 15.5147 142.425 14.6977 143.641 cv
13.8617 144.857 12.6837 145.465 11.1447 145.465 cv
9.58669 145.465 8.38969 144.857 7.57269 143.641 cv
6.75569 142.425 6.35669 140.639 6.35669 138.302 cv
6.35669 135.984 6.75569 134.198 7.57269 132.963 cv
8.38969 131.747 9.58669 131.12 11.1447 131.12 cv
f
19.2197 142.862 mo
21.1767 142.862 li
21.1767 145.218 li
19.2197 145.218 li
19.2197 142.862 li
f
30.9426 137.751 mo
31.8356 137.941 32.5386 138.34 33.0326 138.948 cv
33.5266 139.556 33.7926 140.316 33.7926 141.19 cv
33.7926 142.558 33.3176 143.622 32.3866 144.363 cv
31.4366 145.104 30.1066 145.465 28.3776 145.465 cv
27.7886 145.465 27.1806 145.408 26.5726 145.294 cv
25.9646 145.199 25.3186 145.028 24.6726 144.8 cv
24.6726 142.995 li
25.1856 143.299 25.7556 143.527 26.3826 143.679 cv
26.9906 143.831 27.6366 143.907 28.3206 143.907 cv
29.4986 143.907 30.3916 143.679 30.9996 143.223 cv
31.6076 142.767 31.9306 142.083 31.9306 141.19 cv
31.9306 140.392 31.6456 139.746 31.0756 139.29 cv
30.5056 138.834 29.7076 138.587 28.6816 138.587 cv
27.0666 138.587 li
27.0666 137.048 li
28.7576 137.048 li
29.6696 137.048 30.3726 136.877 30.8666 136.497 cv
31.3606 136.136 31.6076 135.604 31.6076 134.901 cv
31.6076 134.198 31.3416 133.647 30.8476 133.267 cv
30.3346 132.887 29.6126 132.697 28.6816 132.697 cv
28.1686 132.697 27.6176 132.754 27.0286 132.868 cv
26.4396 132.982 25.7936 133.153 25.0906 133.381 cv
25.0906 131.709 li
25.7936 131.519 26.4586 131.367 27.0856 131.272 cv
27.6936 131.177 28.2826 131.12 28.8526 131.12 cv
30.2586 131.12 31.3796 131.443 32.2156 132.089 cv
33.0516 132.735 33.4696 133.609 33.4696 134.711 cv
33.4696 135.471 33.2416 136.117 32.8046 136.649 cv
32.3676 137.181 31.7406 137.561 30.9426 137.751 cv
f
41.3546 132.602 mo
40.3856 132.602 39.6636 133.077 39.1696 134.027 cv
38.6756 134.977 38.4476 136.402 38.4476 138.302 cv
38.4476 140.202 38.6756 141.627 39.1696 142.577 cv
39.6636 143.527 40.3856 144.002 41.3546 144.002 cv
42.3236 144.002 43.0456 143.527 43.5396 142.577 cv
44.0146 141.627 44.2616 140.202 44.2616 138.302 cv
44.2616 136.402 44.0146 134.977 43.5396 134.027 cv
43.0456 133.077 42.3236 132.602 41.3546 132.602 cv
41.3546 131.12 mo
42.8936 131.12 44.0716 131.747 44.9076 132.963 cv
45.7246 134.198 46.1426 135.984 46.1426 138.302 cv
46.1426 140.639 45.7246 142.425 44.9076 143.641 cv
44.0716 144.857 42.8936 145.465 41.3546 145.465 cv
39.7966 145.465 38.5996 144.857 37.7826 143.641 cv
36.9656 142.425 36.5666 140.639 36.5666 138.302 cv
36.5666 135.984 36.9656 134.198 37.7826 132.963 cv
38.5996 131.747 39.7966 131.12 41.3546 131.12 cv
f
54.4307 100.418 mo
50.9307 100.418 li
f
54.4307 100.418 mo
50.9307 100.418 li
@
11.1447 95.0201 mo
10.1757 95.0201 9.45369 95.495 8.95969 96.445 cv
8.46569 97.3951 8.23769 98.82 8.23769 100.72 cv
8.23769 102.62 8.46569 104.045 8.95969 104.995 cv
9.45369 105.945 10.1757 106.42 11.1447 106.42 cv
12.1137 106.42 12.8357 105.945 13.3297 104.995 cv
13.8047 104.045 14.0517 102.62 14.0517 100.72 cv
14.0517 98.82 13.8047 97.3951 13.3297 96.445 cv
12.8357 95.495 12.1137 95.0201 11.1447 95.0201 cv
11.1447 93.538 mo
12.6837 93.538 13.8617 94.165 14.6977 95.381 cv
15.5147 96.616 15.9327 98.402 15.9327 100.72 cv
15.9327 103.057 15.5147 104.843 14.6977 106.059 cv
13.8617 107.275 12.6837 107.883 11.1447 107.883 cv
9.58669 107.883 8.38969 107.275 7.57269 106.059 cv
6.75569 104.843 6.35669 103.057 6.35669 100.72 cv
6.35669 98.402 6.75569 96.616 7.57269 95.381 cv
8.38969 94.165 9.58669 93.538 11.1447 93.538 cv
f
19.2197 105.28 mo
21.1767 105.28 li
21.1767 107.636 li
19.2197 107.636 li
19.2197 105.28 li
f
30.9426 100.169 mo
31.8356 100.359 32.5386 100.758 33.0326 101.366 cv
33.5266 101.974 33.7926 102.734 33.7926 103.608 cv
33.7926 104.976 33.3176 106.04 32.3866 106.781 cv
31.4366 107.522 30.1066 107.883 28.3776 107.883 cv
27.7886 107.883 27.1806 107.826 26.5726 107.712 cv
25.9646 107.617 25.3186 107.446 24.6726 107.218 cv
24.6726 105.413 li
25.1856 105.717 25.7556 105.945 26.3826 106.097 cv
26.9906 106.249 27.6366 106.325 28.3206 106.325 cv
29.4986 106.325 30.3916 106.097 30.9996 105.641 cv
31.6076 105.185 31.9306 104.501 31.9306 103.608 cv
31.9306 102.81 31.6456 102.164 31.0756 101.708 cv
30.5056 101.252 29.7076 101.005 28.6816 101.005 cv
27.0666 101.005 li
27.0666 99.466 li
28.7576 99.466 li
29.6696 99.466 30.3726 99.295 30.8666 98.915 cv
31.3606 98.554 31.6076 98.022 31.6076 97.319 cv
31.6076 96.616 31.3416 96.065 30.8476 95.685 cv
30.3346 95.305 29.6126 95.115 28.6816 95.115 cv
28.1686 95.115 27.6176 95.172 27.0286 95.286 cv
26.4396 95.4 25.7936 95.571 25.0906 95.799 cv
25.0906 94.127 li
25.7936 93.937 26.4586 93.785 27.0856 93.69 cv
27.6936 93.595 28.2826 93.538 28.8526 93.538 cv
30.2586 93.538 31.3796 93.861 32.2156 94.507 cv
33.0516 95.153 33.4696 96.027 33.4696 97.129 cv
33.4696 97.889 33.2416 98.535 32.8046 99.067 cv
32.3676 99.599 31.7406 99.979 30.9426 100.169 cv
f
37.3646 93.785 mo
44.7176 93.785 li
44.7176 95.362 li
39.0746 95.362 li
39.0746 98.763 li
39.3406 98.668 39.6256 98.592 39.8916 98.554 cv
40.1576 98.516 40.4426 98.478 40.7086 98.478 cv
42.2476 98.478 43.4636 98.915 44.3756 99.751 cv
45.2876 100.606 45.7436 101.746 45.7436 103.19 cv
45.7436 104.691 45.2686 105.85 44.3376 106.667 cv
43.4066 107.484 42.0956 107.883 40.4236 107.883 cv
39.8346 107.883 39.2456 107.826 38.6376 107.75 cv
38.0296 107.655 37.4216 107.522 36.7756 107.313 cv
36.7756 105.432 li
37.3266 105.736 37.8966 105.964 38.5046 106.116 cv
39.0936 106.268 39.7206 106.325 40.3856 106.325 cv
41.4496 106.325 42.3046 106.059 42.9316 105.489 cv
43.5396 104.919 43.8626 104.159 43.8626 103.19 cv
43.8626 102.24 43.5396 101.48 42.9316 100.91 cv
42.3046 100.34 41.4496 100.055 40.3856 100.055 cv
39.8916 100.055 39.3786 100.112 38.8846 100.226 cv
38.3906 100.34 37.8776 100.511 37.3646 100.739 cv
37.3646 93.785 li
f
54.4307 62.8361 mo
50.9307 62.8361 li
f
54.4307 62.8361 mo
50.9307 62.8361 li
@
11.1447 57.4391 mo
10.1757 57.4391 9.45369 57.9141 8.95969 58.8641 cv
8.46569 59.8141 8.23769 61.2391 8.23769 63.1391 cv
8.23769 65.0391 8.46569 66.4641 8.95969 67.4141 cv
9.45369 68.3641 10.1757 68.8391 11.1447 68.8391 cv
12.1137 68.8391 12.8357 68.3641 13.3297 67.4141 cv
13.8047 66.4641 14.0517 65.0391 14.0517 63.1391 cv
14.0517 61.2391 13.8047 59.8141 13.3297 58.8641 cv
12.8357 57.9141 12.1137 57.4391 11.1447 57.4391 cv
11.1447 55.9571 mo
12.6837 55.9571 13.8617 56.5841 14.6977 57.8001 cv
15.5147 59.0351 15.9327 60.8211 15.9327 63.1391 cv
15.9327 65.4761 15.5147 67.2621 14.6977 68.4781 cv
13.8617 69.6941 12.6837 70.3021 11.1447 70.3021 cv
9.58669 70.3021 8.38969 69.6941 7.57269 68.4781 cv
6.75569 67.2621 6.35669 65.4761 6.35669 63.1391 cv
6.35669 60.8211 6.75569 59.0351 7.57269 57.8001 cv
8.38969 56.5841 9.58669 55.9571 11.1447 55.9571 cv
f
19.2197 67.6991 mo
21.1767 67.6991 li
21.1767 70.0551 li
19.2197 70.0551 li
19.2197 67.6991 li
f
30.4106 57.8381 mo
25.6796 65.229 li
30.4106 65.229 li
30.4106 57.8381 li
29.9166 56.2041 mo
32.2726 56.2041 li
32.2726 65.229 li
34.2486 65.229 li
34.2486 66.7871 li
32.2726 66.7871 li
32.2726 70.0551 li
30.4106 70.0551 li
30.4106 66.7871 li
24.1596 66.7871 li
24.1596 64.9821 li
29.9166 56.2041 li
f
41.3546 57.4391 mo
40.3856 57.4391 39.6636 57.9141 39.1696 58.8641 cv
38.6756 59.8141 38.4476 61.2391 38.4476 63.1391 cv
38.4476 65.0391 38.6756 66.4641 39.1696 67.4141 cv
39.6636 68.3641 40.3856 68.8391 41.3546 68.8391 cv
42.3236 68.8391 43.0456 68.3641 43.5396 67.4141 cv
44.0146 66.4641 44.2616 65.0391 44.2616 63.1391 cv
44.2616 61.2391 44.0146 59.8141 43.5396 58.8641 cv
43.0456 57.9141 42.3236 57.4391 41.3546 57.4391 cv
41.3546 55.9571 mo
42.8936 55.9571 44.0716 56.5841 44.9076 57.8001 cv
45.7246 59.0351 46.1426 60.8211 46.1426 63.1391 cv
46.1426 65.4761 45.7246 67.2621 44.9076 68.4781 cv
44.0716 69.6941 42.8936 70.3021 41.3546 70.3021 cv
39.7966 70.3021 38.5996 69.6941 37.7826 68.4781 cv
36.9656 67.2621 36.5666 65.4761 36.5666 63.1391 cv
36.5666 60.8211 36.9656 59.0351 37.7826 57.8001 cv
38.5996 56.5841 39.7966 55.9571 41.3546 55.9571 cv
f
2 lc
0 lj
54.4307 288.326 mo
54.4307 62.836 li
@
286.104 288.326 mo
286.104 62.836 li
@
54.4307 288.326 mo
286.104 288.326 li
@
54.4307 62.8361 mo
286.104 62.8361 li
@
355.279 288.326 mo
586.952 288.326 li
586.952 62.836 li
355.279 62.836 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
365.809 457.444 mo
374.966 457.444 li
374.966 177.509 li
365.809 177.509 li
cp
f
1 lw
0 lc
365.809 457.444 mo
374.966 457.444 li
374.966 177.509 li
365.809 177.509 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
457.38 457.444 mo
466.537 457.444 li
466.537 163.168 li
457.38 163.168 li
cp
f
1 lw
0 lc
457.38 457.444 mo
466.537 457.444 li
466.537 163.168 li
457.38 163.168 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
548.95 457.444 mo
558.107 457.444 li
558.107 162.481 li
548.95 162.481 li
cp
f
1 lw
0 lc
548.95 457.444 mo
558.107 457.444 li
558.107 162.481 li
548.95 162.481 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
374.966 457.444 mo
384.124 457.444 li
384.124 153.455 li
374.966 153.455 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
374.966 457.444 mo
384.124 457.444 li
384.124 153.455 li
374.966 153.455 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
466.537 457.444 mo
475.694 457.444 li
475.694 150.744 li
466.537 150.744 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
466.537 457.444 mo
475.694 457.444 li
475.694 150.744 li
466.537 150.744 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
558.107 457.444 mo
567.264 457.444 li
567.264 152.283 li
558.107 152.283 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
558.107 457.444 mo
567.264 457.444 li
567.264 152.283 li
558.107 152.283 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
384.124 457.444 mo
393.281 457.444 li
393.281 73.4005 li
384.124 73.4005 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
384.124 457.444 mo
393.281 457.444 li
393.281 73.4005 li
384.124 73.4005 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
475.694 457.444 mo
484.851 457.444 li
484.851 150.845 li
475.694 150.845 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
475.694 457.444 mo
484.851 457.444 li
484.851 150.845 li
475.694 150.845 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 288.326 mo
586.952 288.326 li
586.952 62.8359 li
355.279 62.8359 li
355.279 288.326 li
clp
567.264 457.444 mo
576.421 457.444 li
576.421 145.744 li
567.264 145.744 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
567.264 457.444 mo
576.421 457.444 li
576.421 145.744 li
567.264 145.744 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
379.545 288.326 mo
379.545 291.826 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
379.545 288.326 mo
379.545 291.826 li
@
366.983 297.622 mo
364.571 304.156 li
369.395 304.156 li
366.983 297.622 li
365.975 295.876 mo
367.991 295.876 li
372.995 308.998 li
371.141 308.998 li
369.953 305.632 li
364.031 305.632 li
362.843 308.998 li
360.971 308.998 li
365.975 295.876 li
f
384.731 296.884 mo
384.731 298.756 li
384.119 298.216 383.489 297.802 382.805 297.514 cv
382.121 297.244 381.419 297.1 380.663 297.1 cv
379.151 297.1 377.999 297.568 377.207 298.486 cv
376.415 299.404 376.019 300.718 376.019 302.446 cv
376.019 304.174 376.415 305.506 377.207 306.424 cv
377.999 307.342 379.151 307.792 380.663 307.792 cv
381.419 307.792 382.121 307.666 382.805 307.378 cv
383.489 307.108 384.119 306.694 384.731 306.136 cv
384.731 307.99 li
384.101 308.422 383.435 308.728 382.751 308.926 cv
382.067 309.124 381.329 309.232 380.555 309.232 cv
378.575 309.232 377.009 308.638 375.857 307.432 cv
374.705 306.226 374.147 304.57 374.147 302.446 cv
374.147 300.34 374.705 298.684 375.857 297.46 cv
377.009 296.254 378.575 295.642 380.555 295.642 cv
381.347 295.642 382.085 295.75 382.769 295.948 cv
383.453 296.164 384.119 296.47 384.731 296.884 cv
f
397.295 296.884 mo
397.295 298.756 li
396.683 298.216 396.053 297.802 395.369 297.514 cv
394.685 297.244 393.983 297.1 393.227 297.1 cv
391.715 297.1 390.563 297.568 389.771 298.486 cv
388.979 299.404 388.583 300.718 388.583 302.446 cv
388.583 304.174 388.979 305.506 389.771 306.424 cv
390.563 307.342 391.715 307.792 393.227 307.792 cv
393.983 307.792 394.685 307.666 395.369 307.378 cv
396.053 307.108 396.683 306.694 397.295 306.136 cv
397.295 307.99 li
396.665 308.422 395.999 308.728 395.315 308.926 cv
394.631 309.124 393.893 309.232 393.119 309.232 cv
391.139 309.232 389.573 308.638 388.421 307.432 cv
387.269 306.226 386.711 304.57 386.711 302.446 cv
386.711 300.34 387.269 298.684 388.421 297.46 cv
389.573 296.254 391.139 295.642 393.119 295.642 cv
393.911 295.642 394.649 295.75 395.333 295.948 cv
396.017 296.164 396.683 296.47 397.295 296.884 cv
f
471.115 288.326 mo
471.115 291.826 li
f
471.115 288.326 mo
471.115 291.826 li
@
438.561 297.622 mo
436.149 304.156 li
440.973 304.156 li
438.561 297.622 li
437.553 295.876 mo
439.569 295.876 li
444.573 308.998 li
442.719 308.998 li
441.531 305.632 li
435.609 305.632 li
434.421 308.998 li
432.549 308.998 li
437.553 295.876 li
f
452.709 302.842 mo
453.087 302.986 453.465 303.256 453.825 303.67 cv
454.185 304.102 454.545 304.678 454.905 305.416 cv
456.705 308.998 li
454.797 308.998 li
453.123 305.632 li
452.691 304.768 452.259 304.174 451.863 303.886 cv
451.449 303.598 450.891 303.454 450.189 303.454 cv
448.263 303.454 li
448.263 308.998 li
446.481 308.998 li
446.481 295.876 li
450.495 295.876 li
451.989 295.876 453.105 296.2 453.843 296.812 cv
454.581 297.442 454.959 298.396 454.959 299.656 cv
454.959 300.484 454.761 301.186 454.383 301.726 cv
453.987 302.266 453.429 302.644 452.709 302.842 cv
448.263 297.334 mo
448.263 301.996 li
450.495 301.996 li
451.341 301.996 451.989 301.798 452.421 301.402 cv
452.853 301.006 453.087 300.43 453.087 299.656 cv
453.087 298.9 452.853 298.324 452.421 297.928 cv
451.989 297.532 451.341 297.334 450.495 297.334 cv
448.263 297.334 li
f
465.219 302.842 mo
465.597 302.986 465.975 303.256 466.335 303.67 cv
466.695 304.102 467.055 304.678 467.415 305.416 cv
469.215 308.998 li
467.307 308.998 li
465.633 305.632 li
465.201 304.768 464.769 304.174 464.373 303.886 cv
463.959 303.598 463.401 303.454 462.699 303.454 cv
460.773 303.454 li
460.773 308.998 li
458.991 308.998 li
458.991 295.876 li
463.005 295.876 li
464.499 295.876 465.615 296.2 466.353 296.812 cv
467.091 297.442 467.469 298.396 467.469 299.656 cv
467.469 300.484 467.271 301.186 466.893 301.726 cv
466.497 302.266 465.939 302.644 465.219 302.842 cv
460.773 297.334 mo
460.773 301.996 li
463.005 301.996 li
463.851 301.996 464.499 301.798 464.931 301.402 cv
465.363 301.006 465.597 300.43 465.597 299.656 cv
465.597 298.9 465.363 298.324 464.931 297.928 cv
464.499 297.532 463.851 297.334 463.005 297.334 cv
460.773 297.334 li
f
475.461 297.046 mo
474.543 297.046 473.859 297.496 473.391 298.396 cv
472.923 299.296 472.707 300.646 472.707 302.446 cv
472.707 304.246 472.923 305.596 473.391 306.496 cv
473.859 307.396 474.543 307.846 475.461 307.846 cv
476.379 307.846 477.063 307.396 477.531 306.496 cv
477.981 305.596 478.215 304.246 478.215 302.446 cv
478.215 300.646 477.981 299.296 477.531 298.396 cv
477.063 297.496 476.379 297.046 475.461 297.046 cv
475.461 295.642 mo
476.919 295.642 478.035 296.236 478.827 297.388 cv
479.601 298.558 479.997 300.25 479.997 302.446 cv
479.997 304.66 479.601 306.352 478.827 307.504 cv
478.035 308.656 476.919 309.232 475.461 309.232 cv
473.985 309.232 472.851 308.656 472.077 307.504 cv
471.303 306.352 470.925 304.66 470.925 302.446 cv
470.925 300.25 471.303 298.558 472.077 297.388 cv
472.851 296.236 473.985 295.642 475.461 295.642 cv
f
483.111 306.766 mo
484.965 306.766 li
484.965 308.998 li
483.111 308.998 li
483.111 306.766 li
f
492.633 297.046 mo
491.715 297.046 491.031 297.496 490.563 298.396 cv
490.095 299.296 489.879 300.646 489.879 302.446 cv
489.879 304.246 490.095 305.596 490.563 306.496 cv
491.031 307.396 491.715 307.846 492.633 307.846 cv
493.551 307.846 494.235 307.396 494.703 306.496 cv
495.153 305.596 495.387 304.246 495.387 302.446 cv
495.387 300.646 495.153 299.296 494.703 298.396 cv
494.235 297.496 493.551 297.046 492.633 297.046 cv
492.633 295.642 mo
494.091 295.642 495.207 296.236 495.999 297.388 cv
496.773 298.558 497.169 300.25 497.169 302.446 cv
497.169 304.66 496.773 306.352 495.999 307.504 cv
495.207 308.656 494.091 309.232 492.633 309.232 cv
491.157 309.232 490.023 308.656 489.249 307.504 cv
488.475 306.352 488.097 304.66 488.097 302.446 cv
488.097 300.25 488.475 298.558 489.249 297.388 cv
490.023 296.236 491.157 295.642 492.633 295.642 cv
f
500.301 295.876 mo
507.267 295.876 li
507.267 297.37 li
501.921 297.37 li
501.921 300.592 li
502.173 300.502 502.443 300.43 502.695 300.394 cv
502.947 300.358 503.217 300.322 503.469 300.322 cv
504.927 300.322 506.079 300.736 506.943 301.528 cv
507.807 302.338 508.239 303.418 508.239 304.786 cv
508.239 306.208 507.789 307.306 506.907 308.08 cv
506.025 308.854 504.783 309.232 503.199 309.232 cv
502.641 309.232 502.083 309.178 501.507 309.106 cv
500.931 309.016 500.355 308.89 499.743 308.692 cv
499.743 306.91 li
500.265 307.198 500.805 307.414 501.381 307.558 cv
501.939 307.702 502.533 307.756 503.163 307.756 cv
504.171 307.756 504.981 307.504 505.575 306.964 cv
506.151 306.424 506.457 305.704 506.457 304.786 cv
506.457 303.886 506.151 303.166 505.575 302.626 cv
504.981 302.086 504.171 301.816 503.163 301.816 cv
502.695 301.816 502.209 301.87 501.741 301.978 cv
501.273 302.086 500.787 302.248 500.301 302.464 cv
500.301 295.876 li
f
562.686 288.326 mo
562.686 291.826 li
f
562.686 288.326 mo
562.686 291.826 li
@
535.858 297.622 mo
533.446 304.156 li
538.27 304.156 li
535.858 297.622 li
534.85 295.876 mo
536.866 295.876 li
541.87 308.998 li
540.016 308.998 li
538.828 305.632 li
532.906 305.632 li
531.718 308.998 li
529.846 308.998 li
534.85 295.876 li
f
550.006 302.842 mo
550.384 302.986 550.762 303.256 551.122 303.67 cv
551.482 304.102 551.842 304.678 552.202 305.416 cv
554.002 308.998 li
552.094 308.998 li
550.42 305.632 li
549.988 304.768 549.556 304.174 549.16 303.886 cv
548.746 303.598 548.188 303.454 547.486 303.454 cv
545.56 303.454 li
545.56 308.998 li
543.778 308.998 li
543.778 295.876 li
547.792 295.876 li
549.286 295.876 550.402 296.2 551.14 296.812 cv
551.878 297.442 552.256 298.396 552.256 299.656 cv
552.256 300.484 552.058 301.186 551.68 301.726 cv
551.284 302.266 550.726 302.644 550.006 302.842 cv
545.56 297.334 mo
545.56 301.996 li
547.792 301.996 li
548.638 301.996 549.286 301.798 549.718 301.402 cv
550.15 301.006 550.384 300.43 550.384 299.656 cv
550.384 298.9 550.15 298.324 549.718 297.928 cv
549.286 297.532 548.638 297.334 547.792 297.334 cv
545.56 297.334 li
f
562.516 302.842 mo
562.894 302.986 563.272 303.256 563.632 303.67 cv
563.992 304.102 564.352 304.678 564.712 305.416 cv
566.512 308.998 li
564.604 308.998 li
562.93 305.632 li
562.498 304.768 562.066 304.174 561.67 303.886 cv
561.256 303.598 560.698 303.454 559.996 303.454 cv
558.07 303.454 li
558.07 308.998 li
556.288 308.998 li
556.288 295.876 li
560.302 295.876 li
561.796 295.876 562.912 296.2 563.65 296.812 cv
564.388 297.442 564.766 298.396 564.766 299.656 cv
564.766 300.484 564.568 301.186 564.19 301.726 cv
563.794 302.266 563.236 302.644 562.516 302.842 cv
558.07 297.334 mo
558.07 301.996 li
560.302 301.996 li
561.148 301.996 561.796 301.798 562.228 301.402 cv
562.66 301.006 562.894 300.43 562.894 299.656 cv
562.894 298.9 562.66 298.324 562.228 297.928 cv
561.796 297.532 561.148 297.334 560.302 297.334 cv
558.07 297.334 li
f
572.758 297.046 mo
571.84 297.046 571.156 297.496 570.688 298.396 cv
570.22 299.296 570.004 300.646 570.004 302.446 cv
570.004 304.246 570.22 305.596 570.688 306.496 cv
571.156 307.396 571.84 307.846 572.758 307.846 cv
573.676 307.846 574.36 307.396 574.828 306.496 cv
575.278 305.596 575.512 304.246 575.512 302.446 cv
575.512 300.646 575.278 299.296 574.828 298.396 cv
574.36 297.496 573.676 297.046 572.758 297.046 cv
572.758 295.642 mo
574.216 295.642 575.332 296.236 576.124 297.388 cv
576.898 298.558 577.294 300.25 577.294 302.446 cv
577.294 304.66 576.898 306.352 576.124 307.504 cv
575.332 308.656 574.216 309.232 572.758 309.232 cv
571.282 309.232 570.148 308.656 569.374 307.504 cv
568.6 306.352 568.222 304.66 568.222 302.446 cv
568.222 300.25 568.6 298.558 569.374 297.388 cv
570.148 296.236 571.282 295.642 572.758 295.642 cv
f
580.408 306.766 mo
582.262 306.766 li
582.262 308.998 li
580.408 308.998 li
580.408 306.766 li
f
586.438 307.504 mo
589.336 307.504 li
589.336 297.496 li
586.186 298.126 li
586.186 296.506 li
589.318 295.876 li
591.1 295.876 li
591.1 307.504 li
593.998 307.504 li
593.998 308.998 li
586.438 308.998 li
586.438 307.504 li
f
406.915 316.762 mo
405.991 318.358 405.319 319.912 404.878 321.445 cv
404.416 322.978 404.206 324.532 404.206 326.107 cv
404.206 327.703 404.416 329.257 404.878 330.79 cv
405.319 332.344 405.991 333.877 406.915 335.452 cv
405.277 335.452 li
404.248 333.835 403.471 332.281 402.967 330.727 cv
402.463 329.173 402.211 327.64 402.211 326.107 cv
402.211 324.595 402.463 323.062 402.967 321.508 cv
403.471 319.954 404.227 318.379 405.277 316.762 cv
406.915 316.762 li
f
418.822 326.968 mo
418.822 325.582 418.528 324.511 417.961 323.713 cv
417.373 322.915 416.596 322.516 415.609 322.516 cv
414.601 322.516 413.824 322.915 413.257 323.713 cv
412.669 324.511 412.396 325.582 412.396 326.968 cv
412.396 328.354 412.669 329.446 413.257 330.244 cv
413.824 331.042 414.601 331.42 415.609 331.42 cv
416.596 331.42 417.373 331.042 417.961 330.244 cv
418.528 329.446 418.822 328.354 418.822 326.968 cv
412.396 322.957 mo
412.774 322.285 413.278 321.781 413.887 321.445 cv
414.496 321.109 415.231 320.941 416.071 320.941 cv
417.457 320.941 418.591 321.508 419.473 322.6 cv
420.334 323.713 420.775 325.162 420.775 326.968 cv
420.775 328.774 420.334 330.244 419.473 331.336 cv
418.591 332.428 417.457 332.974 416.071 332.974 cv
415.231 332.974 414.496 332.806 413.887 332.491 cv
413.278 332.176 412.774 331.672 412.396 330.979 cv
412.396 332.701 li
410.506 332.701 li
410.506 316.741 li
412.396 316.741 li
412.396 322.957 li
f
423.61 316.762 mo
425.248 316.762 li
426.256 318.379 427.033 319.954 427.537 321.508 cv
428.041 323.062 428.314 324.595 428.314 326.107 cv
428.314 327.64 428.041 329.173 427.537 330.727 cv
427.033 332.281 426.256 333.835 425.248 335.452 cv
423.61 335.452 li
424.513 333.877 425.185 332.344 425.647 330.79 cv
426.088 329.257 426.319 327.703 426.319 326.107 cv
426.319 324.532 426.088 322.978 425.647 321.445 cv
425.185 319.912 424.513 318.358 423.61 316.762 cv
f
432.178 317.392 mo
440.977 317.392 li
440.977 319.135 li
434.257 319.135 li
434.257 323.65 li
440.326 323.65 li
440.326 325.393 li
434.257 325.393 li
434.257 332.701 li
432.178 332.701 li
432.178 317.392 li
f
443.223 326.107 mo
448.746 326.107 li
448.746 327.787 li
443.223 327.787 li
443.223 326.107 li
f
460.695 323.419 mo
461.157 322.579 461.724 321.97 462.375 321.55 cv
463.026 321.151 463.803 320.941 464.706 320.941 cv
465.882 320.941 466.806 321.361 467.457 322.201 cv
468.108 323.041 468.444 324.238 468.444 325.771 cv
468.444 332.701 li
466.554 332.701 li
466.554 325.834 li
466.554 324.742 466.344 323.923 465.966 323.377 cv
465.567 322.852 464.979 322.579 464.181 322.579 cv
463.194 322.579 462.417 322.915 461.85 323.566 cv
461.283 324.217 461.01 325.099 461.01 326.212 cv
461.01 332.701 li
459.12 332.701 li
459.12 325.834 li
459.12 324.742 458.91 323.923 458.532 323.377 cv
458.133 322.852 457.524 322.579 456.726 322.579 cv
455.76 322.579 454.983 322.915 454.416 323.566 cv
453.849 324.217 453.576 325.099 453.576 326.212 cv
453.576 332.701 li
451.686 332.701 li
451.686 321.214 li
453.576 321.214 li
453.576 322.999 li
453.996 322.306 454.521 321.781 455.13 321.445 cv
455.718 321.109 456.432 320.941 457.272 320.941 cv
458.112 320.941 458.805 321.151 459.393 321.571 cv
459.981 321.991 460.401 322.621 460.695 323.419 cv
f
482.031 326.485 mo
482.031 327.409 li
473.358 327.409 li
473.442 328.711 473.82 329.719 474.534 330.391 cv
475.227 331.063 476.193 331.399 477.453 331.399 cv
478.167 331.399 478.881 331.315 479.553 331.147 cv
480.225 330.979 480.918 330.706 481.59 330.328 cv
481.59 332.113 li
480.918 332.407 480.225 332.638 479.511 332.764 cv
478.797 332.89 478.062 332.974 477.348 332.974 cv
475.5 332.974 474.051 332.449 472.98 331.399 cv
471.909 330.349 471.384 328.9 471.384 327.073 cv
471.384 325.204 471.888 323.713 472.896 322.6 cv
473.904 321.508 475.29 320.941 477.012 320.941 cv
478.566 320.941 479.784 321.445 480.687 322.432 cv
481.569 323.44 482.031 324.784 482.031 326.485 cv
480.141 325.939 mo
480.12 324.91 479.826 324.091 479.28 323.461 cv
478.713 322.852 477.957 322.537 477.033 322.537 cv
475.983 322.537 475.143 322.852 474.513 323.44 cv
473.883 324.028 473.505 324.868 473.421 325.939 cv
480.141 325.939 li
f
490.347 326.926 mo
488.814 326.926 487.764 327.115 487.176 327.451 cv
486.588 327.808 486.294 328.396 486.294 329.236 cv
486.294 329.908 486.504 330.454 486.945 330.832 cv
487.386 331.231 487.995 331.42 488.751 331.42 cv
489.801 331.42 490.641 331.063 491.271 330.307 cv
491.901 329.572 492.216 328.585 492.216 327.346 cv
492.216 326.926 li
490.347 326.926 li
494.106 326.149 mo
494.106 332.701 li
492.216 332.701 li
492.216 330.958 li
491.775 331.672 491.229 332.176 490.599 332.491 cv
489.969 332.806 489.171 332.974 488.247 332.974 cv
487.071 332.974 486.126 332.659 485.433 332.008 cv
484.74 331.357 484.404 330.475 484.404 329.362 cv
484.404 328.081 484.824 327.115 485.706 326.443 cv
486.567 325.792 487.848 325.456 489.57 325.456 cv
492.216 325.456 li
492.216 325.267 li
492.216 324.406 491.922 323.734 491.355 323.251 cv
490.788 322.789 489.99 322.537 488.961 322.537 cv
488.289 322.537 487.659 322.621 487.029 322.789 cv
486.399 322.957 485.811 323.188 485.244 323.482 cv
485.244 321.739 li
485.916 321.487 486.588 321.277 487.239 321.151 cv
487.89 321.025 488.52 320.941 489.15 320.941 cv
490.809 320.941 492.048 321.382 492.867 322.243 cv
493.686 323.104 494.106 324.406 494.106 326.149 cv
f
505.321 321.55 mo
505.321 323.335 li
504.775 323.083 504.229 322.873 503.662 322.726 cv
503.074 322.6 502.486 322.516 501.877 322.516 cv
500.932 322.516 500.218 322.663 499.756 322.957 cv
499.294 323.251 499.063 323.671 499.063 324.238 cv
499.063 324.679 499.231 325.015 499.567 325.267 cv
499.903 325.519 500.575 325.771 501.583 325.981 cv
502.234 326.128 li
503.578 326.422 504.523 326.842 505.09 327.346 cv
505.636 327.871 505.93 328.606 505.93 329.53 cv
505.93 330.601 505.51 331.441 504.67 332.05 cv
503.83 332.68 502.654 332.974 501.184 332.974 cv
500.554 332.974 499.924 332.911 499.252 332.806 cv
498.58 332.701 497.887 332.533 497.152 332.281 cv
497.152 330.328 li
497.845 330.706 498.538 330.979 499.21 331.147 cv
499.882 331.336 500.554 331.42 501.226 331.42 cv
502.108 331.42 502.801 331.273 503.284 330.979 cv
503.746 330.685 503.998 330.244 503.998 329.677 cv
503.998 329.173 503.809 328.774 503.473 328.501 cv
503.137 328.228 502.381 327.955 501.205 327.703 cv
500.554 327.556 li
499.378 327.304 498.517 326.926 498.013 326.422 cv
497.488 325.918 497.236 325.225 497.236 324.322 cv
497.236 323.251 497.614 322.411 498.37 321.823 cv
499.126 321.235 500.218 320.941 501.646 320.941 cv
502.339 320.941 502.99 321.004 503.62 321.109 cv
504.229 321.214 504.796 321.361 505.321 321.55 cv
f
508.743 328.165 mo
508.743 321.214 li
510.633 321.214 li
510.633 328.102 li
510.633 329.194 510.843 329.992 511.263 330.538 cv
511.683 331.084 512.313 331.357 513.174 331.357 cv
514.182 331.357 515.001 331.042 515.589 330.391 cv
516.177 329.74 516.471 328.858 516.471 327.724 cv
516.471 321.214 li
518.361 321.214 li
518.361 332.701 li
516.471 332.701 li
516.471 330.937 li
516.009 331.651 515.463 332.155 514.875 332.491 cv
514.266 332.806 513.573 332.974 512.775 332.974 cv
511.452 332.974 510.444 332.575 509.772 331.756 cv
509.079 330.958 508.743 329.761 508.743 328.165 cv
513.489 320.941 mo
513.489 320.941 li
f
528.904 322.978 mo
528.694 322.852 528.463 322.768 528.211 322.705 cv
527.958 322.663 527.686 322.621 527.392 322.621 cv
526.32 322.621 525.502 322.978 524.935 323.671 cv
524.346 324.364 524.074 325.351 524.074 326.653 cv
524.074 332.701 li
522.184 332.701 li
522.184 321.214 li
524.074 321.214 li
524.074 322.999 li
524.452 322.306 524.977 321.781 525.607 321.445 cv
526.237 321.109 527.014 320.941 527.938 320.941 cv
528.064 320.941 528.211 320.962 528.379 320.962 cv
528.526 320.983 528.694 321.004 528.904 321.046 cv
528.904 322.978 li
f
540.705 326.485 mo
540.705 327.409 li
532.032 327.409 li
532.116 328.711 532.494 329.719 533.208 330.391 cv
533.901 331.063 534.867 331.399 536.127 331.399 cv
536.841 331.399 537.555 331.315 538.227 331.147 cv
538.899 330.979 539.592 330.706 540.264 330.328 cv
540.264 332.113 li
539.592 332.407 538.899 332.638 538.185 332.764 cv
537.471 332.89 536.736 332.974 536.022 332.974 cv
534.174 332.974 532.725 332.449 531.654 331.399 cv
530.583 330.349 530.058 328.9 530.058 327.073 cv
530.058 325.204 530.562 323.713 531.57 322.6 cv
532.578 321.508 533.964 320.941 535.686 320.941 cv
537.24 320.941 538.458 321.445 539.361 322.432 cv
540.243 323.44 540.705 324.784 540.705 326.485 cv
538.815 325.939 mo
538.794 324.91 538.5 324.091 537.954 323.461 cv
537.387 322.852 536.631 322.537 535.707 322.537 cv
534.657 322.537 533.817 322.852 533.187 323.44 cv
532.557 324.028 532.179 324.868 532.095 325.939 cv
538.815 325.939 li
f
355.279 288.326 mo
351.779 288.326 li
f
355.279 288.326 mo
351.779 288.326 li
@
324.087 282.929 mo
323.118 282.929 322.396 283.404 321.902 284.354 cv
321.408 285.304 321.18 286.729 321.18 288.629 cv
321.18 290.529 321.408 291.954 321.902 292.904 cv
322.396 293.854 323.118 294.329 324.087 294.329 cv
325.056 294.329 325.778 293.854 326.272 292.904 cv
326.747 291.954 326.994 290.529 326.994 288.629 cv
326.994 286.729 326.747 285.304 326.272 284.354 cv
325.778 283.404 325.056 282.929 324.087 282.929 cv
324.087 281.447 mo
325.626 281.447 326.804 282.074 327.64 283.29 cv
328.457 284.525 328.875 286.311 328.875 288.629 cv
328.875 290.966 328.457 292.752 327.64 293.968 cv
326.804 295.184 325.626 295.792 324.087 295.792 cv
322.529 295.792 321.332 295.184 320.515 293.968 cv
319.698 292.752 319.299 290.966 319.299 288.629 cv
319.299 286.311 319.698 284.525 320.515 283.29 cv
321.332 282.074 322.529 281.447 324.087 281.447 cv
f
332.162 293.189 mo
334.119 293.189 li
334.119 295.545 li
332.162 295.545 li
332.162 293.189 li
f
343.885 288.078 mo
344.778 288.268 345.481 288.667 345.975 289.275 cv
346.469 289.883 346.735 290.643 346.735 291.517 cv
346.735 292.885 346.26 293.949 345.329 294.69 cv
344.379 295.431 343.049 295.792 341.32 295.792 cv
340.731 295.792 340.123 295.735 339.515 295.621 cv
338.907 295.526 338.261 295.355 337.615 295.127 cv
337.615 293.322 li
338.128 293.626 338.698 293.854 339.325 294.006 cv
339.933 294.158 340.579 294.234 341.263 294.234 cv
342.441 294.234 343.334 294.006 343.942 293.55 cv
344.55 293.094 344.873 292.41 344.873 291.517 cv
344.873 290.719 344.588 290.073 344.018 289.617 cv
343.448 289.161 342.65 288.914 341.624 288.914 cv
340.009 288.914 li
340.009 287.375 li
341.7 287.375 li
342.612 287.375 343.315 287.204 343.809 286.824 cv
344.303 286.463 344.55 285.931 344.55 285.228 cv
344.55 284.525 344.284 283.974 343.79 283.594 cv
343.277 283.214 342.555 283.024 341.624 283.024 cv
341.111 283.024 340.56 283.081 339.971 283.195 cv
339.382 283.309 338.736 283.48 338.033 283.708 cv
338.033 282.036 li
338.736 281.846 339.401 281.694 340.028 281.599 cv
340.636 281.504 341.225 281.447 341.795 281.447 cv
343.201 281.447 344.322 281.77 345.158 282.416 cv
345.994 283.062 346.412 283.936 346.412 285.038 cv
346.412 285.798 346.184 286.444 345.747 286.976 cv
345.31 287.508 344.683 287.888 343.885 288.078 cv
f
355.279 231.954 mo
351.779 231.954 li
f
355.279 231.954 mo
351.779 231.954 li
@
324.087 226.556 mo
323.118 226.556 322.396 227.031 321.902 227.981 cv
321.408 228.931 321.18 230.356 321.18 232.256 cv
321.18 234.156 321.408 235.581 321.902 236.531 cv
322.396 237.481 323.118 237.956 324.087 237.956 cv
325.056 237.956 325.778 237.481 326.272 236.531 cv
326.747 235.581 326.994 234.156 326.994 232.256 cv
326.994 230.356 326.747 228.931 326.272 227.981 cv
325.778 227.031 325.056 226.556 324.087 226.556 cv
324.087 225.074 mo
325.626 225.074 326.804 225.701 327.64 226.917 cv
328.457 228.152 328.875 229.938 328.875 232.256 cv
328.875 234.593 328.457 236.379 327.64 237.595 cv
326.804 238.811 325.626 239.419 324.087 239.419 cv
322.529 239.419 321.332 238.811 320.515 237.595 cv
319.698 236.379 319.299 234.593 319.299 232.256 cv
319.299 229.938 319.698 228.152 320.515 226.917 cv
321.332 225.701 322.529 225.074 324.087 225.074 cv
f
332.162 236.816 mo
334.119 236.816 li
334.119 239.172 li
332.162 239.172 li
332.162 236.816 li
f
343.353 226.955 mo
338.622 234.346 li
343.353 234.346 li
343.353 226.955 li
342.859 225.321 mo
345.215 225.321 li
345.215 234.346 li
347.191 234.346 li
347.191 235.904 li
345.215 235.904 li
345.215 239.172 li
343.353 239.172 li
343.353 235.904 li
337.102 235.904 li
337.102 234.099 li
342.859 225.321 li
f
355.279 175.581 mo
351.779 175.581 li
f
355.279 175.581 mo
351.779 175.581 li
@
324.087 170.184 mo
323.118 170.184 322.396 170.659 321.902 171.609 cv
321.408 172.559 321.18 173.984 321.18 175.884 cv
321.18 177.784 321.408 179.209 321.902 180.159 cv
322.396 181.109 323.118 181.584 324.087 181.584 cv
325.056 181.584 325.778 181.109 326.272 180.159 cv
326.747 179.209 326.994 177.784 326.994 175.884 cv
326.994 173.984 326.747 172.559 326.272 171.609 cv
325.778 170.659 325.056 170.184 324.087 170.184 cv
324.087 168.702 mo
325.626 168.702 326.804 169.329 327.64 170.545 cv
328.457 171.78 328.875 173.566 328.875 175.884 cv
328.875 178.221 328.457 180.007 327.64 181.223 cv
326.804 182.439 325.626 183.047 324.087 183.047 cv
322.529 183.047 321.332 182.439 320.515 181.223 cv
319.698 180.007 319.299 178.221 319.299 175.884 cv
319.299 173.566 319.698 171.78 320.515 170.545 cv
321.332 169.329 322.529 168.702 324.087 168.702 cv
f
332.162 180.444 mo
334.119 180.444 li
334.119 182.8 li
332.162 182.8 li
332.162 180.444 li
f
338.223 168.949 mo
345.576 168.949 li
345.576 170.526 li
339.933 170.526 li
339.933 173.927 li
340.199 173.832 340.484 173.756 340.75 173.718 cv
341.016 173.68 341.301 173.642 341.567 173.642 cv
343.106 173.642 344.322 174.079 345.234 174.915 cv
346.146 175.77 346.602 176.91 346.602 178.354 cv
346.602 179.855 346.127 181.014 345.196 181.831 cv
344.265 182.648 342.954 183.047 341.282 183.047 cv
340.693 183.047 340.104 182.99 339.496 182.914 cv
338.888 182.819 338.28 182.686 337.634 182.477 cv
337.634 180.596 li
338.185 180.9 338.755 181.128 339.363 181.28 cv
339.952 181.432 340.579 181.489 341.244 181.489 cv
342.308 181.489 343.163 181.223 343.79 180.653 cv
344.398 180.083 344.721 179.323 344.721 178.354 cv
344.721 177.404 344.398 176.644 343.79 176.074 cv
343.163 175.504 342.308 175.219 341.244 175.219 cv
340.75 175.219 340.237 175.276 339.743 175.39 cv
339.249 175.504 338.736 175.675 338.223 175.903 cv
338.223 168.949 li
f
355.279 119.209 mo
351.779 119.209 li
f
355.279 119.209 mo
351.779 119.209 li
@
324.087 113.811 mo
323.118 113.811 322.396 114.286 321.902 115.236 cv
321.408 116.186 321.18 117.611 321.18 119.511 cv
321.18 121.411 321.408 122.836 321.902 123.786 cv
322.396 124.736 323.118 125.211 324.087 125.211 cv
325.056 125.211 325.778 124.736 326.272 123.786 cv
326.747 122.836 326.994 121.411 326.994 119.511 cv
326.994 117.611 326.747 116.186 326.272 115.236 cv
325.778 114.286 325.056 113.811 324.087 113.811 cv
324.087 112.329 mo
325.626 112.329 326.804 112.956 327.64 114.172 cv
328.457 115.407 328.875 117.193 328.875 119.511 cv
328.875 121.848 328.457 123.634 327.64 124.85 cv
326.804 126.066 325.626 126.674 324.087 126.674 cv
322.529 126.674 321.332 126.066 320.515 124.85 cv
319.698 123.634 319.299 121.848 319.299 119.511 cv
319.299 117.193 319.698 115.407 320.515 114.172 cv
321.332 112.956 322.529 112.329 324.087 112.329 cv
f
332.162 124.071 mo
334.119 124.071 li
334.119 126.427 li
332.162 126.427 li
332.162 124.071 li
f
342.441 118.751 mo
341.605 118.751 340.94 119.055 340.446 119.625 cv
339.952 120.195 339.705 120.993 339.705 121.981 cv
339.705 122.988 339.952 123.786 340.446 124.356 cv
340.94 124.926 341.605 125.211 342.441 125.211 cv
343.277 125.211 343.942 124.926 344.436 124.356 cv
344.93 123.786 345.177 122.988 345.177 121.981 cv
345.177 120.993 344.93 120.195 344.436 119.625 cv
343.942 119.055 343.277 118.751 342.441 118.751 cv
346.165 112.88 mo
346.165 114.59 li
345.69 114.362 345.215 114.191 344.74 114.077 cv
344.246 113.963 343.771 113.906 343.315 113.906 cv
342.061 113.906 341.111 114.324 340.465 115.16 cv
339.819 115.996 339.439 117.269 339.363 118.941 cv
339.724 118.409 340.18 117.991 340.731 117.706 cv
341.282 117.421 341.89 117.269 342.555 117.269 cv
343.942 117.269 345.044 117.706 345.842 118.542 cv
346.64 119.378 347.058 120.537 347.058 121.981 cv
347.058 123.406 346.621 124.546 345.785 125.401 cv
344.949 126.256 343.828 126.674 342.441 126.674 cv
340.845 126.674 339.61 126.066 338.774 124.85 cv
337.919 123.634 337.501 121.848 337.501 119.511 cv
337.501 117.326 338.014 115.578 339.059 114.286 cv
340.085 112.994 341.491 112.329 343.239 112.329 cv
343.695 112.329 344.17 112.386 344.664 112.462 cv
345.139 112.557 345.633 112.69 346.165 112.88 cv
f
355.279 62.8361 mo
351.779 62.8361 li
f
355.279 62.8361 mo
351.779 62.8361 li
@
324.087 57.4391 mo
323.118 57.4391 322.396 57.9141 321.902 58.8641 cv
321.408 59.8141 321.18 61.2391 321.18 63.1391 cv
321.18 65.0391 321.408 66.4641 321.902 67.4141 cv
322.396 68.3641 323.118 68.8391 324.087 68.8391 cv
325.056 68.8391 325.778 68.3641 326.272 67.4141 cv
326.747 66.4641 326.994 65.0391 326.994 63.1391 cv
326.994 61.2391 326.747 59.8141 326.272 58.8641 cv
325.778 57.9141 325.056 57.4391 324.087 57.4391 cv
324.087 55.9571 mo
325.626 55.9571 326.804 56.5841 327.64 57.8001 cv
328.457 59.0351 328.875 60.8211 328.875 63.1391 cv
328.875 65.4761 328.457 67.2621 327.64 68.4781 cv
326.804 69.6941 325.626 70.3021 324.087 70.3021 cv
322.529 70.3021 321.332 69.6941 320.515 68.4781 cv
319.698 67.2621 319.299 65.4761 319.299 63.1391 cv
319.299 60.8211 319.698 59.0351 320.515 57.8001 cv
321.332 56.5841 322.529 55.9571 324.087 55.9571 cv
f
332.162 67.6991 mo
334.119 67.6991 li
334.119 70.0551 li
332.162 70.0551 li
332.162 67.6991 li
f
337.729 56.2041 mo
346.64 56.2041 li
346.64 57.0021 li
341.605 70.0551 li
339.648 70.0551 li
344.379 57.7811 li
337.729 57.7811 li
337.729 56.2041 li
f
2 lc
0 lj
355.279 288.326 mo
355.279 62.836 li
@
586.952 288.326 mo
586.952 62.836 li
@
355.279 288.326 mo
586.952 288.326 li
@
355.279 62.8361 mo
586.952 62.8361 li
@
465.131 28.7047 mo
153.1 28.7047 li
152.177 28.7028 151.579 28.4771 151.204 28.1009 cv
150.827 27.7253 150.602 27.1277 150.6 26.2046 cv
150.6 5.68863 li
150.602 4.76548 150.827 4.16812 151.204 3.79224 cv
151.579 3.41607 152.177 3.19043 153.1 3.18876 cv
465.131 3.18876 li
466.054 3.19043 466.651 3.41607 467.027 3.79224 cv
467.403 4.16812 467.629 4.76548 467.631 5.68863 cv
467.631 26.2046 li
467.629 27.1277 467.403 27.7253 467.027 28.1009 cv
466.651 28.4771 466.054 28.7028 465.131 28.7047 cv
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
465.142 29.7047 mo
465.138 29.7047 465.135 29.7047 465.131 29.7046 cv
153.1 29.7046 li
153.096 29.7047 153.092 29.7047 153.089 29.7047 cv
152.017 29.7047 151.118 29.4298 150.496 28.8082 cv
149.872 28.1841 149.598 27.2816 149.6 26.2046 cv
149.6 5.68863 li
149.598 4.61189 149.872 3.70933 150.496 3.08498 cv
151.119 2.4631 152.018 2.18853 153.09 2.18853 cv
153.093 2.18853 153.097 2.18853 153.1 2.18854 cv
465.131 2.18854 li
465.134 2.18853 465.137 2.18853 465.141 2.18853 cv
466.213 2.18853 467.112 2.46306 467.735 3.08498 cv
468.358 3.70933 468.633 4.61189 468.631 5.68863 cv
468.631 26.2046 li
468.633 27.2816 468.358 28.1841 467.735 28.8082 cv
467.112 29.4298 466.214 29.7047 465.142 29.7047 cv
153.1 28.7047 mo
465.131 28.7047 li
466.054 28.7028 466.651 28.4771 467.027 28.1009 cv
467.403 27.7253 467.629 27.1277 467.631 26.2046 cv
467.631 5.68863 li
467.629 4.76548 467.403 4.16812 467.027 3.79224 cv
466.651 3.41607 466.054 3.19043 465.131 3.18876 cv
153.1 3.18876 li
152.177 3.19043 151.579 3.41607 151.204 3.79224 cv
150.827 4.16812 150.602 4.76548 150.6 5.68863 cv
150.6 26.2046 li
150.602 27.1277 150.827 27.7253 151.204 28.1009 cv
151.579 28.4771 152.177 28.7028 153.1 28.7047 cv
153.1 28.7047 li
.69482 .6318 .621515 .583612 cmyk
f
156.1 20.0797 mo
186.1 20.0797 li
186.1 9.57965 li
156.1 9.57965 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
156.1 20.0797 mo
186.1 20.0797 li
186.1 9.57965 li
156.1 9.57965 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
199.57 9.14502 mo
201.775 9.14502 li
204.565 16.585 li
207.37 9.14502 li
209.575 9.14502 li
209.575 20.08 li
208.135 20.08 li
208.135 10.48 li
205.315 17.98 li
203.83 17.98 li
201.01 10.48 li
201.01 20.08 li
199.57 20.08 li
199.57 9.14502 li
f
212.515 9.14502 mo
214 9.14502 li
214 18.835 li
219.325 18.835 li
219.325 20.08 li
212.515 20.08 li
212.515 9.14502 li
f
220.87 9.14502 mo
222.355 9.14502 li
222.355 13.765 li
227.26 9.14502 li
229.165 9.14502 li
223.735 14.245 li
229.555 20.08 li
227.605 20.08 li
222.355 14.815 li
222.355 20.08 li
220.87 20.08 li
220.87 9.14502 li
f
230.71 9.14502 mo
232.705 9.14502 li
237.55 18.295 li
237.55 9.14502 li
238.99 9.14502 li
238.99 20.08 li
236.995 20.08 li
232.15 10.93 li
232.15 20.08 li
230.71 20.08 li
230.71 9.14502 li
f
241.93 9.14502 mo
243.925 9.14502 li
248.77 18.295 li
248.77 9.14502 li
250.21 9.14502 li
250.21 20.08 li
248.215 20.08 li
243.37 10.93 li
243.37 20.08 li
241.93 20.08 li
241.93 9.14502 li
f
281.678 20.0797 mo
311.678 20.0797 li
311.678 9.57965 li
281.678 9.57965 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
281.678 20.0797 mo
311.678 20.0797 li
311.678 9.57965 li
281.678 9.57965 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
330.338 14.95 mo
330.653 15.07 330.968 15.295 331.268 15.64 cv
331.568 16 331.868 16.48 332.168 17.095 cv
333.668 20.08 li
332.078 20.08 li
330.683 17.275 li
330.323 16.555 329.963 16.06 329.633 15.82 cv
329.288 15.58 328.823 15.46 328.238 15.46 cv
326.633 15.46 li
326.633 20.08 li
325.148 20.08 li
325.148 9.14502 li
328.493 9.14502 li
329.738 9.14502 330.668 9.41502 331.283 9.92502 cv
331.898 10.45 332.213 11.245 332.213 12.295 cv
332.213 12.985 332.048 13.57 331.733 14.02 cv
331.403 14.47 330.938 14.785 330.338 14.95 cv
326.633 10.36 mo
326.633 14.245 li
328.493 14.245 li
329.198 14.245 329.738 14.08 330.098 13.75 cv
330.458 13.42 330.653 12.94 330.653 12.295 cv
330.653 11.665 330.458 11.185 330.098 10.855 cv
329.738 10.525 329.198 10.36 328.493 10.36 cv
326.633 10.36 li
f
334.598 9.14502 mo
336.098 9.14502 li
338.393 18.385 li
340.688 9.14502 li
342.353 9.14502 li
344.648 18.385 li
346.943 9.14502 li
348.443 9.14502 li
345.698 20.08 li
343.838 20.08 li
341.528 10.585 li
339.203 20.08 li
337.343 20.08 li
334.598 9.14502 li
f
355.598 14.95 mo
355.913 15.07 356.228 15.295 356.528 15.64 cv
356.828 16 357.128 16.48 357.428 17.095 cv
358.928 20.08 li
357.338 20.08 li
355.943 17.275 li
355.583 16.555 355.223 16.06 354.893 15.82 cv
354.548 15.58 354.083 15.46 353.498 15.46 cv
351.893 15.46 li
351.893 20.08 li
350.408 20.08 li
350.408 9.14502 li
353.753 9.14502 li
354.998 9.14502 355.928 9.41502 356.543 9.92502 cv
357.158 10.45 357.473 11.245 357.473 12.295 cv
357.473 12.985 357.308 13.57 356.993 14.02 cv
356.663 14.47 356.198 14.785 355.598 14.95 cv
351.893 10.36 mo
351.893 14.245 li
353.753 14.245 li
354.458 14.245 354.998 14.08 355.358 13.75 cv
355.718 13.42 355.913 12.94 355.913 12.295 cv
355.913 11.665 355.718 11.185 355.358 10.855 cv
354.998 10.525 354.458 10.36 353.753 10.36 cv
351.893 10.36 li
f
389.35 20.0797 mo
419.35 20.0797 li
419.35 9.57965 li
389.35 9.57965 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
389.35 20.0797 mo
419.35 20.0797 li
419.35 9.57965 li
389.35 9.57965 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
432.82 9.14502 mo
439.735 9.14502 li
439.735 10.39 li
434.305 10.39 li
434.305 13.63 li
439.51 13.63 li
439.51 14.875 li
434.305 14.875 li
434.305 18.835 li
439.87 18.835 li
439.87 20.08 li
432.82 20.08 li
432.82 9.14502 li
f
442.3 9.14502 mo
444.505 9.14502 li
447.295 16.585 li
450.1 9.14502 li
452.305 9.14502 li
452.305 20.08 li
450.865 20.08 li
450.865 10.48 li
448.045 17.98 li
446.56 17.98 li
443.74 10.48 li
443.74 20.08 li
442.3 20.08 li
442.3 9.14502 li
f
455.245 9.14502 mo
456.73 9.14502 li
456.73 18.835 li
462.055 18.835 li
462.055 20.08 li
455.245 20.08 li
455.245 9.14502 li
f
54.4307 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4307 354.766 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
64.9613 768.164 mo
74.1183 768.164 li
74.1183 529.415 li
64.9613 529.415 li
cp
f
64.9613 768.164 mo
74.1183 768.164 li
74.1183 529.415 li
64.9613 529.415 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
156.532 768.164 mo
165.689 768.164 li
165.689 496.155 li
156.532 496.155 li
cp
f
156.532 768.164 mo
165.689 768.164 li
165.689 496.155 li
156.532 496.155 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
248.102 768.164 mo
257.259 768.164 li
257.259 495.156 li
248.102 495.156 li
cp
f
248.102 768.164 mo
257.259 768.164 li
257.259 495.156 li
248.102 495.156 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
74.1183 768.164 mo
83.2753 768.164 li
83.2753 504.356 li
74.1183 504.356 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
74.1183 768.164 mo
83.2753 768.164 li
83.2753 504.356 li
74.1183 504.356 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
165.689 768.164 mo
174.846 768.164 li
174.846 486.234 li
165.689 486.234 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
165.689 768.164 mo
174.846 768.164 li
174.846 486.234 li
165.689 486.234 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
257.259 768.164 mo
266.416 768.164 li
266.416 487.707 li
257.259 487.707 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
257.259 768.164 mo
266.416 768.164 li
266.416 487.707 li
257.259 487.707 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
83.2754 768.164 mo
92.4324 768.164 li
92.4324 379.284 li
83.2754 379.284 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
83.2754 768.164 mo
92.4324 768.164 li
92.4324 379.284 li
83.2754 379.284 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
174.846 768.164 mo
184.003 768.164 li
184.003 473.757 li
174.846 473.757 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
174.846 768.164 mo
184.003 768.164 li
184.003 473.757 li
174.846 473.757 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
54.4308 580.256 mo
286.104 580.256 li
286.104 354.766 li
54.4308 354.766 li
54.4308 580.256 li
clp
266.416 768.164 mo
275.573 768.164 li
275.573 467.21 li
266.416 467.21 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
266.416 768.164 mo
275.573 768.164 li
275.573 467.21 li
266.416 467.21 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
78.6969 580.256 mo
78.6969 583.756 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
1 lj
78.6969 580.256 mo
78.6969 583.756 li
@
66.1337 589.552 mo
63.7217 596.086 li
68.5457 596.086 li
66.1337 589.552 li
65.1257 587.806 mo
67.1417 587.806 li
72.1457 600.928 li
70.2917 600.928 li
69.1037 597.562 li
63.1817 597.562 li
61.9937 600.928 li
60.1217 600.928 li
65.1257 587.806 li
f
83.8818 588.814 mo
83.8818 590.686 li
83.2698 590.146 82.6398 589.732 81.9558 589.444 cv
81.2718 589.174 80.5698 589.03 79.8138 589.03 cv
78.3018 589.03 77.1498 589.498 76.3578 590.416 cv
75.5658 591.334 75.1698 592.648 75.1698 594.376 cv
75.1698 596.104 75.5658 597.436 76.3578 598.354 cv
77.1498 599.272 78.3018 599.722 79.8138 599.722 cv
80.5698 599.722 81.2718 599.596 81.9558 599.308 cv
82.6398 599.038 83.2698 598.624 83.8818 598.066 cv
83.8818 599.92 li
83.2518 600.352 82.5858 600.658 81.9018 600.856 cv
81.2178 601.054 80.4798 601.162 79.7058 601.162 cv
77.7258 601.162 76.1598 600.568 75.0078 599.362 cv
73.8558 598.156 73.2978 596.5 73.2978 594.376 cv
73.2978 592.27 73.8558 590.614 75.0078 589.39 cv
76.1598 588.184 77.7258 587.572 79.7058 587.572 cv
80.4978 587.572 81.2358 587.68 81.9198 587.878 cv
82.6038 588.094 83.2698 588.4 83.8818 588.814 cv
f
96.4458 588.814 mo
96.4458 590.686 li
95.8338 590.146 95.2038 589.732 94.5198 589.444 cv
93.8358 589.174 93.1338 589.03 92.3778 589.03 cv
90.8658 589.03 89.7138 589.498 88.9218 590.416 cv
88.1298 591.334 87.7338 592.648 87.7338 594.376 cv
87.7338 596.104 88.1298 597.436 88.9218 598.354 cv
89.7138 599.272 90.8658 599.722 92.3778 599.722 cv
93.1338 599.722 93.8358 599.596 94.5198 599.308 cv
95.2038 599.038 95.8338 598.624 96.4458 598.066 cv
96.4458 599.92 li
95.8158 600.352 95.1498 600.658 94.4658 600.856 cv
93.7818 601.054 93.0438 601.162 92.2698 601.162 cv
90.2898 601.162 88.7238 600.568 87.5718 599.362 cv
86.4198 598.156 85.8618 596.5 85.8618 594.376 cv
85.8618 592.27 86.4198 590.614 87.5718 589.39 cv
88.7238 588.184 90.2898 587.572 92.2698 587.572 cv
93.0618 587.572 93.7998 587.68 94.4838 587.878 cv
95.1678 588.094 95.8338 588.4 96.4458 588.814 cv
f
170.267 580.256 mo
170.267 583.756 li
f
170.267 580.256 mo
170.267 583.756 li
@
137.713 589.552 mo
135.301 596.086 li
140.125 596.086 li
137.713 589.552 li
136.705 587.806 mo
138.721 587.806 li
143.725 600.928 li
141.871 600.928 li
140.683 597.562 li
134.761 597.562 li
133.573 600.928 li
131.701 600.928 li
136.705 587.806 li
f
151.861 594.772 mo
152.239 594.916 152.617 595.186 152.977 595.6 cv
153.337 596.032 153.697 596.608 154.057 597.346 cv
155.857 600.928 li
153.949 600.928 li
152.275 597.562 li
151.843 596.698 151.411 596.104 151.015 595.816 cv
150.601 595.528 150.043 595.384 149.341 595.384 cv
147.415 595.384 li
147.415 600.928 li
145.633 600.928 li
145.633 587.806 li
149.647 587.806 li
151.141 587.806 152.257 588.13 152.995 588.742 cv
153.733 589.372 154.111 590.326 154.111 591.586 cv
154.111 592.414 153.913 593.116 153.535 593.656 cv
153.139 594.196 152.581 594.574 151.861 594.772 cv
147.415 589.264 mo
147.415 593.926 li
149.647 593.926 li
150.493 593.926 151.141 593.728 151.573 593.332 cv
152.005 592.936 152.239 592.36 152.239 591.586 cv
152.239 590.83 152.005 590.254 151.573 589.858 cv
151.141 589.462 150.493 589.264 149.647 589.264 cv
147.415 589.264 li
f
164.371 594.772 mo
164.749 594.916 165.127 595.186 165.487 595.6 cv
165.847 596.032 166.207 596.608 166.567 597.346 cv
168.367 600.928 li
166.459 600.928 li
164.785 597.562 li
164.353 596.698 163.921 596.104 163.525 595.816 cv
163.111 595.528 162.553 595.384 161.851 595.384 cv
159.925 595.384 li
159.925 600.928 li
158.143 600.928 li
158.143 587.806 li
162.157 587.806 li
163.651 587.806 164.767 588.13 165.505 588.742 cv
166.243 589.372 166.621 590.326 166.621 591.586 cv
166.621 592.414 166.423 593.116 166.045 593.656 cv
165.649 594.196 165.091 594.574 164.371 594.772 cv
159.925 589.264 mo
159.925 593.926 li
162.157 593.926 li
163.003 593.926 163.651 593.728 164.083 593.332 cv
164.515 592.936 164.749 592.36 164.749 591.586 cv
164.749 590.83 164.515 590.254 164.083 589.858 cv
163.651 589.462 163.003 589.264 162.157 589.264 cv
159.925 589.264 li
f
174.613 588.976 mo
173.695 588.976 173.011 589.426 172.543 590.326 cv
172.075 591.226 171.859 592.576 171.859 594.376 cv
171.859 596.176 172.075 597.526 172.543 598.426 cv
173.011 599.326 173.695 599.776 174.613 599.776 cv
175.531 599.776 176.215 599.326 176.683 598.426 cv
177.133 597.526 177.367 596.176 177.367 594.376 cv
177.367 592.576 177.133 591.226 176.683 590.326 cv
176.215 589.426 175.531 588.976 174.613 588.976 cv
174.613 587.572 mo
176.071 587.572 177.187 588.166 177.979 589.318 cv
178.753 590.488 179.149 592.18 179.149 594.376 cv
179.149 596.59 178.753 598.282 177.979 599.434 cv
177.187 600.586 176.071 601.162 174.613 601.162 cv
173.137 601.162 172.003 600.586 171.229 599.434 cv
170.455 598.282 170.077 596.59 170.077 594.376 cv
170.077 592.18 170.455 590.488 171.229 589.318 cv
172.003 588.166 173.137 587.572 174.613 587.572 cv
f
182.263 598.696 mo
184.117 598.696 li
184.117 600.928 li
182.263 600.928 li
182.263 598.696 li
f
191.785 588.976 mo
190.867 588.976 190.183 589.426 189.715 590.326 cv
189.247 591.226 189.031 592.576 189.031 594.376 cv
189.031 596.176 189.247 597.526 189.715 598.426 cv
190.183 599.326 190.867 599.776 191.785 599.776 cv
192.703 599.776 193.387 599.326 193.855 598.426 cv
194.305 597.526 194.539 596.176 194.539 594.376 cv
194.539 592.576 194.305 591.226 193.855 590.326 cv
193.387 589.426 192.703 588.976 191.785 588.976 cv
191.785 587.572 mo
193.243 587.572 194.359 588.166 195.151 589.318 cv
195.925 590.488 196.321 592.18 196.321 594.376 cv
196.321 596.59 195.925 598.282 195.151 599.434 cv
194.359 600.586 193.243 601.162 191.785 601.162 cv
190.309 601.162 189.175 600.586 188.401 599.434 cv
187.627 598.282 187.249 596.59 187.249 594.376 cv
187.249 592.18 187.627 590.488 188.401 589.318 cv
189.175 588.166 190.309 587.572 191.785 587.572 cv
f
199.453 587.806 mo
206.419 587.806 li
206.419 589.3 li
201.073 589.3 li
201.073 592.522 li
201.325 592.432 201.595 592.36 201.847 592.324 cv
202.099 592.288 202.369 592.252 202.621 592.252 cv
204.079 592.252 205.231 592.666 206.095 593.458 cv
206.959 594.268 207.391 595.348 207.391 596.716 cv
207.391 598.138 206.941 599.236 206.059 600.01 cv
205.177 600.784 203.935 601.162 202.351 601.162 cv
201.793 601.162 201.235 601.108 200.659 601.036 cv
200.083 600.946 199.507 600.82 198.895 600.622 cv
198.895 598.84 li
199.417 599.128 199.957 599.344 200.533 599.488 cv
201.091 599.632 201.685 599.686 202.315 599.686 cv
203.323 599.686 204.133 599.434 204.727 598.894 cv
205.303 598.354 205.609 597.634 205.609 596.716 cv
205.609 595.816 205.303 595.096 204.727 594.556 cv
204.133 594.016 203.323 593.746 202.315 593.746 cv
201.847 593.746 201.361 593.8 200.893 593.908 cv
200.425 594.016 199.939 594.178 199.453 594.394 cv
199.453 587.806 li
f
261.838 580.256 mo
261.838 583.756 li
f
261.838 580.256 mo
261.838 583.756 li
@
235.01 589.552 mo
232.598 596.086 li
237.422 596.086 li
235.01 589.552 li
234.002 587.806 mo
236.018 587.806 li
241.022 600.928 li
239.168 600.928 li
237.98 597.562 li
232.058 597.562 li
230.87 600.928 li
228.998 600.928 li
234.002 587.806 li
f
249.158 594.772 mo
249.536 594.916 249.914 595.186 250.274 595.6 cv
250.634 596.032 250.994 596.608 251.354 597.346 cv
253.154 600.928 li
251.246 600.928 li
249.572 597.562 li
249.14 596.698 248.708 596.104 248.312 595.816 cv
247.898 595.528 247.34 595.384 246.638 595.384 cv
244.712 595.384 li
244.712 600.928 li
242.93 600.928 li
242.93 587.806 li
246.944 587.806 li
248.438 587.806 249.554 588.13 250.292 588.742 cv
251.03 589.372 251.408 590.326 251.408 591.586 cv
251.408 592.414 251.21 593.116 250.832 593.656 cv
250.436 594.196 249.878 594.574 249.158 594.772 cv
244.712 589.264 mo
244.712 593.926 li
246.944 593.926 li
247.79 593.926 248.438 593.728 248.87 593.332 cv
249.302 592.936 249.536 592.36 249.536 591.586 cv
249.536 590.83 249.302 590.254 248.87 589.858 cv
248.438 589.462 247.79 589.264 246.944 589.264 cv
244.712 589.264 li
f
261.668 594.772 mo
262.046 594.916 262.424 595.186 262.784 595.6 cv
263.144 596.032 263.504 596.608 263.864 597.346 cv
265.664 600.928 li
263.756 600.928 li
262.082 597.562 li
261.65 596.698 261.218 596.104 260.822 595.816 cv
260.408 595.528 259.85 595.384 259.148 595.384 cv
257.222 595.384 li
257.222 600.928 li
255.44 600.928 li
255.44 587.806 li
259.454 587.806 li
260.948 587.806 262.064 588.13 262.802 588.742 cv
263.54 589.372 263.918 590.326 263.918 591.586 cv
263.918 592.414 263.72 593.116 263.342 593.656 cv
262.946 594.196 262.388 594.574 261.668 594.772 cv
257.222 589.264 mo
257.222 593.926 li
259.454 593.926 li
260.3 593.926 260.948 593.728 261.38 593.332 cv
261.812 592.936 262.046 592.36 262.046 591.586 cv
262.046 590.83 261.812 590.254 261.38 589.858 cv
260.948 589.462 260.3 589.264 259.454 589.264 cv
257.222 589.264 li
f
271.91 588.976 mo
270.992 588.976 270.308 589.426 269.84 590.326 cv
269.372 591.226 269.156 592.576 269.156 594.376 cv
269.156 596.176 269.372 597.526 269.84 598.426 cv
270.308 599.326 270.992 599.776 271.91 599.776 cv
272.828 599.776 273.512 599.326 273.98 598.426 cv
274.43 597.526 274.664 596.176 274.664 594.376 cv
274.664 592.576 274.43 591.226 273.98 590.326 cv
273.512 589.426 272.828 588.976 271.91 588.976 cv
271.91 587.572 mo
273.368 587.572 274.484 588.166 275.276 589.318 cv
276.05 590.488 276.446 592.18 276.446 594.376 cv
276.446 596.59 276.05 598.282 275.276 599.434 cv
274.484 600.586 273.368 601.162 271.91 601.162 cv
270.434 601.162 269.3 600.586 268.526 599.434 cv
267.752 598.282 267.374 596.59 267.374 594.376 cv
267.374 592.18 267.752 590.488 268.526 589.318 cv
269.3 588.166 270.434 587.572 271.91 587.572 cv
f
279.56 598.696 mo
281.414 598.696 li
281.414 600.928 li
279.56 600.928 li
279.56 598.696 li
f
285.59 599.434 mo
288.488 599.434 li
288.488 589.426 li
285.338 590.056 li
285.338 588.436 li
288.47 587.806 li
290.252 587.806 li
290.252 599.434 li
293.15 599.434 li
293.15 600.928 li
285.59 600.928 li
285.59 599.434 li
f
114.692 608.692 mo
113.768 610.288 113.096 611.842 112.655 613.375 cv
112.193 614.908 111.983 616.462 111.983 618.037 cv
111.983 619.633 112.193 621.187 112.655 622.72 cv
113.096 624.274 113.768 625.807 114.692 627.382 cv
113.054 627.382 li
112.025 625.765 111.248 624.211 110.744 622.657 cv
110.24 621.103 109.988 619.57 109.988 618.037 cv
109.988 616.525 110.24 614.992 110.744 613.438 cv
111.248 611.884 112.004 610.309 113.054 608.692 cv
114.692 608.692 li
f
126.62 613.585 mo
126.62 615.349 li
126.074 615.055 125.549 614.845 125.003 614.698 cv
124.457 614.551 123.932 614.467 123.386 614.467 cv
122.168 614.467 121.202 614.866 120.53 615.643 cv
119.858 616.42 119.522 617.512 119.522 618.898 cv
119.522 620.305 119.858 621.397 120.53 622.174 cv
121.202 622.951 122.168 623.329 123.386 623.329 cv
123.932 623.329 124.457 623.266 125.003 623.119 cv
125.549 622.972 126.074 622.741 126.62 622.447 cv
126.62 624.19 li
126.074 624.442 125.528 624.631 124.982 624.736 cv
124.415 624.841 123.806 624.904 123.176 624.904 cv
121.454 624.904 120.068 624.379 119.06 623.287 cv
118.031 622.216 117.527 620.746 117.527 618.898 cv
117.527 617.029 118.031 615.559 119.06 614.488 cv
120.089 613.417 121.496 612.871 123.302 612.871 cv
123.89 612.871 124.457 612.934 125.003 613.06 cv
125.549 613.186 126.095 613.354 126.62 613.585 cv
f
129.602 608.692 mo
131.24 608.692 li
132.248 610.309 133.025 611.884 133.529 613.438 cv
134.033 614.992 134.306 616.525 134.306 618.037 cv
134.306 619.57 134.033 621.103 133.529 622.657 cv
133.025 624.211 132.248 625.765 131.24 627.382 cv
129.602 627.382 li
130.505 625.807 131.177 624.274 131.639 622.72 cv
132.08 621.187 132.311 619.633 132.311 618.037 cv
132.311 616.462 132.08 614.908 131.639 613.375 cv
131.177 611.842 130.505 610.288 129.602 608.692 cv
f
143.294 611.359 mo
140.48 618.982 li
146.108 618.982 li
143.294 611.359 li
142.118 609.322 mo
144.47 609.322 li
150.308 624.631 li
148.145 624.631 li
146.759 620.704 li
139.85 620.704 li
138.464 624.631 li
136.28 624.631 li
142.118 609.322 li
f
160.724 613.585 mo
160.724 615.349 li
160.178 615.055 159.653 614.845 159.107 614.698 cv
158.561 614.551 158.036 614.467 157.49 614.467 cv
156.272 614.467 155.306 614.866 154.634 615.643 cv
153.962 616.42 153.626 617.512 153.626 618.898 cv
153.626 620.305 153.962 621.397 154.634 622.174 cv
155.306 622.951 156.272 623.329 157.49 623.329 cv
158.036 623.329 158.561 623.266 159.107 623.119 cv
159.653 622.972 160.178 622.741 160.724 622.447 cv
160.724 624.19 li
160.178 624.442 159.632 624.631 159.086 624.736 cv
158.519 624.841 157.91 624.904 157.28 624.904 cv
155.558 624.904 154.172 624.379 153.164 623.287 cv
152.135 622.216 151.631 620.746 151.631 618.898 cv
151.631 617.029 152.135 615.559 153.164 614.488 cv
154.193 613.417 155.6 612.871 157.406 612.871 cv
157.994 612.871 158.561 612.934 159.107 613.06 cv
159.653 613.186 160.199 613.354 160.724 613.585 cv
f
172.274 613.585 mo
172.274 615.349 li
171.728 615.055 171.203 614.845 170.657 614.698 cv
170.111 614.551 169.586 614.467 169.04 614.467 cv
167.822 614.467 166.856 614.866 166.184 615.643 cv
165.512 616.42 165.176 617.512 165.176 618.898 cv
165.176 620.305 165.512 621.397 166.184 622.174 cv
166.856 622.951 167.822 623.329 169.04 623.329 cv
169.586 623.329 170.111 623.266 170.657 623.119 cv
171.203 622.972 171.728 622.741 172.274 622.447 cv
172.274 624.19 li
171.728 624.442 171.182 624.631 170.636 624.736 cv
170.069 624.841 169.46 624.904 168.83 624.904 cv
167.108 624.904 165.722 624.379 164.714 623.287 cv
163.685 622.216 163.181 620.746 163.181 618.898 cv
163.181 617.029 163.685 615.559 164.714 614.488 cv
165.743 613.417 167.15 612.871 168.956 612.871 cv
169.544 612.871 170.111 612.934 170.657 613.06 cv
171.203 613.186 171.749 613.354 172.274 613.585 cv
f
175.361 620.095 mo
175.361 613.144 li
177.251 613.144 li
177.251 620.032 li
177.251 621.124 177.461 621.922 177.881 622.468 cv
178.301 623.014 178.931 623.287 179.792 623.287 cv
180.8 623.287 181.619 622.972 182.207 622.321 cv
182.795 621.67 183.089 620.788 183.089 619.654 cv
183.089 613.144 li
184.979 613.144 li
184.979 624.631 li
183.089 624.631 li
183.089 622.867 li
182.627 623.581 182.081 624.085 181.493 624.421 cv
180.884 624.736 180.191 624.904 179.393 624.904 cv
178.07 624.904 177.062 624.505 176.39 623.686 cv
175.697 622.888 175.361 621.691 175.361 620.095 cv
180.107 612.871 mo
180.107 612.871 li
f
195.521 614.908 mo
195.311 614.782 195.08 614.698 194.828 614.635 cv
194.576 614.593 194.303 614.551 194.009 614.551 cv
192.938 614.551 192.119 614.908 191.552 615.601 cv
190.964 616.294 190.691 617.281 190.691 618.583 cv
190.691 624.631 li
188.801 624.631 li
188.801 613.144 li
190.691 613.144 li
190.691 614.929 li
191.069 614.236 191.594 613.711 192.224 613.375 cv
192.854 613.039 193.631 612.871 194.555 612.871 cv
194.681 612.871 194.828 612.892 194.996 612.892 cv
195.143 612.913 195.311 612.934 195.521 612.976 cv
195.521 614.908 li
f
202.724 618.856 mo
201.191 618.856 200.141 619.045 199.553 619.381 cv
198.965 619.738 198.671 620.326 198.671 621.166 cv
198.671 621.838 198.881 622.384 199.322 622.762 cv
199.763 623.161 200.372 623.35 201.128 623.35 cv
202.178 623.35 203.018 622.993 203.648 622.237 cv
204.278 621.502 204.593 620.515 204.593 619.276 cv
204.593 618.856 li
202.724 618.856 li
206.483 618.079 mo
206.483 624.631 li
204.593 624.631 li
204.593 622.888 li
204.152 623.602 203.606 624.106 202.976 624.421 cv
202.346 624.736 201.548 624.904 200.624 624.904 cv
199.448 624.904 198.503 624.589 197.81 623.938 cv
197.117 623.287 196.781 622.405 196.781 621.292 cv
196.781 620.011 197.201 619.045 198.083 618.373 cv
198.944 617.722 200.225 617.386 201.947 617.386 cv
204.593 617.386 li
204.593 617.197 li
204.593 616.336 204.299 615.664 203.732 615.181 cv
203.165 614.719 202.367 614.467 201.338 614.467 cv
200.666 614.467 200.036 614.551 199.406 614.719 cv
198.776 614.887 198.188 615.118 197.621 615.412 cv
197.621 613.669 li
198.293 613.417 198.965 613.207 199.616 613.081 cv
200.267 612.955 200.897 612.871 201.527 612.871 cv
203.186 612.871 204.425 613.312 205.244 614.173 cv
206.063 615.034 206.483 616.336 206.483 618.079 cv
f
218.642 613.585 mo
218.642 615.349 li
218.096 615.055 217.571 614.845 217.025 614.698 cv
216.479 614.551 215.954 614.467 215.408 614.467 cv
214.19 614.467 213.224 614.866 212.552 615.643 cv
211.88 616.42 211.544 617.512 211.544 618.898 cv
211.544 620.305 211.88 621.397 212.552 622.174 cv
213.224 622.951 214.19 623.329 215.408 623.329 cv
215.954 623.329 216.479 623.266 217.025 623.119 cv
217.571 622.972 218.096 622.741 218.642 622.447 cv
218.642 624.19 li
218.096 624.442 217.55 624.631 217.004 624.736 cv
216.437 624.841 215.828 624.904 215.198 624.904 cv
213.476 624.904 212.09 624.379 211.082 623.287 cv
210.053 622.216 209.549 620.746 209.549 618.898 cv
209.549 617.029 210.053 615.559 211.082 614.488 cv
212.111 613.417 213.518 612.871 215.324 612.871 cv
215.912 612.871 216.479 612.934 217.025 613.06 cv
217.571 613.186 218.117 613.354 218.642 613.585 cv
f
226.706 625.681 mo
226.16 627.025 225.635 627.928 225.131 628.348 cv
224.627 628.768 223.955 628.978 223.115 628.978 cv
221.603 628.978 li
221.603 627.403 li
222.716 627.403 li
223.22 627.403 223.619 627.277 223.913 627.025 cv
224.207 626.773 224.522 626.206 224.879 625.282 cv
225.215 624.442 li
220.574 613.144 li
222.569 613.144 li
226.16 622.132 li
229.751 613.144 li
231.746 613.144 li
226.706 625.681 li
f
54.4307 580.256 mo
50.9307 580.256 li
f
54.4307 580.256 mo
50.9307 580.256 li
@
11.1447 574.859 mo
10.1757 574.859 9.45369 575.334 8.95969 576.284 cv
8.46569 577.234 8.23769 578.659 8.23769 580.559 cv
8.23769 582.459 8.46569 583.884 8.95969 584.834 cv
9.45369 585.784 10.1757 586.259 11.1447 586.259 cv
12.1137 586.259 12.8357 585.784 13.3297 584.834 cv
13.8047 583.884 14.0517 582.459 14.0517 580.559 cv
14.0517 578.659 13.8047 577.234 13.3297 576.284 cv
12.8357 575.334 12.1137 574.859 11.1447 574.859 cv
11.1447 573.377 mo
12.6837 573.377 13.8617 574.004 14.6977 575.22 cv
15.5147 576.455 15.9327 578.241 15.9327 580.559 cv
15.9327 582.896 15.5147 584.682 14.6977 585.898 cv
13.8617 587.114 12.6837 587.722 11.1447 587.722 cv
9.58669 587.722 8.38969 587.114 7.57269 585.898 cv
6.75569 584.682 6.35669 582.896 6.35669 580.559 cv
6.35669 578.241 6.75569 576.455 7.57269 575.22 cv
8.38969 574.004 9.58669 573.377 11.1447 573.377 cv
f
19.2197 585.119 mo
21.1767 585.119 li
21.1767 587.475 li
19.2197 587.475 li
19.2197 585.119 li
f
26.8766 585.898 mo
33.4126 585.898 li
33.4126 587.475 li
24.6156 587.475 li
24.6156 585.898 li
25.3186 585.176 26.2876 584.188 27.5226 582.934 cv
28.7386 581.699 29.5176 580.901 29.8406 580.54 cv
30.4486 579.875 30.8666 579.305 31.0946 578.83 cv
31.3226 578.374 31.4556 577.899 31.4556 577.443 cv
31.4556 576.721 31.1896 576.113 30.6766 575.657 cv
30.1636 575.201 29.4986 574.954 28.6626 574.954 cv
28.0736 574.954 27.4466 575.068 26.8006 575.258 cv
26.1546 575.467 25.4516 575.771 24.7106 576.189 cv
24.7106 574.289 li
25.4706 573.985 26.1736 573.757 26.8196 573.605 cv
27.4656 573.453 28.0736 573.377 28.6246 573.377 cv
30.0496 573.377 31.1896 573.738 32.0446 574.46 cv
32.8996 575.182 33.3366 576.132 33.3366 577.329 cv
33.3366 577.899 33.2226 578.45 33.0136 578.944 cv
32.8046 579.457 32.4246 580.065 31.8546 580.749 cv
31.7026 580.939 31.2086 581.452 30.3726 582.307 cv
29.5366 583.162 28.3776 584.359 26.8766 585.898 cv
f
37.3646 573.624 mo
44.7176 573.624 li
44.7176 575.201 li
39.0746 575.201 li
39.0746 578.602 li
39.3406 578.507 39.6256 578.431 39.8916 578.393 cv
40.1576 578.355 40.4426 578.317 40.7086 578.317 cv
42.2476 578.317 43.4636 578.754 44.3756 579.59 cv
45.2876 580.445 45.7436 581.585 45.7436 583.029 cv
45.7436 584.53 45.2686 585.689 44.3376 586.506 cv
43.4066 587.323 42.0956 587.722 40.4236 587.722 cv
39.8346 587.722 39.2456 587.665 38.6376 587.589 cv
38.0296 587.494 37.4216 587.361 36.7756 587.152 cv
36.7756 585.271 li
37.3266 585.575 37.8966 585.803 38.5046 585.955 cv
39.0936 586.107 39.7206 586.164 40.3856 586.164 cv
41.4496 586.164 42.3046 585.898 42.9316 585.328 cv
43.5396 584.758 43.8626 583.998 43.8626 583.029 cv
43.8626 582.079 43.5396 581.319 42.9316 580.749 cv
42.3046 580.179 41.4496 579.894 40.3856 579.894 cv
39.8916 579.894 39.3786 579.951 38.8846 580.065 cv
38.3906 580.179 37.8776 580.35 37.3646 580.578 cv
37.3646 573.624 li
f
54.4307 542.674 mo
50.9307 542.674 li
f
54.4307 542.674 mo
50.9307 542.674 li
@
11.1447 537.277 mo
10.1757 537.277 9.45369 537.752 8.95969 538.702 cv
8.46569 539.652 8.23769 541.077 8.23769 542.977 cv
8.23769 544.877 8.46569 546.302 8.95969 547.252 cv
9.45369 548.202 10.1757 548.677 11.1447 548.677 cv
12.1137 548.677 12.8357 548.202 13.3297 547.252 cv
13.8047 546.302 14.0517 544.877 14.0517 542.977 cv
14.0517 541.077 13.8047 539.652 13.3297 538.702 cv
12.8357 537.752 12.1137 537.277 11.1447 537.277 cv
11.1447 535.795 mo
12.6837 535.795 13.8617 536.422 14.6977 537.638 cv
15.5147 538.873 15.9327 540.659 15.9327 542.977 cv
15.9327 545.314 15.5147 547.1 14.6977 548.316 cv
13.8617 549.532 12.6837 550.14 11.1447 550.14 cv
9.58669 550.14 8.38969 549.532 7.57269 548.316 cv
6.75569 547.1 6.35669 545.314 6.35669 542.977 cv
6.35669 540.659 6.75569 538.873 7.57269 537.638 cv
8.38969 536.422 9.58669 535.795 11.1447 535.795 cv
f
19.2197 547.537 mo
21.1767 547.537 li
21.1767 549.893 li
19.2197 549.893 li
19.2197 547.537 li
f
30.9426 542.426 mo
31.8356 542.616 32.5386 543.015 33.0326 543.623 cv
33.5266 544.231 33.7926 544.991 33.7926 545.865 cv
33.7926 547.233 33.3176 548.297 32.3866 549.038 cv
31.4366 549.779 30.1066 550.14 28.3776 550.14 cv
27.7886 550.14 27.1806 550.083 26.5726 549.969 cv
25.9646 549.874 25.3186 549.703 24.6726 549.475 cv
24.6726 547.67 li
25.1856 547.974 25.7556 548.202 26.3826 548.354 cv
26.9906 548.506 27.6366 548.582 28.3206 548.582 cv
29.4986 548.582 30.3916 548.354 30.9996 547.898 cv
31.6076 547.442 31.9306 546.758 31.9306 545.865 cv
31.9306 545.067 31.6456 544.421 31.0756 543.965 cv
30.5056 543.509 29.7076 543.262 28.6816 543.262 cv
27.0666 543.262 li
27.0666 541.723 li
28.7576 541.723 li
29.6696 541.723 30.3726 541.552 30.8666 541.172 cv
31.3606 540.811 31.6076 540.279 31.6076 539.576 cv
31.6076 538.873 31.3416 538.322 30.8476 537.942 cv
30.3346 537.562 29.6126 537.372 28.6816 537.372 cv
28.1686 537.372 27.6176 537.429 27.0286 537.543 cv
26.4396 537.657 25.7936 537.828 25.0906 538.056 cv
25.0906 536.384 li
25.7936 536.194 26.4586 536.042 27.0856 535.947 cv
27.6936 535.852 28.2826 535.795 28.8526 535.795 cv
30.2586 535.795 31.3796 536.118 32.2156 536.764 cv
33.0516 537.41 33.4696 538.284 33.4696 539.386 cv
33.4696 540.146 33.2416 540.792 32.8046 541.324 cv
32.3676 541.856 31.7406 542.236 30.9426 542.426 cv
f
41.3546 537.277 mo
40.3856 537.277 39.6636 537.752 39.1696 538.702 cv
38.6756 539.652 38.4476 541.077 38.4476 542.977 cv
38.4476 544.877 38.6756 546.302 39.1696 547.252 cv
39.6636 548.202 40.3856 548.677 41.3546 548.677 cv
42.3236 548.677 43.0456 548.202 43.5396 547.252 cv
44.0146 546.302 44.2616 544.877 44.2616 542.977 cv
44.2616 541.077 44.0146 539.652 43.5396 538.702 cv
43.0456 537.752 42.3236 537.277 41.3546 537.277 cv
41.3546 535.795 mo
42.8936 535.795 44.0716 536.422 44.9076 537.638 cv
45.7246 538.873 46.1426 540.659 46.1426 542.977 cv
46.1426 545.314 45.7246 547.1 44.9076 548.316 cv
44.0716 549.532 42.8936 550.14 41.3546 550.14 cv
39.7966 550.14 38.5996 549.532 37.7826 548.316 cv
36.9656 547.1 36.5666 545.314 36.5666 542.977 cv
36.5666 540.659 36.9656 538.873 37.7826 537.638 cv
38.5996 536.422 39.7966 535.795 41.3546 535.795 cv
f
54.4307 505.093 mo
50.9307 505.093 li
f
54.4307 505.093 mo
50.9307 505.093 li
@
11.1447 499.695 mo
10.1757 499.695 9.45369 500.17 8.95969 501.12 cv
8.46569 502.07 8.23769 503.495 8.23769 505.395 cv
8.23769 507.295 8.46569 508.72 8.95969 509.67 cv
9.45369 510.62 10.1757 511.095 11.1447 511.095 cv
12.1137 511.095 12.8357 510.62 13.3297 509.67 cv
13.8047 508.72 14.0517 507.295 14.0517 505.395 cv
14.0517 503.495 13.8047 502.07 13.3297 501.12 cv
12.8357 500.17 12.1137 499.695 11.1447 499.695 cv
11.1447 498.213 mo
12.6837 498.213 13.8617 498.84 14.6977 500.056 cv
15.5147 501.291 15.9327 503.077 15.9327 505.395 cv
15.9327 507.732 15.5147 509.518 14.6977 510.734 cv
13.8617 511.95 12.6837 512.558 11.1447 512.558 cv
9.58669 512.558 8.38969 511.95 7.57269 510.734 cv
6.75569 509.518 6.35669 507.732 6.35669 505.395 cv
6.35669 503.077 6.75569 501.291 7.57269 500.056 cv
8.38969 498.84 9.58669 498.213 11.1447 498.213 cv
f
19.2197 509.955 mo
21.1767 509.955 li
21.1767 512.311 li
19.2197 512.311 li
19.2197 509.955 li
f
30.9426 504.844 mo
31.8356 505.034 32.5386 505.433 33.0326 506.041 cv
33.5266 506.649 33.7926 507.409 33.7926 508.283 cv
33.7926 509.651 33.3176 510.715 32.3866 511.456 cv
31.4366 512.197 30.1066 512.558 28.3776 512.558 cv
27.7886 512.558 27.1806 512.501 26.5726 512.387 cv
25.9646 512.292 25.3186 512.121 24.6726 511.893 cv
24.6726 510.088 li
25.1856 510.392 25.7556 510.62 26.3826 510.772 cv
26.9906 510.924 27.6366 511 28.3206 511 cv
29.4986 511 30.3916 510.772 30.9996 510.316 cv
31.6076 509.86 31.9306 509.176 31.9306 508.283 cv
31.9306 507.485 31.6456 506.839 31.0756 506.383 cv
30.5056 505.927 29.7076 505.68 28.6816 505.68 cv
27.0666 505.68 li
27.0666 504.141 li
28.7576 504.141 li
29.6696 504.141 30.3726 503.97 30.8666 503.59 cv
31.3606 503.229 31.6076 502.697 31.6076 501.994 cv
31.6076 501.291 31.3416 500.74 30.8476 500.36 cv
30.3346 499.98 29.6126 499.79 28.6816 499.79 cv
28.1686 499.79 27.6176 499.847 27.0286 499.961 cv
26.4396 500.075 25.7936 500.246 25.0906 500.474 cv
25.0906 498.802 li
25.7936 498.612 26.4586 498.46 27.0856 498.365 cv
27.6936 498.27 28.2826 498.213 28.8526 498.213 cv
30.2586 498.213 31.3796 498.536 32.2156 499.182 cv
33.0516 499.828 33.4696 500.702 33.4696 501.804 cv
33.4696 502.564 33.2416 503.21 32.8046 503.742 cv
32.3676 504.274 31.7406 504.654 30.9426 504.844 cv
f
37.3646 498.46 mo
44.7176 498.46 li
44.7176 500.037 li
39.0746 500.037 li
39.0746 503.438 li
39.3406 503.343 39.6256 503.267 39.8916 503.229 cv
40.1576 503.191 40.4426 503.153 40.7086 503.153 cv
42.2476 503.153 43.4636 503.59 44.3756 504.426 cv
45.2876 505.281 45.7436 506.421 45.7436 507.865 cv
45.7436 509.366 45.2686 510.525 44.3376 511.342 cv
43.4066 512.159 42.0956 512.558 40.4236 512.558 cv
39.8346 512.558 39.2456 512.501 38.6376 512.425 cv
38.0296 512.33 37.4216 512.197 36.7756 511.988 cv
36.7756 510.107 li
37.3266 510.411 37.8966 510.639 38.5046 510.791 cv
39.0936 510.943 39.7206 511 40.3856 511 cv
41.4496 511 42.3046 510.734 42.9316 510.164 cv
43.5396 509.594 43.8626 508.834 43.8626 507.865 cv
43.8626 506.915 43.5396 506.155 42.9316 505.585 cv
42.3046 505.015 41.4496 504.73 40.3856 504.73 cv
39.8916 504.73 39.3786 504.787 38.8846 504.901 cv
38.3906 505.015 37.8776 505.186 37.3646 505.414 cv
37.3646 498.46 li
f
54.4307 467.511 mo
50.9307 467.511 li
f
54.4307 467.511 mo
50.9307 467.511 li
@
11.1447 462.114 mo
10.1757 462.114 9.45369 462.589 8.95969 463.539 cv
8.46569 464.489 8.23769 465.914 8.23769 467.814 cv
8.23769 469.714 8.46569 471.139 8.95969 472.089 cv
9.45369 473.039 10.1757 473.514 11.1447 473.514 cv
12.1137 473.514 12.8357 473.039 13.3297 472.089 cv
13.8047 471.139 14.0517 469.714 14.0517 467.814 cv
14.0517 465.914 13.8047 464.489 13.3297 463.539 cv
12.8357 462.589 12.1137 462.114 11.1447 462.114 cv
11.1447 460.632 mo
12.6837 460.632 13.8617 461.259 14.6977 462.475 cv
15.5147 463.71 15.9327 465.496 15.9327 467.814 cv
15.9327 470.151 15.5147 471.937 14.6977 473.153 cv
13.8617 474.369 12.6837 474.977 11.1447 474.977 cv
9.58669 474.977 8.38969 474.369 7.57269 473.153 cv
6.75569 471.937 6.35669 470.151 6.35669 467.814 cv
6.35669 465.496 6.75569 463.71 7.57269 462.475 cv
8.38969 461.259 9.58669 460.632 11.1447 460.632 cv
f
19.2197 472.374 mo
21.1767 472.374 li
21.1767 474.73 li
19.2197 474.73 li
19.2197 472.374 li
f
30.4106 462.513 mo
25.6796 469.904 li
30.4106 469.904 li
30.4106 462.513 li
29.9166 460.879 mo
32.2726 460.879 li
32.2726 469.904 li
34.2486 469.904 li
34.2486 471.462 li
32.2726 471.462 li
32.2726 474.73 li
30.4106 474.73 li
30.4106 471.462 li
24.1596 471.462 li
24.1596 469.657 li
29.9166 460.879 li
f
41.3546 462.114 mo
40.3856 462.114 39.6636 462.589 39.1696 463.539 cv
38.6756 464.489 38.4476 465.914 38.4476 467.814 cv
38.4476 469.714 38.6756 471.139 39.1696 472.089 cv
39.6636 473.039 40.3856 473.514 41.3546 473.514 cv
42.3236 473.514 43.0456 473.039 43.5396 472.089 cv
44.0146 471.139 44.2616 469.714 44.2616 467.814 cv
44.2616 465.914 44.0146 464.489 43.5396 463.539 cv
43.0456 462.589 42.3236 462.114 41.3546 462.114 cv
41.3546 460.632 mo
42.8936 460.632 44.0716 461.259 44.9076 462.475 cv
45.7246 463.71 46.1426 465.496 46.1426 467.814 cv
46.1426 470.151 45.7246 471.937 44.9076 473.153 cv
44.0716 474.369 42.8936 474.977 41.3546 474.977 cv
39.7966 474.977 38.5996 474.369 37.7826 473.153 cv
36.9656 471.937 36.5666 470.151 36.5666 467.814 cv
36.5666 465.496 36.9656 463.71 37.7826 462.475 cv
38.5996 461.259 39.7966 460.632 41.3546 460.632 cv
f
54.4307 429.929 mo
50.9307 429.929 li
f
54.4307 429.929 mo
50.9307 429.929 li
@
11.1447 424.532 mo
10.1757 424.532 9.45369 425.007 8.95969 425.957 cv
8.46569 426.907 8.23769 428.332 8.23769 430.232 cv
8.23769 432.132 8.46569 433.557 8.95969 434.507 cv
9.45369 435.457 10.1757 435.932 11.1447 435.932 cv
12.1137 435.932 12.8357 435.457 13.3297 434.507 cv
13.8047 433.557 14.0517 432.132 14.0517 430.232 cv
14.0517 428.332 13.8047 426.907 13.3297 425.957 cv
12.8357 425.007 12.1137 424.532 11.1447 424.532 cv
11.1447 423.05 mo
12.6837 423.05 13.8617 423.677 14.6977 424.893 cv
15.5147 426.128 15.9327 427.914 15.9327 430.232 cv
15.9327 432.569 15.5147 434.355 14.6977 435.571 cv
13.8617 436.787 12.6837 437.395 11.1447 437.395 cv
9.58669 437.395 8.38969 436.787 7.57269 435.571 cv
6.75569 434.355 6.35669 432.569 6.35669 430.232 cv
6.35669 427.914 6.75569 426.128 7.57269 424.893 cv
8.38969 423.677 9.58669 423.05 11.1447 423.05 cv
f
19.2197 434.792 mo
21.1767 434.792 li
21.1767 437.148 li
19.2197 437.148 li
19.2197 434.792 li
f
30.4106 424.931 mo
25.6796 432.322 li
30.4106 432.322 li
30.4106 424.931 li
29.9166 423.297 mo
32.2726 423.297 li
32.2726 432.322 li
34.2486 432.322 li
34.2486 433.88 li
32.2726 433.88 li
32.2726 437.148 li
30.4106 437.148 li
30.4106 433.88 li
24.1596 433.88 li
24.1596 432.075 li
29.9166 423.297 li
f
37.3646 423.297 mo
44.7176 423.297 li
44.7176 424.874 li
39.0746 424.874 li
39.0746 428.275 li
39.3406 428.18 39.6256 428.104 39.8916 428.066 cv
40.1576 428.028 40.4426 427.99 40.7086 427.99 cv
42.2476 427.99 43.4636 428.427 44.3756 429.263 cv
45.2876 430.118 45.7436 431.258 45.7436 432.702 cv
45.7436 434.203 45.2686 435.362 44.3376 436.179 cv
43.4066 436.996 42.0956 437.395 40.4236 437.395 cv
39.8346 437.395 39.2456 437.338 38.6376 437.262 cv
38.0296 437.167 37.4216 437.034 36.7756 436.825 cv
36.7756 434.944 li
37.3266 435.248 37.8966 435.476 38.5046 435.628 cv
39.0936 435.78 39.7206 435.837 40.3856 435.837 cv
41.4496 435.837 42.3046 435.571 42.9316 435.001 cv
43.5396 434.431 43.8626 433.671 43.8626 432.702 cv
43.8626 431.752 43.5396 430.992 42.9316 430.422 cv
42.3046 429.852 41.4496 429.567 40.3856 429.567 cv
39.8916 429.567 39.3786 429.624 38.8846 429.738 cv
38.3906 429.852 37.8776 430.023 37.3646 430.251 cv
37.3646 423.297 li
f
54.4307 392.348 mo
50.9307 392.348 li
f
54.4307 392.348 mo
50.9307 392.348 li
@
11.1447 386.95 mo
10.1757 386.95 9.45369 387.425 8.95969 388.375 cv
8.46569 389.325 8.23769 390.75 8.23769 392.65 cv
8.23769 394.55 8.46569 395.975 8.95969 396.925 cv
9.45369 397.875 10.1757 398.35 11.1447 398.35 cv
12.1137 398.35 12.8357 397.875 13.3297 396.925 cv
13.8047 395.975 14.0517 394.55 14.0517 392.65 cv
14.0517 390.75 13.8047 389.325 13.3297 388.375 cv
12.8357 387.425 12.1137 386.95 11.1447 386.95 cv
11.1447 385.468 mo
12.6837 385.468 13.8617 386.095 14.6977 387.311 cv
15.5147 388.546 15.9327 390.332 15.9327 392.65 cv
15.9327 394.987 15.5147 396.773 14.6977 397.989 cv
13.8617 399.205 12.6837 399.813 11.1447 399.813 cv
9.58669 399.813 8.38969 399.205 7.57269 397.989 cv
6.75569 396.773 6.35669 394.987 6.35669 392.65 cv
6.35669 390.332 6.75569 388.546 7.57269 387.311 cv
8.38969 386.095 9.58669 385.468 11.1447 385.468 cv
f
19.2197 397.21 mo
21.1767 397.21 li
21.1767 399.566 li
19.2197 399.566 li
19.2197 397.21 li
f
25.2806 385.715 mo
32.6336 385.715 li
32.6336 387.292 li
26.9906 387.292 li
26.9906 390.693 li
27.2566 390.598 27.5416 390.522 27.8076 390.484 cv
28.0736 390.446 28.3586 390.408 28.6246 390.408 cv
30.1636 390.408 31.3796 390.845 32.2916 391.681 cv
33.2036 392.536 33.6596 393.676 33.6596 395.12 cv
33.6596 396.621 33.1846 397.78 32.2536 398.597 cv
31.3226 399.414 30.0116 399.813 28.3396 399.813 cv
27.7506 399.813 27.1616 399.756 26.5536 399.68 cv
25.9456 399.585 25.3376 399.452 24.6916 399.243 cv
24.6916 397.362 li
25.2426 397.666 25.8126 397.894 26.4206 398.046 cv
27.0096 398.198 27.6366 398.255 28.3016 398.255 cv
29.3656 398.255 30.2206 397.989 30.8476 397.419 cv
31.4556 396.849 31.7786 396.089 31.7786 395.12 cv
31.7786 394.17 31.4556 393.41 30.8476 392.84 cv
30.2206 392.27 29.3656 391.985 28.3016 391.985 cv
27.8076 391.985 27.2946 392.042 26.8006 392.156 cv
26.3066 392.27 25.7936 392.441 25.2806 392.669 cv
25.2806 385.715 li
f
41.3546 386.95 mo
40.3856 386.95 39.6636 387.425 39.1696 388.375 cv
38.6756 389.325 38.4476 390.75 38.4476 392.65 cv
38.4476 394.55 38.6756 395.975 39.1696 396.925 cv
39.6636 397.875 40.3856 398.35 41.3546 398.35 cv
42.3236 398.35 43.0456 397.875 43.5396 396.925 cv
44.0146 395.975 44.2616 394.55 44.2616 392.65 cv
44.2616 390.75 44.0146 389.325 43.5396 388.375 cv
43.0456 387.425 42.3236 386.95 41.3546 386.95 cv
41.3546 385.468 mo
42.8936 385.468 44.0716 386.095 44.9076 387.311 cv
45.7246 388.546 46.1426 390.332 46.1426 392.65 cv
46.1426 394.987 45.7246 396.773 44.9076 397.989 cv
44.0716 399.205 42.8936 399.813 41.3546 399.813 cv
39.7966 399.813 38.5996 399.205 37.7826 397.989 cv
36.9656 396.773 36.5666 394.987 36.5666 392.65 cv
36.5666 390.332 36.9656 388.546 37.7826 387.311 cv
38.5996 386.095 39.7966 385.468 41.3546 385.468 cv
f
54.4307 354.766 mo
50.9307 354.766 li
f
54.4307 354.766 mo
50.9307 354.766 li
@
11.1447 349.369 mo
10.1757 349.369 9.45369 349.844 8.95969 350.794 cv
8.46569 351.744 8.23769 353.169 8.23769 355.069 cv
8.23769 356.969 8.46569 358.394 8.95969 359.344 cv
9.45369 360.294 10.1757 360.769 11.1447 360.769 cv
12.1137 360.769 12.8357 360.294 13.3297 359.344 cv
13.8047 358.394 14.0517 356.969 14.0517 355.069 cv
14.0517 353.169 13.8047 351.744 13.3297 350.794 cv
12.8357 349.844 12.1137 349.369 11.1447 349.369 cv
11.1447 347.887 mo
12.6837 347.887 13.8617 348.514 14.6977 349.73 cv
15.5147 350.965 15.9327 352.751 15.9327 355.069 cv
15.9327 357.406 15.5147 359.192 14.6977 360.408 cv
13.8617 361.624 12.6837 362.232 11.1447 362.232 cv
9.58669 362.232 8.38969 361.624 7.57269 360.408 cv
6.75569 359.192 6.35669 357.406 6.35669 355.069 cv
6.35669 352.751 6.75569 350.965 7.57269 349.73 cv
8.38969 348.514 9.58669 347.887 11.1447 347.887 cv
f
19.2197 359.629 mo
21.1767 359.629 li
21.1767 361.985 li
19.2197 361.985 li
19.2197 359.629 li
f
25.2806 348.134 mo
32.6336 348.134 li
32.6336 349.711 li
26.9906 349.711 li
26.9906 353.112 li
27.2566 353.017 27.5416 352.941 27.8076 352.903 cv
28.0736 352.865 28.3586 352.827 28.6246 352.827 cv
30.1636 352.827 31.3796 353.264 32.2916 354.1 cv
33.2036 354.955 33.6596 356.095 33.6596 357.539 cv
33.6596 359.04 33.1846 360.199 32.2536 361.016 cv
31.3226 361.833 30.0116 362.232 28.3396 362.232 cv
27.7506 362.232 27.1616 362.175 26.5536 362.099 cv
25.9456 362.004 25.3376 361.871 24.6916 361.662 cv
24.6916 359.781 li
25.2426 360.085 25.8126 360.313 26.4206 360.465 cv
27.0096 360.617 27.6366 360.674 28.3016 360.674 cv
29.3656 360.674 30.2206 360.408 30.8476 359.838 cv
31.4556 359.268 31.7786 358.508 31.7786 357.539 cv
31.7786 356.589 31.4556 355.829 30.8476 355.259 cv
30.2206 354.689 29.3656 354.404 28.3016 354.404 cv
27.8076 354.404 27.2946 354.461 26.8006 354.575 cv
26.3066 354.689 25.7936 354.86 25.2806 355.088 cv
25.2806 348.134 li
f
37.3646 348.134 mo
44.7176 348.134 li
44.7176 349.711 li
39.0746 349.711 li
39.0746 353.112 li
39.3406 353.017 39.6256 352.941 39.8916 352.903 cv
40.1576 352.865 40.4426 352.827 40.7086 352.827 cv
42.2476 352.827 43.4636 353.264 44.3756 354.1 cv
45.2876 354.955 45.7436 356.095 45.7436 357.539 cv
45.7436 359.04 45.2686 360.199 44.3376 361.016 cv
43.4066 361.833 42.0956 362.232 40.4236 362.232 cv
39.8346 362.232 39.2456 362.175 38.6376 362.099 cv
38.0296 362.004 37.4216 361.871 36.7756 361.662 cv
36.7756 359.781 li
37.3266 360.085 37.8966 360.313 38.5046 360.465 cv
39.0936 360.617 39.7206 360.674 40.3856 360.674 cv
41.4496 360.674 42.3046 360.408 42.9316 359.838 cv
43.5396 359.268 43.8626 358.508 43.8626 357.539 cv
43.8626 356.589 43.5396 355.829 42.9316 355.259 cv
42.3046 354.689 41.4496 354.404 40.3856 354.404 cv
39.8916 354.404 39.3786 354.461 38.8846 354.575 cv
38.3906 354.689 37.8776 354.86 37.3646 355.088 cv
37.3646 348.134 li
f
2 lc
0 lj
54.4307 580.256 mo
54.4307 354.766 li
@
286.104 580.256 mo
286.104 354.766 li
@
54.4307 580.256 mo
286.104 580.256 li
@
54.4307 354.766 mo
286.104 354.766 li
@
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
365.809 1106.4 mo
374.966 1106.4 li
374.966 404.05 li
365.809 404.05 li
cp
f
1 lw
0 lc
365.809 1106.4 mo
374.966 1106.4 li
374.966 404.05 li
365.809 404.05 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
457.38 1106.4 mo
466.537 1106.4 li
466.537 416.377 li
457.38 416.377 li
cp
f
1 lw
0 lc
457.38 1106.4 mo
466.537 1106.4 li
466.537 416.377 li
457.38 416.377 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
548.95 1106.4 mo
558.107 1106.4 li
558.107 420.481 li
548.95 420.481 li
cp
f
1 lw
0 lc
548.95 1106.4 mo
558.107 1106.4 li
558.107 420.481 li
548.95 420.481 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
374.966 1106.4 mo
384.124 1106.4 li
384.124 375.3 li
374.966 375.3 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
374.966 1106.4 mo
384.124 1106.4 li
384.124 375.3 li
374.966 375.3 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
466.537 1106.4 mo
475.694 1106.4 li
475.694 404.05 li
466.537 404.05 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
466.537 1106.4 mo
475.694 1106.4 li
475.694 404.05 li
466.537 404.05 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
558.107 1106.4 mo
567.264 1106.4 li
567.264 408.162 li
558.107 408.162 li
cp
1 /0 /CSD get_res sepcs
.173 sep
f
1 lw
0 lc
558.107 1106.4 mo
567.264 1106.4 li
567.264 408.162 li
558.107 408.162 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
384.124 1106.4 mo
393.281 1106.4 li
393.281 367.085 li
384.124 367.085 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
384.124 1106.4 mo
393.281 1106.4 li
393.281 367.085 li
384.124 367.085 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
475.694 1106.4 mo
484.851 1106.4 li
484.851 445.127 li
475.694 445.127 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
475.694 1106.4 mo
484.851 1106.4 li
484.851 445.127 li
475.694 445.127 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
gsave
355.279 580.256 mo
586.952 580.256 li
586.952 354.766 li
355.279 354.766 li
355.279 580.256 li
clp
567.264 1106.4 mo
576.421 1106.4 li
576.421 441.016 li
567.264 441.016 li
cp
1 /0 /CSD get_res sepcs
.588 sep
f
1 lw
0 lc
567.264 1106.4 mo
576.421 1106.4 li
576.421 441.016 li
567.264 441.016 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
grestore
379.545 580.256 mo
379.545 583.756 li
1 /0 /CSD get_res sepcs
1 sep
f
0 lc
1 lj
379.545 580.256 mo
379.545 583.756 li
@
366.983 589.552 mo
364.571 596.086 li
369.395 596.086 li
366.983 589.552 li
365.975 587.806 mo
367.991 587.806 li
372.995 600.928 li
371.141 600.928 li
369.953 597.562 li
364.031 597.562 li
362.843 600.928 li
360.971 600.928 li
365.975 587.806 li
f
384.731 588.814 mo
384.731 590.686 li
384.119 590.146 383.489 589.732 382.805 589.444 cv
382.121 589.174 381.419 589.03 380.663 589.03 cv
379.151 589.03 377.999 589.498 377.207 590.416 cv
376.415 591.334 376.019 592.648 376.019 594.376 cv
376.019 596.104 376.415 597.436 377.207 598.354 cv
377.999 599.272 379.151 599.722 380.663 599.722 cv
381.419 599.722 382.121 599.596 382.805 599.308 cv
383.489 599.038 384.119 598.624 384.731 598.066 cv
384.731 599.92 li
384.101 600.352 383.435 600.658 382.751 600.856 cv
382.067 601.054 381.329 601.162 380.555 601.162 cv
378.575 601.162 377.009 600.568 375.857 599.362 cv
374.705 598.156 374.147 596.5 374.147 594.376 cv
374.147 592.27 374.705 590.614 375.857 589.39 cv
377.009 588.184 378.575 587.572 380.555 587.572 cv
381.347 587.572 382.085 587.68 382.769 587.878 cv
383.453 588.094 384.119 588.4 384.731 588.814 cv
f
397.295 588.814 mo
397.295 590.686 li
396.683 590.146 396.053 589.732 395.369 589.444 cv
394.685 589.174 393.983 589.03 393.227 589.03 cv
391.715 589.03 390.563 589.498 389.771 590.416 cv
388.979 591.334 388.583 592.648 388.583 594.376 cv
388.583 596.104 388.979 597.436 389.771 598.354 cv
390.563 599.272 391.715 599.722 393.227 599.722 cv
393.983 599.722 394.685 599.596 395.369 599.308 cv
396.053 599.038 396.683 598.624 397.295 598.066 cv
397.295 599.92 li
396.665 600.352 395.999 600.658 395.315 600.856 cv
394.631 601.054 393.893 601.162 393.119 601.162 cv
391.139 601.162 389.573 600.568 388.421 599.362 cv
387.269 598.156 386.711 596.5 386.711 594.376 cv
386.711 592.27 387.269 590.614 388.421 589.39 cv
389.573 588.184 391.139 587.572 393.119 587.572 cv
393.911 587.572 394.649 587.68 395.333 587.878 cv
396.017 588.094 396.683 588.4 397.295 588.814 cv
f
471.115 580.256 mo
471.115 583.756 li
f
471.115 580.256 mo
471.115 583.756 li
@
438.561 589.552 mo
436.149 596.086 li
440.973 596.086 li
438.561 589.552 li
437.553 587.806 mo
439.569 587.806 li
444.573 600.928 li
442.719 600.928 li
441.531 597.562 li
435.609 597.562 li
434.421 600.928 li
432.549 600.928 li
437.553 587.806 li
f
452.709 594.772 mo
453.087 594.916 453.465 595.186 453.825 595.6 cv
454.185 596.032 454.545 596.608 454.905 597.346 cv
456.705 600.928 li
454.797 600.928 li
453.123 597.562 li
452.691 596.698 452.259 596.104 451.863 595.816 cv
451.449 595.528 450.891 595.384 450.189 595.384 cv
448.263 595.384 li
448.263 600.928 li
446.481 600.928 li
446.481 587.806 li
450.495 587.806 li
451.989 587.806 453.105 588.13 453.843 588.742 cv
454.581 589.372 454.959 590.326 454.959 591.586 cv
454.959 592.414 454.761 593.116 454.383 593.656 cv
453.987 594.196 453.429 594.574 452.709 594.772 cv
448.263 589.264 mo
448.263 593.926 li
450.495 593.926 li
451.341 593.926 451.989 593.728 452.421 593.332 cv
452.853 592.936 453.087 592.36 453.087 591.586 cv
453.087 590.83 452.853 590.254 452.421 589.858 cv
451.989 589.462 451.341 589.264 450.495 589.264 cv
448.263 589.264 li
f
465.219 594.772 mo
465.597 594.916 465.975 595.186 466.335 595.6 cv
466.695 596.032 467.055 596.608 467.415 597.346 cv
469.215 600.928 li
467.307 600.928 li
465.633 597.562 li
465.201 596.698 464.769 596.104 464.373 595.816 cv
463.959 595.528 463.401 595.384 462.699 595.384 cv
460.773 595.384 li
460.773 600.928 li
458.991 600.928 li
458.991 587.806 li
463.005 587.806 li
464.499 587.806 465.615 588.13 466.353 588.742 cv
467.091 589.372 467.469 590.326 467.469 591.586 cv
467.469 592.414 467.271 593.116 466.893 593.656 cv
466.497 594.196 465.939 594.574 465.219 594.772 cv
460.773 589.264 mo
460.773 593.926 li
463.005 593.926 li
463.851 593.926 464.499 593.728 464.931 593.332 cv
465.363 592.936 465.597 592.36 465.597 591.586 cv
465.597 590.83 465.363 590.254 464.931 589.858 cv
464.499 589.462 463.851 589.264 463.005 589.264 cv
460.773 589.264 li
f
475.461 588.976 mo
474.543 588.976 473.859 589.426 473.391 590.326 cv
472.923 591.226 472.707 592.576 472.707 594.376 cv
472.707 596.176 472.923 597.526 473.391 598.426 cv
473.859 599.326 474.543 599.776 475.461 599.776 cv
476.379 599.776 477.063 599.326 477.531 598.426 cv
477.981 597.526 478.215 596.176 478.215 594.376 cv
478.215 592.576 477.981 591.226 477.531 590.326 cv
477.063 589.426 476.379 588.976 475.461 588.976 cv
475.461 587.572 mo
476.919 587.572 478.035 588.166 478.827 589.318 cv
479.601 590.488 479.997 592.18 479.997 594.376 cv
479.997 596.59 479.601 598.282 478.827 599.434 cv
478.035 600.586 476.919 601.162 475.461 601.162 cv
473.985 601.162 472.851 600.586 472.077 599.434 cv
471.303 598.282 470.925 596.59 470.925 594.376 cv
470.925 592.18 471.303 590.488 472.077 589.318 cv
472.851 588.166 473.985 587.572 475.461 587.572 cv
f
483.111 598.696 mo
484.965 598.696 li
484.965 600.928 li
483.111 600.928 li
483.111 598.696 li
f
492.633 588.976 mo
491.715 588.976 491.031 589.426 490.563 590.326 cv
490.095 591.226 489.879 592.576 489.879 594.376 cv
489.879 596.176 490.095 597.526 490.563 598.426 cv
491.031 599.326 491.715 599.776 492.633 599.776 cv
493.551 599.776 494.235 599.326 494.703 598.426 cv
495.153 597.526 495.387 596.176 495.387 594.376 cv
495.387 592.576 495.153 591.226 494.703 590.326 cv
494.235 589.426 493.551 588.976 492.633 588.976 cv
492.633 587.572 mo
494.091 587.572 495.207 588.166 495.999 589.318 cv
496.773 590.488 497.169 592.18 497.169 594.376 cv
497.169 596.59 496.773 598.282 495.999 599.434 cv
495.207 600.586 494.091 601.162 492.633 601.162 cv
491.157 601.162 490.023 600.586 489.249 599.434 cv
488.475 598.282 488.097 596.59 488.097 594.376 cv
488.097 592.18 488.475 590.488 489.249 589.318 cv
490.023 588.166 491.157 587.572 492.633 587.572 cv
f
500.301 587.806 mo
507.267 587.806 li
507.267 589.3 li
501.921 589.3 li
501.921 592.522 li
502.173 592.432 502.443 592.36 502.695 592.324 cv
502.947 592.288 503.217 592.252 503.469 592.252 cv
504.927 592.252 506.079 592.666 506.943 593.458 cv
507.807 594.268 508.239 595.348 508.239 596.716 cv
508.239 598.138 507.789 599.236 506.907 600.01 cv
506.025 600.784 504.783 601.162 503.199 601.162 cv
502.641 601.162 502.083 601.108 501.507 601.036 cv
500.931 600.946 500.355 600.82 499.743 600.622 cv
499.743 598.84 li
500.265 599.128 500.805 599.344 501.381 599.488 cv
501.939 599.632 502.533 599.686 503.163 599.686 cv
504.171 599.686 504.981 599.434 505.575 598.894 cv
506.151 598.354 506.457 597.634 506.457 596.716 cv
506.457 595.816 506.151 595.096 505.575 594.556 cv
504.981 594.016 504.171 593.746 503.163 593.746 cv
502.695 593.746 502.209 593.8 501.741 593.908 cv
501.273 594.016 500.787 594.178 500.301 594.394 cv
500.301 587.806 li
f
562.686 580.256 mo
562.686 583.756 li
f
562.686 580.256 mo
562.686 583.756 li
@
535.858 589.552 mo
533.446 596.086 li
538.27 596.086 li
535.858 589.552 li
534.85 587.806 mo
536.866 587.806 li
541.87 600.928 li
540.016 600.928 li
538.828 597.562 li
532.906 597.562 li
531.718 600.928 li
529.846 600.928 li
534.85 587.806 li
f
550.006 594.772 mo
550.384 594.916 550.762 595.186 551.122 595.6 cv
551.482 596.032 551.842 596.608 552.202 597.346 cv
554.002 600.928 li
552.094 600.928 li
550.42 597.562 li
549.988 596.698 549.556 596.104 549.16 595.816 cv
548.746 595.528 548.188 595.384 547.486 595.384 cv
545.56 595.384 li
545.56 600.928 li
543.778 600.928 li
543.778 587.806 li
547.792 587.806 li
549.286 587.806 550.402 588.13 551.14 588.742 cv
551.878 589.372 552.256 590.326 552.256 591.586 cv
552.256 592.414 552.058 593.116 551.68 593.656 cv
551.284 594.196 550.726 594.574 550.006 594.772 cv
545.56 589.264 mo
545.56 593.926 li
547.792 593.926 li
548.638 593.926 549.286 593.728 549.718 593.332 cv
550.15 592.936 550.384 592.36 550.384 591.586 cv
550.384 590.83 550.15 590.254 549.718 589.858 cv
549.286 589.462 548.638 589.264 547.792 589.264 cv
545.56 589.264 li
f
562.516 594.772 mo
562.894 594.916 563.272 595.186 563.632 595.6 cv
563.992 596.032 564.352 596.608 564.712 597.346 cv
566.512 600.928 li
564.604 600.928 li
562.93 597.562 li
562.498 596.698 562.066 596.104 561.67 595.816 cv
561.256 595.528 560.698 595.384 559.996 595.384 cv
558.07 595.384 li
558.07 600.928 li
556.288 600.928 li
556.288 587.806 li
560.302 587.806 li
561.796 587.806 562.912 588.13 563.65 588.742 cv
564.388 589.372 564.766 590.326 564.766 591.586 cv
564.766 592.414 564.568 593.116 564.19 593.656 cv
563.794 594.196 563.236 594.574 562.516 594.772 cv
558.07 589.264 mo
558.07 593.926 li
560.302 593.926 li
561.148 593.926 561.796 593.728 562.228 593.332 cv
562.66 592.936 562.894 592.36 562.894 591.586 cv
562.894 590.83 562.66 590.254 562.228 589.858 cv
561.796 589.462 561.148 589.264 560.302 589.264 cv
558.07 589.264 li
f
572.758 588.976 mo
571.84 588.976 571.156 589.426 570.688 590.326 cv
570.22 591.226 570.004 592.576 570.004 594.376 cv
570.004 596.176 570.22 597.526 570.688 598.426 cv
571.156 599.326 571.84 599.776 572.758 599.776 cv
573.676 599.776 574.36 599.326 574.828 598.426 cv
575.278 597.526 575.512 596.176 575.512 594.376 cv
575.512 592.576 575.278 591.226 574.828 590.326 cv
574.36 589.426 573.676 588.976 572.758 588.976 cv
572.758 587.572 mo
574.216 587.572 575.332 588.166 576.124 589.318 cv
576.898 590.488 577.294 592.18 577.294 594.376 cv
577.294 596.59 576.898 598.282 576.124 599.434 cv
575.332 600.586 574.216 601.162 572.758 601.162 cv
571.282 601.162 570.148 600.586 569.374 599.434 cv
568.6 598.282 568.222 596.59 568.222 594.376 cv
568.222 592.18 568.6 590.488 569.374 589.318 cv
570.148 588.166 571.282 587.572 572.758 587.572 cv
f
580.408 598.696 mo
582.262 598.696 li
582.262 600.928 li
580.408 600.928 li
580.408 598.696 li
f
586.438 599.434 mo
589.336 599.434 li
589.336 589.426 li
586.186 590.056 li
586.186 588.436 li
589.318 587.806 li
591.1 587.806 li
591.1 599.434 li
593.998 599.434 li
593.998 600.928 li
586.438 600.928 li
586.438 599.434 li
f
417.321 608.692 mo
416.397 610.288 415.725 611.842 415.284 613.375 cv
414.822 614.908 414.612 616.462 414.612 618.037 cv
414.612 619.633 414.822 621.187 415.284 622.72 cv
415.725 624.274 416.397 625.807 417.321 627.382 cv
415.683 627.382 li
414.654 625.765 413.877 624.211 413.373 622.657 cv
412.869 621.103 412.617 619.57 412.617 618.037 cv
412.617 616.525 412.869 614.992 413.373 613.438 cv
413.877 611.884 414.633 610.309 415.683 608.692 cv
417.321 608.692 li
f
428.535 614.887 mo
428.535 608.671 li
430.425 608.671 li
430.425 624.631 li
428.535 624.631 li
428.535 622.909 li
428.136 623.602 427.632 624.106 427.023 624.421 cv
426.414 624.736 425.7 624.904 424.86 624.904 cv
423.474 624.904 422.34 624.358 421.458 623.266 cv
420.576 622.174 420.156 620.704 420.156 618.898 cv
420.156 617.092 420.576 615.643 421.458 614.53 cv
422.34 613.438 423.474 612.871 424.86 612.871 cv
425.7 612.871 426.414 613.039 427.023 613.375 cv
427.632 613.711 428.136 614.215 428.535 614.887 cv
422.109 618.898 mo
422.109 620.284 422.382 621.376 422.949 622.174 cv
423.516 622.972 424.314 623.35 425.322 623.35 cv
426.309 623.35 427.086 622.972 427.674 622.174 cv
428.241 621.376 428.535 620.284 428.535 618.898 cv
428.535 617.512 428.241 616.441 427.674 615.643 cv
427.086 614.845 426.309 614.446 425.322 614.446 cv
424.314 614.446 423.516 614.845 422.949 615.643 cv
422.382 616.441 422.109 617.512 422.109 618.898 cv
f
434.016 608.692 mo
435.654 608.692 li
436.662 610.309 437.439 611.884 437.943 613.438 cv
438.447 614.992 438.72 616.525 438.72 618.037 cv
438.72 619.57 438.447 621.103 437.943 622.657 cv
437.439 624.211 436.662 625.765 435.654 627.382 cv
434.016 627.382 li
434.919 625.807 435.591 624.274 436.053 622.72 cv
436.494 621.187 436.725 619.633 436.725 618.037 cv
436.725 616.462 436.494 614.908 436.053 613.375 cv
435.591 611.842 434.919 610.288 434.016 608.692 cv
f
442.584 609.322 mo
444.663 609.322 li
444.663 615.601 li
452.181 615.601 li
452.181 609.322 li
454.26 609.322 li
454.26 624.631 li
452.181 624.631 li
452.181 617.344 li
444.663 617.344 li
444.663 624.631 li
442.584 624.631 li
442.584 609.322 li
f
458.292 613.144 mo
460.182 613.144 li
460.182 624.631 li
458.292 624.631 li
458.292 613.144 li
458.292 608.671 mo
460.182 608.671 li
460.182 611.065 li
458.292 611.065 li
458.292 608.671 li
f
465.999 609.889 mo
465.999 613.144 li
469.884 613.144 li
469.884 614.614 li
465.999 614.614 li
465.999 620.851 li
465.999 621.796 466.125 622.405 466.377 622.657 cv
466.629 622.93 467.154 623.056 467.952 623.056 cv
469.884 623.056 li
469.884 624.631 li
467.952 624.631 li
466.482 624.631 465.474 624.358 464.928 623.812 cv
464.382 623.266 464.109 622.279 464.109 620.851 cv
464.109 614.614 li
462.723 614.614 li
462.723 613.144 li
464.109 613.144 li
464.109 609.889 li
465.999 609.889 li
f
486.389 617.449 mo
486.83 617.617 487.271 617.932 487.691 618.415 cv
488.111 618.919 488.531 619.591 488.951 620.452 cv
491.051 624.631 li
488.825 624.631 li
486.872 620.704 li
486.368 619.696 485.864 619.003 485.402 618.667 cv
484.919 618.331 484.268 618.163 483.449 618.163 cv
481.202 618.163 li
481.202 624.631 li
479.123 624.631 li
479.123 609.322 li
483.806 609.322 li
485.549 609.322 486.851 609.7 487.712 610.414 cv
488.573 611.149 489.014 612.262 489.014 613.732 cv
489.014 614.698 488.783 615.517 488.342 616.147 cv
487.88 616.777 487.229 617.218 486.389 617.449 cv
481.202 611.023 mo
481.202 616.462 li
483.806 616.462 li
484.793 616.462 485.549 616.231 486.053 615.769 cv
486.557 615.307 486.83 614.635 486.83 613.732 cv
486.83 612.85 486.557 612.178 486.053 611.716 cv
485.549 611.254 484.793 611.023 483.806 611.023 cv
481.202 611.023 li
f
498.863 618.856 mo
497.33 618.856 496.28 619.045 495.692 619.381 cv
495.104 619.738 494.81 620.326 494.81 621.166 cv
494.81 621.838 495.02 622.384 495.461 622.762 cv
495.902 623.161 496.511 623.35 497.267 623.35 cv
498.317 623.35 499.157 622.993 499.787 622.237 cv
500.417 621.502 500.732 620.515 500.732 619.276 cv
500.732 618.856 li
498.863 618.856 li
502.622 618.079 mo
502.622 624.631 li
500.732 624.631 li
500.732 622.888 li
500.291 623.602 499.745 624.106 499.115 624.421 cv
498.485 624.736 497.687 624.904 496.763 624.904 cv
495.587 624.904 494.642 624.589 493.949 623.938 cv
493.256 623.287 492.92 622.405 492.92 621.292 cv
492.92 620.011 493.34 619.045 494.222 618.373 cv
495.083 617.722 496.364 617.386 498.086 617.386 cv
500.732 617.386 li
500.732 617.197 li
500.732 616.336 500.438 615.664 499.871 615.181 cv
499.304 614.719 498.506 614.467 497.477 614.467 cv
496.805 614.467 496.175 614.551 495.545 614.719 cv
494.915 614.887 494.327 615.118 493.76 615.412 cv
493.76 613.669 li
494.432 613.417 495.104 613.207 495.755 613.081 cv
496.406 612.955 497.036 612.871 497.666 612.871 cv
499.325 612.871 500.564 613.312 501.383 614.173 cv
502.202 615.034 502.622 616.336 502.622 618.079 cv
f
508.377 609.889 mo
508.377 613.144 li
512.262 613.144 li
512.262 614.614 li
508.377 614.614 li
508.377 620.851 li
508.377 621.796 508.503 622.405 508.755 622.657 cv
509.007 622.93 509.532 623.056 510.33 623.056 cv
512.262 623.056 li
512.262 624.631 li
510.33 624.631 li
508.86 624.631 507.852 624.358 507.306 623.812 cv
506.76 623.266 506.487 622.279 506.487 620.851 cv
506.487 614.614 li
505.101 614.614 li
505.101 613.144 li
506.487 613.144 li
506.487 609.889 li
508.377 609.889 li
f
514.74 613.144 mo
516.63 613.144 li
516.63 624.631 li
514.74 624.631 li
514.74 613.144 li
514.74 608.671 mo
516.63 608.671 li
516.63 611.065 li
514.74 611.065 li
514.74 608.671 li
f
525.03 614.467 mo
524.022 614.467 523.224 614.866 522.636 615.664 cv
522.048 616.462 521.754 617.533 521.754 618.898 cv
521.754 620.284 522.027 621.355 522.615 622.153 cv
523.203 622.951 524.001 623.329 525.03 623.329 cv
526.038 623.329 526.836 622.951 527.424 622.153 cv
528.012 621.355 528.306 620.284 528.306 618.898 cv
528.306 617.554 528.012 616.462 527.424 615.664 cv
526.836 614.866 526.038 614.467 525.03 614.467 cv
525.03 612.871 mo
526.668 612.871 527.949 613.417 528.894 614.467 cv
529.818 615.538 530.301 617.008 530.301 618.898 cv
530.301 620.788 529.818 622.258 528.894 623.308 cv
527.949 624.379 526.668 624.904 525.03 624.904 cv
523.371 624.904 522.069 624.379 521.145 623.308 cv
520.221 622.258 519.759 620.788 519.759 618.898 cv
519.759 617.008 520.221 615.538 521.145 614.467 cv
522.069 613.417 523.371 612.871 525.03 612.871 cv
f
355.279 580.256 mo
351.779 580.256 li
f
355.279 580.256 mo
351.779 580.256 li
@
311.993 574.859 mo
311.024 574.859 310.302 575.334 309.808 576.284 cv
309.314 577.234 309.086 578.659 309.086 580.559 cv
309.086 582.459 309.314 583.884 309.808 584.834 cv
310.302 585.784 311.024 586.259 311.993 586.259 cv
312.962 586.259 313.684 585.784 314.178 584.834 cv
314.653 583.884 314.9 582.459 314.9 580.559 cv
314.9 578.659 314.653 577.234 314.178 576.284 cv
313.684 575.334 312.962 574.859 311.993 574.859 cv
311.993 573.377 mo
313.532 573.377 314.71 574.004 315.546 575.22 cv
316.363 576.455 316.781 578.241 316.781 580.559 cv
316.781 582.896 316.363 584.682 315.546 585.898 cv
314.71 587.114 313.532 587.722 311.993 587.722 cv
310.435 587.722 309.238 587.114 308.421 585.898 cv
307.604 584.682 307.205 582.896 307.205 580.559 cv
307.205 578.241 307.604 576.455 308.421 575.22 cv
309.238 574.004 310.435 573.377 311.993 573.377 cv
f
320.068 585.119 mo
322.025 585.119 li
322.025 587.475 li
320.068 587.475 li
320.068 585.119 li
f
325.635 573.624 mo
334.546 573.624 li
334.546 574.422 li
329.511 587.475 li
327.554 587.475 li
332.285 575.201 li
325.635 575.201 li
325.635 573.624 li
f
342.203 574.859 mo
341.234 574.859 340.512 575.334 340.018 576.284 cv
339.524 577.234 339.296 578.659 339.296 580.559 cv
339.296 582.459 339.524 583.884 340.018 584.834 cv
340.512 585.784 341.234 586.259 342.203 586.259 cv
343.172 586.259 343.894 585.784 344.388 584.834 cv
344.863 583.884 345.11 582.459 345.11 580.559 cv
345.11 578.659 344.863 577.234 344.388 576.284 cv
343.894 575.334 343.172 574.859 342.203 574.859 cv
342.203 573.377 mo
343.742 573.377 344.92 574.004 345.756 575.22 cv
346.573 576.455 346.991 578.241 346.991 580.559 cv
346.991 582.896 346.573 584.682 345.756 585.898 cv
344.92 587.114 343.742 587.722 342.203 587.722 cv
340.645 587.722 339.448 587.114 338.631 585.898 cv
337.814 584.682 337.415 582.896 337.415 580.559 cv
337.415 578.241 337.814 576.455 338.631 575.22 cv
339.448 574.004 340.645 573.377 342.203 573.377 cv
f
355.279 542.674 mo
351.779 542.674 li
f
355.279 542.674 mo
351.779 542.674 li
@
311.993 537.277 mo
311.024 537.277 310.302 537.752 309.808 538.702 cv
309.314 539.652 309.086 541.077 309.086 542.977 cv
309.086 544.877 309.314 546.302 309.808 547.252 cv
310.302 548.202 311.024 548.677 311.993 548.677 cv
312.962 548.677 313.684 548.202 314.178 547.252 cv
314.653 546.302 314.9 544.877 314.9 542.977 cv
314.9 541.077 314.653 539.652 314.178 538.702 cv
313.684 537.752 312.962 537.277 311.993 537.277 cv
311.993 535.795 mo
313.532 535.795 314.71 536.422 315.546 537.638 cv
316.363 538.873 316.781 540.659 316.781 542.977 cv
316.781 545.314 316.363 547.1 315.546 548.316 cv
314.71 549.532 313.532 550.14 311.993 550.14 cv
310.435 550.14 309.238 549.532 308.421 548.316 cv
307.604 547.1 307.205 545.314 307.205 542.977 cv
307.205 540.659 307.604 538.873 308.421 537.638 cv
309.238 536.422 310.435 535.795 311.993 535.795 cv
f
320.068 547.537 mo
322.025 547.537 li
322.025 549.893 li
320.068 549.893 li
320.068 547.537 li
f
325.635 536.042 mo
334.546 536.042 li
334.546 536.84 li
329.511 549.893 li
327.554 549.893 li
332.285 537.619 li
325.635 537.619 li
325.635 536.042 li
f
338.213 536.042 mo
345.566 536.042 li
345.566 537.619 li
339.923 537.619 li
339.923 541.02 li
340.189 540.925 340.474 540.849 340.74 540.811 cv
341.006 540.773 341.291 540.735 341.557 540.735 cv
343.096 540.735 344.312 541.172 345.224 542.008 cv
346.136 542.863 346.592 544.003 346.592 545.447 cv
346.592 546.948 346.117 548.107 345.186 548.924 cv
344.255 549.741 342.944 550.14 341.272 550.14 cv
340.683 550.14 340.094 550.083 339.486 550.007 cv
338.878 549.912 338.27 549.779 337.624 549.57 cv
337.624 547.689 li
338.175 547.993 338.745 548.221 339.353 548.373 cv
339.942 548.525 340.569 548.582 341.234 548.582 cv
342.298 548.582 343.153 548.316 343.78 547.746 cv
344.388 547.176 344.711 546.416 344.711 545.447 cv
344.711 544.497 344.388 543.737 343.78 543.167 cv
343.153 542.597 342.298 542.312 341.234 542.312 cv
340.74 542.312 340.227 542.369 339.733 542.483 cv
339.239 542.597 338.726 542.768 338.213 542.996 cv
338.213 536.042 li
f
355.279 505.093 mo
351.779 505.093 li
f
355.279 505.093 mo
351.779 505.093 li
@
311.993 499.695 mo
311.024 499.695 310.302 500.17 309.808 501.12 cv
309.314 502.07 309.086 503.495 309.086 505.395 cv
309.086 507.295 309.314 508.72 309.808 509.67 cv
310.302 510.62 311.024 511.095 311.993 511.095 cv
312.962 511.095 313.684 510.62 314.178 509.67 cv
314.653 508.72 314.9 507.295 314.9 505.395 cv
314.9 503.495 314.653 502.07 314.178 501.12 cv
313.684 500.17 312.962 499.695 311.993 499.695 cv
311.993 498.213 mo
313.532 498.213 314.71 498.84 315.546 500.056 cv
316.363 501.291 316.781 503.077 316.781 505.395 cv
316.781 507.732 316.363 509.518 315.546 510.734 cv
314.71 511.95 313.532 512.558 311.993 512.558 cv
310.435 512.558 309.238 511.95 308.421 510.734 cv
307.604 509.518 307.205 507.732 307.205 505.395 cv
307.205 503.077 307.604 501.291 308.421 500.056 cv
309.238 498.84 310.435 498.213 311.993 498.213 cv
f
320.068 509.955 mo
322.025 509.955 li
322.025 512.311 li
320.068 512.311 li
320.068 509.955 li
f
330.119 505.737 mo
329.226 505.737 328.523 505.984 328.01 506.459 cv
327.497 506.934 327.25 507.58 327.25 508.416 cv
327.25 509.252 327.497 509.917 328.01 510.392 cv
328.523 510.867 329.226 511.095 330.119 511.095 cv
330.993 511.095 331.696 510.867 332.209 510.373 cv
332.722 509.898 332.988 509.252 332.988 508.416 cv
332.988 507.58 332.722 506.934 332.228 506.459 cv
331.715 505.984 331.012 505.737 330.119 505.737 cv
328.238 504.939 mo
327.44 504.749 326.813 504.369 326.357 503.818 cv
325.901 503.267 325.692 502.602 325.692 501.804 cv
325.692 500.702 326.072 499.828 326.87 499.182 cv
327.649 498.536 328.732 498.213 330.119 498.213 cv
331.487 498.213 332.57 498.536 333.368 499.182 cv
334.147 499.828 334.546 500.702 334.546 501.804 cv
334.546 502.602 334.318 503.267 333.862 503.818 cv
333.406 504.369 332.798 504.749 332 504.939 cv
332.893 505.148 333.596 505.566 334.109 506.174 cv
334.603 506.782 334.869 507.542 334.869 508.416 cv
334.869 509.765 334.451 510.791 333.634 511.494 cv
332.798 512.216 331.639 512.558 330.119 512.558 cv
328.58 512.558 327.402 512.216 326.585 511.494 cv
325.768 510.791 325.369 509.765 325.369 508.416 cv
325.369 507.542 325.616 506.782 326.129 506.174 cv
326.623 505.566 327.326 505.148 328.238 504.939 cv
327.554 501.975 mo
327.554 502.697 327.763 503.267 328.219 503.666 cv
328.675 504.065 329.302 504.255 330.119 504.255 cv
330.917 504.255 331.544 504.065 332 503.666 cv
332.456 503.267 332.684 502.697 332.684 501.975 cv
332.684 501.253 332.456 500.702 332 500.303 cv
331.544 499.904 330.917 499.695 330.119 499.695 cv
329.302 499.695 328.675 499.904 328.219 500.303 cv
327.763 500.702 327.554 501.253 327.554 501.975 cv
f
342.203 499.695 mo
341.234 499.695 340.512 500.17 340.018 501.12 cv
339.524 502.07 339.296 503.495 339.296 505.395 cv
339.296 507.295 339.524 508.72 340.018 509.67 cv
340.512 510.62 341.234 511.095 342.203 511.095 cv
343.172 511.095 343.894 510.62 344.388 509.67 cv
344.863 508.72 345.11 507.295 345.11 505.395 cv
345.11 503.495 344.863 502.07 344.388 501.12 cv
343.894 500.17 343.172 499.695 342.203 499.695 cv
342.203 498.213 mo
343.742 498.213 344.92 498.84 345.756 500.056 cv
346.573 501.291 346.991 503.077 346.991 505.395 cv
346.991 507.732 346.573 509.518 345.756 510.734 cv
344.92 511.95 343.742 512.558 342.203 512.558 cv
340.645 512.558 339.448 511.95 338.631 510.734 cv
337.814 509.518 337.415 507.732 337.415 505.395 cv
337.415 503.077 337.814 501.291 338.631 500.056 cv
339.448 498.84 340.645 498.213 342.203 498.213 cv
f
355.279 467.511 mo
351.779 467.511 li
f
355.279 467.511 mo
351.779 467.511 li
@
311.993 462.114 mo
311.024 462.114 310.302 462.589 309.808 463.539 cv
309.314 464.489 309.086 465.914 309.086 467.814 cv
309.086 469.714 309.314 471.139 309.808 472.089 cv
310.302 473.039 311.024 473.514 311.993 473.514 cv
312.962 473.514 313.684 473.039 314.178 472.089 cv
314.653 471.139 314.9 469.714 314.9 467.814 cv
314.9 465.914 314.653 464.489 314.178 463.539 cv
313.684 462.589 312.962 462.114 311.993 462.114 cv
311.993 460.632 mo
313.532 460.632 314.71 461.259 315.546 462.475 cv
316.363 463.71 316.781 465.496 316.781 467.814 cv
316.781 470.151 316.363 471.937 315.546 473.153 cv
314.71 474.369 313.532 474.977 311.993 474.977 cv
310.435 474.977 309.238 474.369 308.421 473.153 cv
307.604 471.937 307.205 470.151 307.205 467.814 cv
307.205 465.496 307.604 463.71 308.421 462.475 cv
309.238 461.259 310.435 460.632 311.993 460.632 cv
f
320.068 472.374 mo
322.025 472.374 li
322.025 474.73 li
320.068 474.73 li
320.068 472.374 li
f
330.119 468.156 mo
329.226 468.156 328.523 468.403 328.01 468.878 cv
327.497 469.353 327.25 469.999 327.25 470.835 cv
327.25 471.671 327.497 472.336 328.01 472.811 cv
328.523 473.286 329.226 473.514 330.119 473.514 cv
330.993 473.514 331.696 473.286 332.209 472.792 cv
332.722 472.317 332.988 471.671 332.988 470.835 cv
332.988 469.999 332.722 469.353 332.228 468.878 cv
331.715 468.403 331.012 468.156 330.119 468.156 cv
328.238 467.358 mo
327.44 467.168 326.813 466.788 326.357 466.237 cv
325.901 465.686 325.692 465.021 325.692 464.223 cv
325.692 463.121 326.072 462.247 326.87 461.601 cv
327.649 460.955 328.732 460.632 330.119 460.632 cv
331.487 460.632 332.57 460.955 333.368 461.601 cv
334.147 462.247 334.546 463.121 334.546 464.223 cv
334.546 465.021 334.318 465.686 333.862 466.237 cv
333.406 466.788 332.798 467.168 332 467.358 cv
332.893 467.567 333.596 467.985 334.109 468.593 cv
334.603 469.201 334.869 469.961 334.869 470.835 cv
334.869 472.184 334.451 473.21 333.634 473.913 cv
332.798 474.635 331.639 474.977 330.119 474.977 cv
328.58 474.977 327.402 474.635 326.585 473.913 cv
325.768 473.21 325.369 472.184 325.369 470.835 cv
325.369 469.961 325.616 469.201 326.129 468.593 cv
326.623 467.985 327.326 467.567 328.238 467.358 cv
327.554 464.394 mo
327.554 465.116 327.763 465.686 328.219 466.085 cv
328.675 466.484 329.302 466.674 330.119 466.674 cv
330.917 466.674 331.544 466.484 332 466.085 cv
332.456 465.686 332.684 465.116 332.684 464.394 cv
332.684 463.672 332.456 463.121 332 462.722 cv
331.544 462.323 330.917 462.114 330.119 462.114 cv
329.302 462.114 328.675 462.323 328.219 462.722 cv
327.763 463.121 327.554 463.672 327.554 464.394 cv
f
338.213 460.879 mo
345.566 460.879 li
345.566 462.456 li
339.923 462.456 li
339.923 465.857 li
340.189 465.762 340.474 465.686 340.74 465.648 cv
341.006 465.61 341.291 465.572 341.557 465.572 cv
343.096 465.572 344.312 466.009 345.224 466.845 cv
346.136 467.7 346.592 468.84 346.592 470.284 cv
346.592 471.785 346.117 472.944 345.186 473.761 cv
344.255 474.578 342.944 474.977 341.272 474.977 cv
340.683 474.977 340.094 474.92 339.486 474.844 cv
338.878 474.749 338.27 474.616 337.624 474.407 cv
337.624 472.526 li
338.175 472.83 338.745 473.058 339.353 473.21 cv
339.942 473.362 340.569 473.419 341.234 473.419 cv
342.298 473.419 343.153 473.153 343.78 472.583 cv
344.388 472.013 344.711 471.253 344.711 470.284 cv
344.711 469.334 344.388 468.574 343.78 468.004 cv
343.153 467.434 342.298 467.149 341.234 467.149 cv
340.74 467.149 340.227 467.206 339.733 467.32 cv
339.239 467.434 338.726 467.605 338.213 467.833 cv
338.213 460.879 li
f
355.279 429.929 mo
351.779 429.929 li
f
355.279 429.929 mo
351.779 429.929 li
@
311.993 424.532 mo
311.024 424.532 310.302 425.007 309.808 425.957 cv
309.314 426.907 309.086 428.332 309.086 430.232 cv
309.086 432.132 309.314 433.557 309.808 434.507 cv
310.302 435.457 311.024 435.932 311.993 435.932 cv
312.962 435.932 313.684 435.457 314.178 434.507 cv
314.653 433.557 314.9 432.132 314.9 430.232 cv
314.9 428.332 314.653 426.907 314.178 425.957 cv
313.684 425.007 312.962 424.532 311.993 424.532 cv
311.993 423.05 mo
313.532 423.05 314.71 423.677 315.546 424.893 cv
316.363 426.128 316.781 427.914 316.781 430.232 cv
316.781 432.569 316.363 434.355 315.546 435.571 cv
314.71 436.787 313.532 437.395 311.993 437.395 cv
310.435 437.395 309.238 436.787 308.421 435.571 cv
307.604 434.355 307.205 432.569 307.205 430.232 cv
307.205 427.914 307.604 426.128 308.421 424.893 cv
309.238 423.677 310.435 423.05 311.993 423.05 cv
f
320.068 434.792 mo
322.025 434.792 li
322.025 437.148 li
320.068 437.148 li
320.068 434.792 li
f
326.167 436.863 mo
326.167 435.153 li
326.623 435.381 327.098 435.552 327.592 435.666 cv
328.067 435.78 328.542 435.837 329.017 435.837 cv
330.233 435.837 331.183 435.438 331.829 434.602 cv
332.475 433.766 332.855 432.512 332.969 430.802 cv
332.589 431.334 332.133 431.752 331.601 432.037 cv
331.05 432.322 330.442 432.455 329.777 432.455 cv
328.371 432.455 327.269 432.037 326.471 431.201 cv
325.673 430.365 325.274 429.225 325.274 427.762 cv
325.274 426.356 325.692 425.216 326.528 424.342 cv
327.364 423.487 328.485 423.05 329.891 423.05 cv
331.487 423.05 332.722 423.677 333.558 424.893 cv
334.394 426.128 334.831 427.914 334.831 430.232 cv
334.831 432.436 334.299 434.165 333.273 435.457 cv
332.228 436.749 330.841 437.395 329.093 437.395 cv
328.618 437.395 328.143 437.338 327.668 437.262 cv
327.174 437.186 326.68 437.053 326.167 436.863 cv
329.891 430.992 mo
330.727 430.992 331.392 430.707 331.886 430.137 cv
332.38 429.567 332.627 428.769 332.627 427.762 cv
332.627 426.774 332.38 425.976 331.886 425.406 cv
331.392 424.836 330.727 424.532 329.891 424.532 cv
329.055 424.532 328.39 424.836 327.896 425.406 cv
327.402 425.976 327.155 426.774 327.155 427.762 cv
327.155 428.769 327.402 429.567 327.896 430.137 cv
328.39 430.707 329.055 430.992 329.891 430.992 cv
f
342.203 424.532 mo
341.234 424.532 340.512 425.007 340.018 425.957 cv
339.524 426.907 339.296 428.332 339.296 430.232 cv
339.296 432.132 339.524 433.557 340.018 434.507 cv
340.512 435.457 341.234 435.932 342.203 435.932 cv
343.172 435.932 343.894 435.457 344.388 434.507 cv
344.863 433.557 345.11 432.132 345.11 430.232 cv
345.11 428.332 344.863 426.907 344.388 425.957 cv
343.894 425.007 343.172 424.532 342.203 424.532 cv
342.203 423.05 mo
343.742 423.05 344.92 423.677 345.756 424.893 cv
346.573 426.128 346.991 427.914 346.991 430.232 cv
346.991 432.569 346.573 434.355 345.756 435.571 cv
344.92 436.787 343.742 437.395 342.203 437.395 cv
340.645 437.395 339.448 436.787 338.631 435.571 cv
337.814 434.355 337.415 432.569 337.415 430.232 cv
337.415 427.914 337.814 426.128 338.631 424.893 cv
339.448 423.677 340.645 423.05 342.203 423.05 cv
f
355.279 392.348 mo
351.779 392.348 li
f
355.279 392.348 mo
351.779 392.348 li
@
311.993 386.95 mo
311.024 386.95 310.302 387.425 309.808 388.375 cv
309.314 389.325 309.086 390.75 309.086 392.65 cv
309.086 394.55 309.314 395.975 309.808 396.925 cv
310.302 397.875 311.024 398.35 311.993 398.35 cv
312.962 398.35 313.684 397.875 314.178 396.925 cv
314.653 395.975 314.9 394.55 314.9 392.65 cv
314.9 390.75 314.653 389.325 314.178 388.375 cv
313.684 387.425 312.962 386.95 311.993 386.95 cv
311.993 385.468 mo
313.532 385.468 314.71 386.095 315.546 387.311 cv
316.363 388.546 316.781 390.332 316.781 392.65 cv
316.781 394.987 316.363 396.773 315.546 397.989 cv
314.71 399.205 313.532 399.813 311.993 399.813 cv
310.435 399.813 309.238 399.205 308.421 397.989 cv
307.604 396.773 307.205 394.987 307.205 392.65 cv
307.205 390.332 307.604 388.546 308.421 387.311 cv
309.238 386.095 310.435 385.468 311.993 385.468 cv
f
320.068 397.21 mo
322.025 397.21 li
322.025 399.566 li
320.068 399.566 li
320.068 397.21 li
f
326.167 399.281 mo
326.167 397.571 li
326.623 397.799 327.098 397.97 327.592 398.084 cv
328.067 398.198 328.542 398.255 329.017 398.255 cv
330.233 398.255 331.183 397.856 331.829 397.02 cv
332.475 396.184 332.855 394.93 332.969 393.22 cv
332.589 393.752 332.133 394.17 331.601 394.455 cv
331.05 394.74 330.442 394.873 329.777 394.873 cv
328.371 394.873 327.269 394.455 326.471 393.619 cv
325.673 392.783 325.274 391.643 325.274 390.18 cv
325.274 388.774 325.692 387.634 326.528 386.76 cv
327.364 385.905 328.485 385.468 329.891 385.468 cv
331.487 385.468 332.722 386.095 333.558 387.311 cv
334.394 388.546 334.831 390.332 334.831 392.65 cv
334.831 394.854 334.299 396.583 333.273 397.875 cv
332.228 399.167 330.841 399.813 329.093 399.813 cv
328.618 399.813 328.143 399.756 327.668 399.68 cv
327.174 399.604 326.68 399.471 326.167 399.281 cv
329.891 393.41 mo
330.727 393.41 331.392 393.125 331.886 392.555 cv
332.38 391.985 332.627 391.187 332.627 390.18 cv
332.627 389.192 332.38 388.394 331.886 387.824 cv
331.392 387.254 330.727 386.95 329.891 386.95 cv
329.055 386.95 328.39 387.254 327.896 387.824 cv
327.402 388.394 327.155 389.192 327.155 390.18 cv
327.155 391.187 327.402 391.985 327.896 392.555 cv
328.39 393.125 329.055 393.41 329.891 393.41 cv
f
338.213 385.715 mo
345.566 385.715 li
345.566 387.292 li
339.923 387.292 li
339.923 390.693 li
340.189 390.598 340.474 390.522 340.74 390.484 cv
341.006 390.446 341.291 390.408 341.557 390.408 cv
343.096 390.408 344.312 390.845 345.224 391.681 cv
346.136 392.536 346.592 393.676 346.592 395.12 cv
346.592 396.621 346.117 397.78 345.186 398.597 cv
344.255 399.414 342.944 399.813 341.272 399.813 cv
340.683 399.813 340.094 399.756 339.486 399.68 cv
338.878 399.585 338.27 399.452 337.624 399.243 cv
337.624 397.362 li
338.175 397.666 338.745 397.894 339.353 398.046 cv
339.942 398.198 340.569 398.255 341.234 398.255 cv
342.298 398.255 343.153 397.989 343.78 397.419 cv
344.388 396.849 344.711 396.089 344.711 395.12 cv
344.711 394.17 344.388 393.41 343.78 392.84 cv
343.153 392.27 342.298 391.985 341.234 391.985 cv
340.74 391.985 340.227 392.042 339.733 392.156 cv
339.239 392.27 338.726 392.441 338.213 392.669 cv
338.213 385.715 li
f
355.279 354.766 mo
351.779 354.766 li
f
355.279 354.766 mo
351.779 354.766 li
@
308.307 360.408 mo
311.366 360.408 li
311.366 349.844 li
308.041 350.509 li
308.041 348.799 li
311.347 348.134 li
313.228 348.134 li
313.228 360.408 li
316.287 360.408 li
316.287 361.985 li
308.307 361.985 li
308.307 360.408 li
f
320.068 359.629 mo
322.025 359.629 li
322.025 361.985 li
320.068 361.985 li
320.068 359.629 li
f
330.119 349.369 mo
329.15 349.369 328.428 349.844 327.934 350.794 cv
327.44 351.744 327.212 353.169 327.212 355.069 cv
327.212 356.969 327.44 358.394 327.934 359.344 cv
328.428 360.294 329.15 360.769 330.119 360.769 cv
331.088 360.769 331.81 360.294 332.304 359.344 cv
332.779 358.394 333.026 356.969 333.026 355.069 cv
333.026 353.169 332.779 351.744 332.304 350.794 cv
331.81 349.844 331.088 349.369 330.119 349.369 cv
330.119 347.887 mo
331.658 347.887 332.836 348.514 333.672 349.73 cv
334.489 350.965 334.907 352.751 334.907 355.069 cv
334.907 357.406 334.489 359.192 333.672 360.408 cv
332.836 361.624 331.658 362.232 330.119 362.232 cv
328.561 362.232 327.364 361.624 326.547 360.408 cv
325.73 359.192 325.331 357.406 325.331 355.069 cv
325.331 352.751 325.73 350.965 326.547 349.73 cv
327.364 348.514 328.561 347.887 330.119 347.887 cv
f
342.203 349.369 mo
341.234 349.369 340.512 349.844 340.018 350.794 cv
339.524 351.744 339.296 353.169 339.296 355.069 cv
339.296 356.969 339.524 358.394 340.018 359.344 cv
340.512 360.294 341.234 360.769 342.203 360.769 cv
343.172 360.769 343.894 360.294 344.388 359.344 cv
344.863 358.394 345.11 356.969 345.11 355.069 cv
345.11 353.169 344.863 351.744 344.388 350.794 cv
343.894 349.844 343.172 349.369 342.203 349.369 cv
342.203 347.887 mo
343.742 347.887 344.92 348.514 345.756 349.73 cv
346.573 350.965 346.991 352.751 346.991 355.069 cv
346.991 357.406 346.573 359.192 345.756 360.408 cv
344.92 361.624 343.742 362.232 342.203 362.232 cv
340.645 362.232 339.448 361.624 338.631 360.408 cv
337.814 359.192 337.415 357.406 337.415 355.069 cv
337.415 352.751 337.814 350.965 338.631 349.73 cv
339.448 348.514 340.645 347.887 342.203 347.887 cv
f
2 lc
0 lj
355.279 580.256 mo
355.279 354.766 li
@
586.952 580.256 mo
586.952 354.766 li
@
355.279 580.256 mo
586.952 580.256 li
@
355.279 354.766 mo
586.952 354.766 li
@
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
